{"ast":null,"code":"\"use strict\"; // Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TaskStatus_1 = require(\"./TaskStatus\");\n/*\n * [[BaseTask]] provides common utilities for task implementations.\n */\n\n\nvar BaseTask =\n/** @class */\nfunction () {\n  function BaseTask(logger) {\n    this.logger = logger;\n    this.taskName = 'BaseTask';\n    this.parentTask = null;\n    this.status = TaskStatus_1.default.IDLE;\n    this.run = this.baseRun.bind(this, this.run);\n    this.cancel = this.baseCancel.bind(this, this.cancel);\n  }\n\n  BaseTask.prototype.cancel = function () {};\n\n  BaseTask.prototype.name = function () {\n    return this.parentTask ? this.parentTask.name() + \"/\" + this.taskName : this.taskName;\n  };\n\n  BaseTask.prototype.setParent = function (parentTask) {\n    this.parentTask = parentTask;\n  };\n\n  BaseTask.prototype.getStatus = function () {\n    return this.status;\n  };\n\n  BaseTask.prototype.logAndThrow = function (message) {\n    this.logger.info(message);\n    throw new Error(message);\n  };\n\n  BaseTask.prototype.baseRun = function (originalRun) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2, 3, 4]);\n\n            startTime = Date.now();\n            this.logger.info(\"running task \" + this.name());\n\n            switch (this.status) {\n              case TaskStatus_1.default.RUNNING:\n                this.logAndThrow(this.name() + \" is already running\");\n\n              case TaskStatus_1.default.CANCELED:\n                this.logAndThrow(this.name() + \" was canceled before running\");\n\n              case TaskStatus_1.default.FINISHED:\n                this.logAndThrow(this.name() + \" was already finished\");\n            }\n\n            this.status = TaskStatus_1.default.RUNNING;\n            return [4\n            /*yield*/\n            , originalRun.call(this)];\n\n          case 1:\n            _a.sent();\n\n            this.logger.info(this.name() + \" took \" + Math.round(Date.now() - startTime) + \" ms\");\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            err_1 = _a.sent();\n            throw err_1;\n\n          case 3:\n            if (this.status !== TaskStatus_1.default.CANCELED) {\n              this.status = TaskStatus_1.default.FINISHED;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BaseTask.prototype.baseCancel = function (originalCancel) {\n    if (this.status === TaskStatus_1.default.CANCELED || this.status === TaskStatus_1.default.FINISHED) {\n      return;\n    }\n\n    this.logger.info(\"canceling task \" + this.name());\n    this.status = TaskStatus_1.default.CANCELED;\n    originalCancel.call(this);\n  };\n\n  return BaseTask;\n}();\n\nexports.default = BaseTask;","map":{"version":3,"sources":["../../src/task/BaseTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TaskStatus_1 = require(\"./TaskStatus\");\n/*\n * [[BaseTask]] provides common utilities for task implementations.\n */\nvar BaseTask = /** @class */ (function () {\n    function BaseTask(logger) {\n        this.logger = logger;\n        this.taskName = 'BaseTask';\n        this.parentTask = null;\n        this.status = TaskStatus_1.default.IDLE;\n        this.run = this.baseRun.bind(this, this.run);\n        this.cancel = this.baseCancel.bind(this, this.cancel);\n    }\n    BaseTask.prototype.cancel = function () { };\n    BaseTask.prototype.name = function () {\n        return this.parentTask ? this.parentTask.name() + \"/\" + this.taskName : this.taskName;\n    };\n    BaseTask.prototype.setParent = function (parentTask) {\n        this.parentTask = parentTask;\n    };\n    BaseTask.prototype.getStatus = function () {\n        return this.status;\n    };\n    BaseTask.prototype.logAndThrow = function (message) {\n        this.logger.info(message);\n        throw new Error(message);\n    };\n    BaseTask.prototype.baseRun = function (originalRun) {\n        return __awaiter(this, void 0, void 0, function () {\n            var startTime, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, 3, 4]);\n                        startTime = Date.now();\n                        this.logger.info(\"running task \" + this.name());\n                        switch (this.status) {\n                            case TaskStatus_1.default.RUNNING:\n                                this.logAndThrow(this.name() + \" is already running\");\n                            case TaskStatus_1.default.CANCELED:\n                                this.logAndThrow(this.name() + \" was canceled before running\");\n                            case TaskStatus_1.default.FINISHED:\n                                this.logAndThrow(this.name() + \" was already finished\");\n                        }\n                        this.status = TaskStatus_1.default.RUNNING;\n                        return [4 /*yield*/, originalRun.call(this)];\n                    case 1:\n                        _a.sent();\n                        this.logger.info(this.name() + \" took \" + Math.round(Date.now() - startTime) + \" ms\");\n                        return [3 /*break*/, 4];\n                    case 2:\n                        err_1 = _a.sent();\n                        throw err_1;\n                    case 3:\n                        if (this.status !== TaskStatus_1.default.CANCELED) {\n                            this.status = TaskStatus_1.default.FINISHED;\n                        }\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BaseTask.prototype.baseCancel = function (originalCancel) {\n        if (this.status === TaskStatus_1.default.CANCELED || this.status === TaskStatus_1.default.FINISHED) {\n            return;\n        }\n        this.logger.info(\"canceling task \" + this.name());\n        this.status = TaskStatus_1.default.CANCELED;\n        originalCancel.call(this);\n    };\n    return BaseTask;\n}());\nexports.default = BaseTask;\n//# sourceMappingURL=BaseTask.js.map"]},"metadata":{},"sourceType":"script"}