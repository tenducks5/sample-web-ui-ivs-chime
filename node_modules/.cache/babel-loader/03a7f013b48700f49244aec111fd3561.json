{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RealtimeState_1 = require(\"./RealtimeState\");\n\nvar RealtimeVolumeIndicator_1 = require(\"./RealtimeVolumeIndicator\");\n/**\n * [[DefaultRealtimeController]] is written to adhere to the following tenets to\n * make privacy and performance bugs significantly less likely.\n *\n * 1. Any call to the object is guaranteed to succeed from the caller's\n *    perspective to the maximum extent that this can be ensured. However, all\n *    failures of the object are reported as fatal errors. For example, if local\n *    mute fails, then that is a privacy issue and we must tear down the\n *    connection and try starting over.\n *\n * 2. State is owned by the object and is considered authoritative at all times.\n *    For example, if [[realtimeIsLocalAudioMuted]] is true then the user *is*\n *    muted.\n *\n * 3. Callbacks are fired synchronously and do their work synchronously. Any\n *    unnecessary asynchronous implementation only invites latency and\n *    increases the surface error for potential errors.\n *\n * 4. Mutation only occurs when state changes. All state-changing functions are\n *    idempotent.\n *\n * 5. Every conditional branch gets its own if statement and test coverage is\n *    100% for this object.\n *\n * 6. Function parameters and returns use primitives only (no classes or enums).\n *    This minimizes the number of dependencies that consumers have to take on\n *    and allows the object to be more easily wrapped. Values are normalized\n *    where possible.\n *\n * 7. The object takes no other non-realtime dependencies.\n *\n * 8. Interface functions begin with `realtime` to make boundaries between the\n *    RealtimeController interface and the UI or business logic explicit and\n *    auditable.\n *\n * 9. Local state overrides remote state but not vice-versa. For example, if\n *    locally muted with an active audio input and a remote state indicates the\n *    same user is unmuted because the muted state has not yet propagated, then\n *    the volume indicator update for the user would show the remote mute state\n *    as muted. However, if locally muted without an active audio input and a\n *    remote state indicates the user is unmuted (since they are dialed in), the\n *    remote state persists but does not override the local state so\n *    [[realtimeIsLocalAudioMuted]] still returns true.\n */\n\n\nvar DefaultRealtimeController =\n/** @class */\nfunction () {\n  function DefaultRealtimeController() {\n    // Attendee Id\n    this.state = new RealtimeState_1.default();\n  }\n\n  DefaultRealtimeController.prototype.realtimeSetLocalAttendeeId = function (attendeeId, externalUserId) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.localAttendeeId = attendeeId;\n      _this.state.localExternalUserId = externalUserId;\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSetAttendeeIdPresence = function (attendeeId, present, externalUserId, dropped, posInFrame) {\n    var _this = this;\n\n    this.wrap(function () {\n      var e_1, _a;\n\n      if (present) {\n        _this.state.attendeeIdToExternalUserId[attendeeId] = externalUserId;\n      }\n\n      try {\n        for (var _b = __values(_this.state.attendeeIdChangesCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var fn = _c.value;\n          fn(attendeeId, present, externalUserId, dropped, posInFrame);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToAttendeeIdPresence = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.attendeeIdChangesCallbacks.push(callback);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeToAttendeeIdPresence = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      var index = _this.state.attendeeIdChangesCallbacks.indexOf(callback);\n\n      if (index !== -1) {\n        _this.state.attendeeIdChangesCallbacks.splice(index, 1);\n      }\n    });\n  }; // Audio Input\n\n\n  DefaultRealtimeController.prototype.realtimeSetLocalAudioInput = function (audioInput) {\n    var _this = this;\n\n    this.wrap(function () {\n      if (_this.state.audioInput === audioInput) {\n        return;\n      }\n\n      _this.setAudioInputEnabled(false);\n\n      _this.state.audioInput = audioInput;\n\n      _this.setAudioInputEnabled(!_this.state.muted);\n    });\n  }; // Muting\n\n\n  DefaultRealtimeController.prototype.realtimeSetCanUnmuteLocalAudio = function (canUnmute) {\n    var _this = this;\n\n    this.wrap(function () {\n      var e_2, _a;\n\n      if (_this.state.canUnmute === canUnmute) {\n        return;\n      }\n\n      _this.state.canUnmute = canUnmute;\n\n      try {\n        for (var _b = __values(_this.state.setCanUnmuteLocalAudioCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var fn = _c.value;\n          fn(canUnmute);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToSetCanUnmuteLocalAudio = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.setCanUnmuteLocalAudioCallbacks.push(callback);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeToSetCanUnmuteLocalAudio = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      var index = _this.state.setCanUnmuteLocalAudioCallbacks.indexOf(callback);\n\n      if (index !== -1) {\n        _this.state.setCanUnmuteLocalAudioCallbacks.splice(index, 1);\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeCanUnmuteLocalAudio = function () {\n    var _this = this;\n\n    var result = false;\n    this.wrap(function () {\n      result = _this.state.canUnmute;\n    });\n    return result;\n  };\n\n  DefaultRealtimeController.prototype.realtimeMuteLocalAudio = function () {\n    var _this = this;\n\n    this.wrap(function () {\n      var e_3, _a;\n\n      if (_this.state.muted) {\n        return;\n      }\n\n      _this.setAudioInputEnabled(false);\n\n      _this.state.muted = true;\n\n      _this.realtimeUpdateVolumeIndicator(_this.state.localAttendeeId, null, null, null, _this.state.localExternalUserId);\n\n      try {\n        for (var _b = __values(_this.state.muteAndUnmuteLocalAudioCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var fn = _c.value;\n          fn(true);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnmuteLocalAudio = function () {\n    var _this = this;\n\n    var result = false;\n    this.wrap(function () {\n      var e_4, _a;\n\n      if (!_this.state.muted) {\n        result = true;\n        return;\n      }\n\n      if (!_this.state.canUnmute) {\n        result = false;\n        return;\n      }\n\n      _this.setAudioInputEnabled(true);\n\n      _this.state.muted = false;\n\n      _this.realtimeUpdateVolumeIndicator(_this.state.localAttendeeId, null, null, null, _this.state.localExternalUserId);\n\n      try {\n        for (var _b = __values(_this.state.muteAndUnmuteLocalAudioCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var fn = _c.value;\n          fn(false);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n\n      result = true;\n    });\n    return result;\n  };\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToMuteAndUnmuteLocalAudio = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.muteAndUnmuteLocalAudioCallbacks.push(callback);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeToMuteAndUnmuteLocalAudio = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      var index = _this.state.muteAndUnmuteLocalAudioCallbacks.indexOf(callback);\n\n      if (index !== -1) {\n        _this.state.muteAndUnmuteLocalAudioCallbacks.splice(index, 1);\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeIsLocalAudioMuted = function () {\n    var _this = this;\n\n    var result = false;\n    this.wrap(function () {\n      result = _this.state.muted;\n    });\n    return result;\n  }; // Volume Indicators\n\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToVolumeIndicator = function (attendeeId, callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      if (!_this.state.volumeIndicatorCallbacks.hasOwnProperty(attendeeId)) {\n        _this.state.volumeIndicatorCallbacks[attendeeId] = [];\n      }\n\n      _this.state.volumeIndicatorCallbacks[attendeeId].push(callback);\n\n      _this.sendVolumeIndicatorChange(attendeeId, true, true, true, _this.state.attendeeIdToExternalUserId[attendeeId]);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeFromVolumeIndicator = function (attendeeId) {\n    var _this = this;\n\n    this.wrap(function () {\n      delete _this.state.volumeIndicatorCallbacks[attendeeId];\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUpdateVolumeIndicator = function (attendeeId, volume, muted, signalStrength, externalUserId) {\n    var _this = this;\n\n    this.wrap(function () {\n      muted = _this.applyLocalMuteOverride(attendeeId, muted);\n\n      var state = _this.getVolumeIndicatorState(attendeeId);\n\n      var volumeUpdated = false;\n      var mutedUpdated = false;\n      var signalStrengthUpdated = false;\n\n      if (muted !== null) {\n        if (state.muted !== muted) {\n          state.muted = muted;\n          mutedUpdated = true;\n\n          if (state.muted && state.volume !== 0.0) {\n            state.volume = 0.0;\n            volumeUpdated = true;\n          }\n        }\n      }\n\n      if (!state.muted && volume !== null) {\n        if (state.volume !== volume) {\n          state.volume = volume;\n          volumeUpdated = true;\n        }\n\n        if (state.muted === null) {\n          state.muted = false;\n          mutedUpdated = true;\n        }\n      }\n\n      if (signalStrength !== null) {\n        if (state.signalStrength !== signalStrength) {\n          state.signalStrength = signalStrength;\n          signalStrengthUpdated = true;\n        }\n      }\n\n      _this.sendVolumeIndicatorChange(attendeeId, volumeUpdated, mutedUpdated, signalStrengthUpdated, externalUserId);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToLocalSignalStrengthChange = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.localSignalStrengthChangeCallbacks.push(callback);\n\n      if (_this.state.localAttendeeId === null) {\n        return;\n      }\n\n      _this.sendLocalSignalStrengthChange(_this.state.localAttendeeId, true);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeToLocalSignalStrengthChange = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      var index = _this.state.localSignalStrengthChangeCallbacks.indexOf(callback);\n\n      if (index !== -1) {\n        _this.state.localSignalStrengthChangeCallbacks.splice(index, 1);\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToSendDataMessage = function ( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.sendDataMessageCallbacks.push(callback);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeFromSendDataMessage = function ( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      var index = _this.state.sendDataMessageCallbacks.indexOf(callback);\n\n      if (index !== -1) {\n        _this.state.sendDataMessageCallbacks.splice(index, 1);\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSendDataMessage = function (topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any\n  lifetimeMs) {\n    var _this = this;\n\n    this.wrap(function () {\n      var e_5, _a;\n\n      try {\n        for (var _b = __values(_this.state.sendDataMessageCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var fn = _c.value;\n          fn(topic, data, lifetimeMs);\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToReceiveDataMessage = function (topic, callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      if (_this.state.receiveDataMessageCallbacks.has(topic)) {\n        _this.state.receiveDataMessageCallbacks.get(topic).push(callback);\n      } else {\n        _this.state.receiveDataMessageCallbacks.set(topic, [callback]);\n      }\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeFromReceiveDataMessage = function (topic) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.receiveDataMessageCallbacks.delete(topic);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeReceiveDataMessage = function (dataMessage) {\n    var _this = this;\n\n    this.wrap(function () {\n      var e_6, _a;\n\n      if (_this.state.receiveDataMessageCallbacks.has(dataMessage.topic)) {\n        try {\n          for (var _b = __values(_this.state.receiveDataMessageCallbacks.get(dataMessage.topic)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var fn = _c.value;\n            fn(dataMessage);\n          }\n        } catch (e_6_1) {\n          e_6 = {\n            error: e_6_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_6) throw e_6.error;\n          }\n        }\n      }\n    });\n  }; // Error Handling\n\n\n  DefaultRealtimeController.prototype.realtimeSubscribeToFatalError = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      _this.state.fatalErrorCallbacks.push(callback);\n    });\n  };\n\n  DefaultRealtimeController.prototype.realtimeUnsubscribeToFatalError = function (callback) {\n    var _this = this;\n\n    this.wrap(function () {\n      var index = _this.state.fatalErrorCallbacks.indexOf(callback);\n\n      if (index !== -1) {\n        _this.state.fatalErrorCallbacks.splice(index, 1);\n      }\n    });\n  }; // Internals\n\n\n  DefaultRealtimeController.prototype.setAudioInputEnabled = function (enabled) {\n    var e_7, _a;\n\n    if (!this.state.audioInput) {\n      return;\n    }\n\n    try {\n      for (var _b = __values(this.state.audioInput.getTracks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var track = _c.value;\n\n        if (track.enabled === enabled) {\n          continue;\n        }\n\n        track.enabled = enabled;\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n  };\n\n  DefaultRealtimeController.prototype.applyLocalMuteOverride = function (attendeeIdRemote, mutedRemote) {\n    var attendeeIdLocal = this.state.localAttendeeId;\n    var mutedLocal = this.state.muted;\n\n    if (attendeeIdRemote !== attendeeIdLocal) {\n      return mutedRemote;\n    }\n\n    if (this.state.audioInput === null) {\n      return mutedRemote;\n    }\n\n    return mutedLocal;\n  };\n\n  DefaultRealtimeController.prototype.sendVolumeIndicatorChange = function (attendeeId, volumeUpdated, mutedUpdated, signalStrengthUpdated, externalUserId) {\n    var e_8, _a;\n\n    this.sendLocalSignalStrengthChange(attendeeId, signalStrengthUpdated);\n\n    if (!this.state.volumeIndicatorCallbacks.hasOwnProperty(attendeeId)) {\n      return;\n    }\n\n    var state = this.getVolumeIndicatorState(attendeeId);\n    var updateState = new RealtimeVolumeIndicator_1.default();\n\n    if (volumeUpdated) {\n      updateState.volume = state.volume;\n    }\n\n    if (mutedUpdated) {\n      updateState.muted = state.muted;\n    }\n\n    if (signalStrengthUpdated) {\n      updateState.signalStrength = state.signalStrength;\n    }\n\n    if (this.stateIsEmpty(updateState)) {\n      return;\n    }\n\n    try {\n      for (var _b = __values(this.state.volumeIndicatorCallbacks[attendeeId]), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var fn = _c.value;\n        fn(attendeeId, updateState.volume, updateState.muted, updateState.signalStrength, externalUserId);\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n  };\n\n  DefaultRealtimeController.prototype.sendLocalSignalStrengthChange = function (attendeeId, signalStrengthUpdated) {\n    var e_9, _a;\n\n    if (!signalStrengthUpdated) {\n      return;\n    }\n\n    if (attendeeId !== this.state.localAttendeeId) {\n      return;\n    }\n\n    var state = this.getVolumeIndicatorState(attendeeId);\n    var signalStrength = state.signalStrength;\n\n    if (signalStrength === null) {\n      return;\n    }\n\n    try {\n      for (var _b = __values(this.state.localSignalStrengthChangeCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var fn = _c.value;\n        fn(signalStrength);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n  };\n\n  DefaultRealtimeController.prototype.getVolumeIndicatorState = function (id) {\n    if (!this.state.volumeIndicatorState.hasOwnProperty(id)) {\n      this.state.volumeIndicatorState[id] = new RealtimeVolumeIndicator_1.default();\n    }\n\n    return this.state.volumeIndicatorState[id];\n  };\n\n  DefaultRealtimeController.prototype.stateIsEmpty = function (state) {\n    return state.volume === null && state.muted === null && state.signalStrength === null;\n  };\n\n  DefaultRealtimeController.prototype.wrap = function (fn) {\n    var e_10, _a;\n\n    try {\n      fn();\n    } catch (error) {\n      try {\n        try {\n          // 1) try the fatal error callbacks so that the issue is reported in\n          //    logs and to give the handler a chance to clean up and reset.\n          for (var _b = __values(this.state.fatalErrorCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var fn_1 = _c.value;\n            fn_1(error);\n          }\n        } catch (e_10_1) {\n          e_10 = {\n            error: e_10_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_10) throw e_10.error;\n          }\n        }\n      } catch (eventError) {\n        try {\n          // 2) if the error event fails, fall back to console.error so that\n          //    it at least prints out to the console before moving on.\n          console.error(error);\n          console.error(eventError);\n        } catch (consoleError) {// 3) if all else fails, swallow the error and give up to guarantee\n          //    that the API call returns cleanly.\n        }\n      }\n    }\n  };\n\n  return DefaultRealtimeController;\n}();\n\nexports.default = DefaultRealtimeController;","map":{"version":3,"sources":["../../src/realtimecontroller/DefaultRealtimeController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RealtimeState_1 = require(\"./RealtimeState\");\nvar RealtimeVolumeIndicator_1 = require(\"./RealtimeVolumeIndicator\");\n/**\n * [[DefaultRealtimeController]] is written to adhere to the following tenets to\n * make privacy and performance bugs significantly less likely.\n *\n * 1. Any call to the object is guaranteed to succeed from the caller's\n *    perspective to the maximum extent that this can be ensured. However, all\n *    failures of the object are reported as fatal errors. For example, if local\n *    mute fails, then that is a privacy issue and we must tear down the\n *    connection and try starting over.\n *\n * 2. State is owned by the object and is considered authoritative at all times.\n *    For example, if [[realtimeIsLocalAudioMuted]] is true then the user *is*\n *    muted.\n *\n * 3. Callbacks are fired synchronously and do their work synchronously. Any\n *    unnecessary asynchronous implementation only invites latency and\n *    increases the surface error for potential errors.\n *\n * 4. Mutation only occurs when state changes. All state-changing functions are\n *    idempotent.\n *\n * 5. Every conditional branch gets its own if statement and test coverage is\n *    100% for this object.\n *\n * 6. Function parameters and returns use primitives only (no classes or enums).\n *    This minimizes the number of dependencies that consumers have to take on\n *    and allows the object to be more easily wrapped. Values are normalized\n *    where possible.\n *\n * 7. The object takes no other non-realtime dependencies.\n *\n * 8. Interface functions begin with `realtime` to make boundaries between the\n *    RealtimeController interface and the UI or business logic explicit and\n *    auditable.\n *\n * 9. Local state overrides remote state but not vice-versa. For example, if\n *    locally muted with an active audio input and a remote state indicates the\n *    same user is unmuted because the muted state has not yet propagated, then\n *    the volume indicator update for the user would show the remote mute state\n *    as muted. However, if locally muted without an active audio input and a\n *    remote state indicates the user is unmuted (since they are dialed in), the\n *    remote state persists but does not override the local state so\n *    [[realtimeIsLocalAudioMuted]] still returns true.\n */\nvar DefaultRealtimeController = /** @class */ (function () {\n    function DefaultRealtimeController() {\n        // Attendee Id\n        this.state = new RealtimeState_1.default();\n    }\n    DefaultRealtimeController.prototype.realtimeSetLocalAttendeeId = function (attendeeId, externalUserId) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.localAttendeeId = attendeeId;\n            _this.state.localExternalUserId = externalUserId;\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSetAttendeeIdPresence = function (attendeeId, present, externalUserId, dropped, posInFrame) {\n        var _this = this;\n        this.wrap(function () {\n            var e_1, _a;\n            if (present) {\n                _this.state.attendeeIdToExternalUserId[attendeeId] = externalUserId;\n            }\n            try {\n                for (var _b = __values(_this.state.attendeeIdChangesCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var fn = _c.value;\n                    fn(attendeeId, present, externalUserId, dropped, posInFrame);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSubscribeToAttendeeIdPresence = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.attendeeIdChangesCallbacks.push(callback);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeToAttendeeIdPresence = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            var index = _this.state.attendeeIdChangesCallbacks.indexOf(callback);\n            if (index !== -1) {\n                _this.state.attendeeIdChangesCallbacks.splice(index, 1);\n            }\n        });\n    };\n    // Audio Input\n    DefaultRealtimeController.prototype.realtimeSetLocalAudioInput = function (audioInput) {\n        var _this = this;\n        this.wrap(function () {\n            if (_this.state.audioInput === audioInput) {\n                return;\n            }\n            _this.setAudioInputEnabled(false);\n            _this.state.audioInput = audioInput;\n            _this.setAudioInputEnabled(!_this.state.muted);\n        });\n    };\n    // Muting\n    DefaultRealtimeController.prototype.realtimeSetCanUnmuteLocalAudio = function (canUnmute) {\n        var _this = this;\n        this.wrap(function () {\n            var e_2, _a;\n            if (_this.state.canUnmute === canUnmute) {\n                return;\n            }\n            _this.state.canUnmute = canUnmute;\n            try {\n                for (var _b = __values(_this.state.setCanUnmuteLocalAudioCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var fn = _c.value;\n                    fn(canUnmute);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSubscribeToSetCanUnmuteLocalAudio = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.setCanUnmuteLocalAudioCallbacks.push(callback);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeToSetCanUnmuteLocalAudio = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            var index = _this.state.setCanUnmuteLocalAudioCallbacks.indexOf(callback);\n            if (index !== -1) {\n                _this.state.setCanUnmuteLocalAudioCallbacks.splice(index, 1);\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeCanUnmuteLocalAudio = function () {\n        var _this = this;\n        var result = false;\n        this.wrap(function () {\n            result = _this.state.canUnmute;\n        });\n        return result;\n    };\n    DefaultRealtimeController.prototype.realtimeMuteLocalAudio = function () {\n        var _this = this;\n        this.wrap(function () {\n            var e_3, _a;\n            if (_this.state.muted) {\n                return;\n            }\n            _this.setAudioInputEnabled(false);\n            _this.state.muted = true;\n            _this.realtimeUpdateVolumeIndicator(_this.state.localAttendeeId, null, null, null, _this.state.localExternalUserId);\n            try {\n                for (var _b = __values(_this.state.muteAndUnmuteLocalAudioCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var fn = _c.value;\n                    fn(true);\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnmuteLocalAudio = function () {\n        var _this = this;\n        var result = false;\n        this.wrap(function () {\n            var e_4, _a;\n            if (!_this.state.muted) {\n                result = true;\n                return;\n            }\n            if (!_this.state.canUnmute) {\n                result = false;\n                return;\n            }\n            _this.setAudioInputEnabled(true);\n            _this.state.muted = false;\n            _this.realtimeUpdateVolumeIndicator(_this.state.localAttendeeId, null, null, null, _this.state.localExternalUserId);\n            try {\n                for (var _b = __values(_this.state.muteAndUnmuteLocalAudioCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var fn = _c.value;\n                    fn(false);\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            result = true;\n        });\n        return result;\n    };\n    DefaultRealtimeController.prototype.realtimeSubscribeToMuteAndUnmuteLocalAudio = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.muteAndUnmuteLocalAudioCallbacks.push(callback);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeToMuteAndUnmuteLocalAudio = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            var index = _this.state.muteAndUnmuteLocalAudioCallbacks.indexOf(callback);\n            if (index !== -1) {\n                _this.state.muteAndUnmuteLocalAudioCallbacks.splice(index, 1);\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeIsLocalAudioMuted = function () {\n        var _this = this;\n        var result = false;\n        this.wrap(function () {\n            result = _this.state.muted;\n        });\n        return result;\n    };\n    // Volume Indicators\n    DefaultRealtimeController.prototype.realtimeSubscribeToVolumeIndicator = function (attendeeId, callback) {\n        var _this = this;\n        this.wrap(function () {\n            if (!_this.state.volumeIndicatorCallbacks.hasOwnProperty(attendeeId)) {\n                _this.state.volumeIndicatorCallbacks[attendeeId] = [];\n            }\n            _this.state.volumeIndicatorCallbacks[attendeeId].push(callback);\n            _this.sendVolumeIndicatorChange(attendeeId, true, true, true, _this.state.attendeeIdToExternalUserId[attendeeId]);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeFromVolumeIndicator = function (attendeeId) {\n        var _this = this;\n        this.wrap(function () {\n            delete _this.state.volumeIndicatorCallbacks[attendeeId];\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUpdateVolumeIndicator = function (attendeeId, volume, muted, signalStrength, externalUserId) {\n        var _this = this;\n        this.wrap(function () {\n            muted = _this.applyLocalMuteOverride(attendeeId, muted);\n            var state = _this.getVolumeIndicatorState(attendeeId);\n            var volumeUpdated = false;\n            var mutedUpdated = false;\n            var signalStrengthUpdated = false;\n            if (muted !== null) {\n                if (state.muted !== muted) {\n                    state.muted = muted;\n                    mutedUpdated = true;\n                    if (state.muted && state.volume !== 0.0) {\n                        state.volume = 0.0;\n                        volumeUpdated = true;\n                    }\n                }\n            }\n            if (!state.muted && volume !== null) {\n                if (state.volume !== volume) {\n                    state.volume = volume;\n                    volumeUpdated = true;\n                }\n                if (state.muted === null) {\n                    state.muted = false;\n                    mutedUpdated = true;\n                }\n            }\n            if (signalStrength !== null) {\n                if (state.signalStrength !== signalStrength) {\n                    state.signalStrength = signalStrength;\n                    signalStrengthUpdated = true;\n                }\n            }\n            _this.sendVolumeIndicatorChange(attendeeId, volumeUpdated, mutedUpdated, signalStrengthUpdated, externalUserId);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSubscribeToLocalSignalStrengthChange = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.localSignalStrengthChangeCallbacks.push(callback);\n            if (_this.state.localAttendeeId === null) {\n                return;\n            }\n            _this.sendLocalSignalStrengthChange(_this.state.localAttendeeId, true);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeToLocalSignalStrengthChange = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            var index = _this.state.localSignalStrengthChangeCallbacks.indexOf(callback);\n            if (index !== -1) {\n                _this.state.localSignalStrengthChangeCallbacks.splice(index, 1);\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSubscribeToSendDataMessage = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.sendDataMessageCallbacks.push(callback);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeFromSendDataMessage = function (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        var _this = this;\n        this.wrap(function () {\n            var index = _this.state.sendDataMessageCallbacks.indexOf(callback);\n            if (index !== -1) {\n                _this.state.sendDataMessageCallbacks.splice(index, 1);\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSendDataMessage = function (topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any\n    lifetimeMs) {\n        var _this = this;\n        this.wrap(function () {\n            var e_5, _a;\n            try {\n                for (var _b = __values(_this.state.sendDataMessageCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var fn = _c.value;\n                    fn(topic, data, lifetimeMs);\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeSubscribeToReceiveDataMessage = function (topic, callback) {\n        var _this = this;\n        this.wrap(function () {\n            if (_this.state.receiveDataMessageCallbacks.has(topic)) {\n                _this.state.receiveDataMessageCallbacks.get(topic).push(callback);\n            }\n            else {\n                _this.state.receiveDataMessageCallbacks.set(topic, [callback]);\n            }\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeFromReceiveDataMessage = function (topic) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.receiveDataMessageCallbacks.delete(topic);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeReceiveDataMessage = function (dataMessage) {\n        var _this = this;\n        this.wrap(function () {\n            var e_6, _a;\n            if (_this.state.receiveDataMessageCallbacks.has(dataMessage.topic)) {\n                try {\n                    for (var _b = __values(_this.state.receiveDataMessageCallbacks.get(dataMessage.topic)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var fn = _c.value;\n                        fn(dataMessage);\n                    }\n                }\n                catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_6) throw e_6.error; }\n                }\n            }\n        });\n    };\n    // Error Handling\n    DefaultRealtimeController.prototype.realtimeSubscribeToFatalError = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            _this.state.fatalErrorCallbacks.push(callback);\n        });\n    };\n    DefaultRealtimeController.prototype.realtimeUnsubscribeToFatalError = function (callback) {\n        var _this = this;\n        this.wrap(function () {\n            var index = _this.state.fatalErrorCallbacks.indexOf(callback);\n            if (index !== -1) {\n                _this.state.fatalErrorCallbacks.splice(index, 1);\n            }\n        });\n    };\n    // Internals\n    DefaultRealtimeController.prototype.setAudioInputEnabled = function (enabled) {\n        var e_7, _a;\n        if (!this.state.audioInput) {\n            return;\n        }\n        try {\n            for (var _b = __values(this.state.audioInput.getTracks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var track = _c.value;\n                if (track.enabled === enabled) {\n                    continue;\n                }\n                track.enabled = enabled;\n            }\n        }\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_7) throw e_7.error; }\n        }\n    };\n    DefaultRealtimeController.prototype.applyLocalMuteOverride = function (attendeeIdRemote, mutedRemote) {\n        var attendeeIdLocal = this.state.localAttendeeId;\n        var mutedLocal = this.state.muted;\n        if (attendeeIdRemote !== attendeeIdLocal) {\n            return mutedRemote;\n        }\n        if (this.state.audioInput === null) {\n            return mutedRemote;\n        }\n        return mutedLocal;\n    };\n    DefaultRealtimeController.prototype.sendVolumeIndicatorChange = function (attendeeId, volumeUpdated, mutedUpdated, signalStrengthUpdated, externalUserId) {\n        var e_8, _a;\n        this.sendLocalSignalStrengthChange(attendeeId, signalStrengthUpdated);\n        if (!this.state.volumeIndicatorCallbacks.hasOwnProperty(attendeeId)) {\n            return;\n        }\n        var state = this.getVolumeIndicatorState(attendeeId);\n        var updateState = new RealtimeVolumeIndicator_1.default();\n        if (volumeUpdated) {\n            updateState.volume = state.volume;\n        }\n        if (mutedUpdated) {\n            updateState.muted = state.muted;\n        }\n        if (signalStrengthUpdated) {\n            updateState.signalStrength = state.signalStrength;\n        }\n        if (this.stateIsEmpty(updateState)) {\n            return;\n        }\n        try {\n            for (var _b = __values(this.state.volumeIndicatorCallbacks[attendeeId]), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var fn = _c.value;\n                fn(attendeeId, updateState.volume, updateState.muted, updateState.signalStrength, externalUserId);\n            }\n        }\n        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_8) throw e_8.error; }\n        }\n    };\n    DefaultRealtimeController.prototype.sendLocalSignalStrengthChange = function (attendeeId, signalStrengthUpdated) {\n        var e_9, _a;\n        if (!signalStrengthUpdated) {\n            return;\n        }\n        if (attendeeId !== this.state.localAttendeeId) {\n            return;\n        }\n        var state = this.getVolumeIndicatorState(attendeeId);\n        var signalStrength = state.signalStrength;\n        if (signalStrength === null) {\n            return;\n        }\n        try {\n            for (var _b = __values(this.state.localSignalStrengthChangeCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var fn = _c.value;\n                fn(signalStrength);\n            }\n        }\n        catch (e_9_1) { e_9 = { error: e_9_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_9) throw e_9.error; }\n        }\n    };\n    DefaultRealtimeController.prototype.getVolumeIndicatorState = function (id) {\n        if (!this.state.volumeIndicatorState.hasOwnProperty(id)) {\n            this.state.volumeIndicatorState[id] = new RealtimeVolumeIndicator_1.default();\n        }\n        return this.state.volumeIndicatorState[id];\n    };\n    DefaultRealtimeController.prototype.stateIsEmpty = function (state) {\n        return state.volume === null && state.muted === null && state.signalStrength === null;\n    };\n    DefaultRealtimeController.prototype.wrap = function (fn) {\n        var e_10, _a;\n        try {\n            fn();\n        }\n        catch (error) {\n            try {\n                try {\n                    // 1) try the fatal error callbacks so that the issue is reported in\n                    //    logs and to give the handler a chance to clean up and reset.\n                    for (var _b = __values(this.state.fatalErrorCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var fn_1 = _c.value;\n                        fn_1(error);\n                    }\n                }\n                catch (e_10_1) { e_10 = { error: e_10_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_10) throw e_10.error; }\n                }\n            }\n            catch (eventError) {\n                try {\n                    // 2) if the error event fails, fall back to console.error so that\n                    //    it at least prints out to the console before moving on.\n                    console.error(error);\n                    console.error(eventError);\n                }\n                catch (consoleError) {\n                    // 3) if all else fails, swallow the error and give up to guarantee\n                    //    that the API call returns cleanly.\n                }\n            }\n        }\n    };\n    return DefaultRealtimeController;\n}());\nexports.default = DefaultRealtimeController;\n//# sourceMappingURL=DefaultRealtimeController.js.map"]},"metadata":{},"sourceType":"script"}