{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nvar DefaultSDP_1 = require(\"../sdp/DefaultSDP\");\n\nvar BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[FinishGatheringICECandidatesTask]] add ice-candidate event handler on peer connection to\n * collect ice candidates and wait for peer connection ice gathering state to complete\n */\n\n\nvar FinishGatheringICECandidatesTask =\n/** @class */\nfunction (_super) {\n  __extends(FinishGatheringICECandidatesTask, _super);\n\n  function FinishGatheringICECandidatesTask(context, chromeVpnTimeoutMs) {\n    if (chromeVpnTimeoutMs === void 0) {\n      chromeVpnTimeoutMs = FinishGatheringICECandidatesTask.CHROME_VPN_TIMEOUT_MS;\n    }\n\n    var _this = _super.call(this, context.logger) || this;\n\n    _this.context = context;\n    _this.chromeVpnTimeoutMs = chromeVpnTimeoutMs;\n    _this.taskName = 'FinishGatheringICECandidatesTask';\n    return _this;\n  }\n\n  FinishGatheringICECandidatesTask.prototype.removeEventListener = function () {\n    if (this.context.peer) {\n      this.context.peer.removeEventListener('icecandidate', this.context.iceCandidateHandler);\n\n      if (!this.context.turnCredentials) {\n        this.context.peer.removeEventListener('icegatheringstatechange', this.context.iceGatheringStateEventHandler);\n      }\n    }\n  };\n\n  FinishGatheringICECandidatesTask.prototype.cancel = function () {\n    var error = new Error(\"canceling \" + this.name()); // TODO: Remove when the Chrome VPN reconnect bug is fixed.\n    // In Chrome, SDK may fail to establish TURN session after VPN reconnect.\n    // https://bugs.chromium.org/p/webrtc/issues/detail?id=9097\n\n    if (this.context.browserBehavior.requiresIceCandidateGatheringTimeoutWorkaround()) {\n      if (this.chromeVpnTimeoutMs < this.context.meetingSessionConfiguration.connectionTimeoutMs) {\n        var duration = Date.now() - this.startTimestampMs;\n\n        if (duration > this.chromeVpnTimeoutMs) {\n          error = new Error(\"canceling \" + this.name() + \" due to the meeting status code: \" + MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround);\n        }\n      }\n    }\n\n    this.cancelPromise && this.cancelPromise(error);\n  };\n\n  FinishGatheringICECandidatesTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.context.peer) {\n              this.logAndThrow(\"session does not have peer connection; bypass ice gathering\");\n            }\n\n            if (this.context.browserBehavior.requiresCheckForSdpConnectionAttributes()) {\n              if (new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidatesForAllMLines()) {\n                this.context.logger.info(\"ice gathering already complete; bypass gathering, current local description \" + this.context.peer.localDescription.sdp);\n                return [2\n                /*return*/\n                ];\n              }\n            } else {\n              this.context.logger.info(\"iOS device does not require checking for connection attributes in SDP, current local description \" + this.context.peer.localDescription.sdp);\n            }\n            /*\n             * To bypass waiting for events, it is required that \"icegatheringstate\" to be complete and sdp to have candidate\n             * For Firefox, it takes long for iceGatheringState === 'complete'\n             * Ref: https://github.com/aws/amazon-chime-sdk-js/issues/609\n             */\n\n\n            if ((this.context.browserBehavior.hasFirefoxWebRTC() || this.context.peer.iceGatheringState === 'complete') && new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidates()) {\n              this.context.logger.info('ice gathering state is complete and candidates are in SDP; bypass gathering');\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              _this.cancelPromise = function (error) {\n                _this.removeEventListener();\n\n                reject(error);\n              };\n\n              if (!_this.context.turnCredentials) {\n                // if one day, we found a case where a FinishGatheringICECandidate did not resolve but ice gathering state is complete and SDP answer has ice candidates\n                // we may need to enable this\n                _this.context.iceGatheringStateEventHandler = function () {\n                  if (_this.context.peer.iceGatheringState === 'complete') {\n                    _this.removeEventListener();\n\n                    resolve();\n                    return;\n                  }\n                };\n\n                _this.context.peer.addEventListener('icegatheringstatechange', _this.context.iceGatheringStateEventHandler);\n              }\n\n              _this.context.iceCandidateHandler = function (event) {\n                _this.context.logger.info(\"ice candidate: \" + (event.candidate ? event.candidate.candidate : '(null)') + \" state: \" + _this.context.peer.iceGatheringState); // Ice candidate arrives, do not need to wait anymore.\n                // https://webrtcglossary.com/trickle-ice/\n\n\n                if (event.candidate) {\n                  if (DefaultSDP_1.default.isRTPCandidate(event.candidate.candidate)) {\n                    _this.context.iceCandidates.push(event.candidate);\n                  } // Could there be a case the candidate is not written to SDP ?\n\n\n                  if (_this.context.turnCredentials && _this.context.iceCandidates.length >= 1) {\n                    _this.context.logger.info('gathered at least one relay candidate');\n\n                    _this.removeEventListener();\n\n                    resolve();\n                    return;\n                  }\n                } // Ice candidate gathering is complete, additional barrier to make sure sdp contain an ice candidate.\n                // TODO: Could there be a race where iceGatheringState is flipped after this task is run ? This could only be handled if ice state is monitored persistently.\n\n\n                if (_this.context.peer.iceGatheringState === 'complete') {\n                  _this.context.logger.info('done gathering ice candidates');\n\n                  _this.removeEventListener();\n\n                  if (!new DefaultSDP_1.default(_this.context.peer.localDescription.sdp).hasCandidates() || _this.context.iceCandidates.length === 0) {\n                    reject(new Error('no ice candidates were gathered'));\n                  } else {\n                    resolve();\n                  }\n                }\n              }; // SDK does not catch candidate itself and send to sever. Rather, WebRTC handles candidate events and writes candidate to SDP.\n\n\n              _this.context.peer.addEventListener('icecandidate', _this.context.iceCandidateHandler);\n\n              _this.startTimestampMs = Date.now();\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  FinishGatheringICECandidatesTask.CHROME_VPN_TIMEOUT_MS = 5000;\n  return FinishGatheringICECandidatesTask;\n}(BaseTask_1.default);\n\nexports.default = FinishGatheringICECandidatesTask;","map":{"version":3,"sources":["../../src/task/FinishGatheringICECandidatesTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nvar DefaultSDP_1 = require(\"../sdp/DefaultSDP\");\nvar BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[FinishGatheringICECandidatesTask]] add ice-candidate event handler on peer connection to\n * collect ice candidates and wait for peer connection ice gathering state to complete\n */\nvar FinishGatheringICECandidatesTask = /** @class */ (function (_super) {\n    __extends(FinishGatheringICECandidatesTask, _super);\n    function FinishGatheringICECandidatesTask(context, chromeVpnTimeoutMs) {\n        if (chromeVpnTimeoutMs === void 0) { chromeVpnTimeoutMs = FinishGatheringICECandidatesTask.CHROME_VPN_TIMEOUT_MS; }\n        var _this = _super.call(this, context.logger) || this;\n        _this.context = context;\n        _this.chromeVpnTimeoutMs = chromeVpnTimeoutMs;\n        _this.taskName = 'FinishGatheringICECandidatesTask';\n        return _this;\n    }\n    FinishGatheringICECandidatesTask.prototype.removeEventListener = function () {\n        if (this.context.peer) {\n            this.context.peer.removeEventListener('icecandidate', this.context.iceCandidateHandler);\n            if (!this.context.turnCredentials) {\n                this.context.peer.removeEventListener('icegatheringstatechange', this.context.iceGatheringStateEventHandler);\n            }\n        }\n    };\n    FinishGatheringICECandidatesTask.prototype.cancel = function () {\n        var error = new Error(\"canceling \" + this.name());\n        // TODO: Remove when the Chrome VPN reconnect bug is fixed.\n        // In Chrome, SDK may fail to establish TURN session after VPN reconnect.\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=9097\n        if (this.context.browserBehavior.requiresIceCandidateGatheringTimeoutWorkaround()) {\n            if (this.chromeVpnTimeoutMs < this.context.meetingSessionConfiguration.connectionTimeoutMs) {\n                var duration = Date.now() - this.startTimestampMs;\n                if (duration > this.chromeVpnTimeoutMs) {\n                    error = new Error(\"canceling \" + this.name() + \" due to the meeting status code: \" + MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround);\n                }\n            }\n        }\n        this.cancelPromise && this.cancelPromise(error);\n    };\n    FinishGatheringICECandidatesTask.prototype.run = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.context.peer) {\n                            this.logAndThrow(\"session does not have peer connection; bypass ice gathering\");\n                        }\n                        if (this.context.browserBehavior.requiresCheckForSdpConnectionAttributes()) {\n                            if (new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidatesForAllMLines()) {\n                                this.context.logger.info(\"ice gathering already complete; bypass gathering, current local description \" + this.context.peer.localDescription.sdp);\n                                return [2 /*return*/];\n                            }\n                        }\n                        else {\n                            this.context.logger.info(\"iOS device does not require checking for connection attributes in SDP, current local description \" + this.context.peer.localDescription.sdp);\n                        }\n                        /*\n                         * To bypass waiting for events, it is required that \"icegatheringstate\" to be complete and sdp to have candidate\n                         * For Firefox, it takes long for iceGatheringState === 'complete'\n                         * Ref: https://github.com/aws/amazon-chime-sdk-js/issues/609\n                         */\n                        if ((this.context.browserBehavior.hasFirefoxWebRTC() ||\n                            this.context.peer.iceGatheringState === 'complete') &&\n                            new DefaultSDP_1.default(this.context.peer.localDescription.sdp).hasCandidates()) {\n                            this.context.logger.info('ice gathering state is complete and candidates are in SDP; bypass gathering');\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                _this.cancelPromise = function (error) {\n                                    _this.removeEventListener();\n                                    reject(error);\n                                };\n                                if (!_this.context.turnCredentials) {\n                                    // if one day, we found a case where a FinishGatheringICECandidate did not resolve but ice gathering state is complete and SDP answer has ice candidates\n                                    // we may need to enable this\n                                    _this.context.iceGatheringStateEventHandler = function () {\n                                        if (_this.context.peer.iceGatheringState === 'complete') {\n                                            _this.removeEventListener();\n                                            resolve();\n                                            return;\n                                        }\n                                    };\n                                    _this.context.peer.addEventListener('icegatheringstatechange', _this.context.iceGatheringStateEventHandler);\n                                }\n                                _this.context.iceCandidateHandler = function (event) {\n                                    _this.context.logger.info(\"ice candidate: \" + (event.candidate ? event.candidate.candidate : '(null)') + \" state: \" + _this.context.peer.iceGatheringState);\n                                    // Ice candidate arrives, do not need to wait anymore.\n                                    // https://webrtcglossary.com/trickle-ice/\n                                    if (event.candidate) {\n                                        if (DefaultSDP_1.default.isRTPCandidate(event.candidate.candidate)) {\n                                            _this.context.iceCandidates.push(event.candidate);\n                                        }\n                                        // Could there be a case the candidate is not written to SDP ?\n                                        if (_this.context.turnCredentials && _this.context.iceCandidates.length >= 1) {\n                                            _this.context.logger.info('gathered at least one relay candidate');\n                                            _this.removeEventListener();\n                                            resolve();\n                                            return;\n                                        }\n                                    }\n                                    // Ice candidate gathering is complete, additional barrier to make sure sdp contain an ice candidate.\n                                    // TODO: Could there be a race where iceGatheringState is flipped after this task is run ? This could only be handled if ice state is monitored persistently.\n                                    if (_this.context.peer.iceGatheringState === 'complete') {\n                                        _this.context.logger.info('done gathering ice candidates');\n                                        _this.removeEventListener();\n                                        if (!new DefaultSDP_1.default(_this.context.peer.localDescription.sdp).hasCandidates() ||\n                                            _this.context.iceCandidates.length === 0) {\n                                            reject(new Error('no ice candidates were gathered'));\n                                        }\n                                        else {\n                                            resolve();\n                                        }\n                                    }\n                                };\n                                // SDK does not catch candidate itself and send to sever. Rather, WebRTC handles candidate events and writes candidate to SDP.\n                                _this.context.peer.addEventListener('icecandidate', _this.context.iceCandidateHandler);\n                                _this.startTimestampMs = Date.now();\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    FinishGatheringICECandidatesTask.CHROME_VPN_TIMEOUT_MS = 5000;\n    return FinishGatheringICECandidatesTask;\n}(BaseTask_1.default));\nexports.default = FinishGatheringICECandidatesTask;\n//# sourceMappingURL=FinishGatheringICECandidatesTask.js.map"]},"metadata":{},"sourceType":"script"}