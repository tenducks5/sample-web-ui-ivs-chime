{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MediaRecordingEvent_1 = require(\"../mediarecording/MediaRecordingEvent\");\n\nvar ScreenSharingMessageFlag_1 = require(\"../screensharingmessage/ScreenSharingMessageFlag\");\n\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\n\nvar ScreenShareStreamingEvent_1 = require(\"./ScreenShareStreamingEvent\");\n\nvar ScreenShareStream =\n/** @class */\nfunction () {\n  function ScreenShareStream(mediaRecording) {\n    this.mediaRecording = mediaRecording;\n    this.listeners = new Map();\n  }\n\n  ScreenShareStream.prototype.key = function () {\n    return this.mediaRecording.key();\n  };\n\n  ScreenShareStream.prototype.start = function (timeSliceMs) {\n    var _this = this;\n\n    this.mediaRecording.addEventListener('dataavailable', function (event) {\n      _this.onDataAvailable(event);\n    });\n    this.mediaRecording.addEventListener(MediaRecordingEvent_1.default.EndedEvent, function () {\n      _this.dispatchEvent(new CustomEvent(ScreenShareStreamingEvent_1.default.EndedEvent));\n    });\n    var message = {\n      type: ScreenSharingMessageType_1.default.StreamStart,\n      flags: [ScreenSharingMessageFlag_1.default.Local],\n      data: new Uint8Array([])\n    };\n    this.dispatchEvent(this.newMessageEvent(message));\n    this.mediaRecording.start(timeSliceMs);\n  };\n\n  ScreenShareStream.prototype.stop = function () {\n    var _this = this;\n\n    return this.mediaRecording.stop().then(function () {\n      var message = {\n        type: ScreenSharingMessageType_1.default.StreamEnd,\n        flags: [ScreenSharingMessageFlag_1.default.Local],\n        data: new Uint8Array([])\n      };\n\n      _this.dispatchEvent(_this.newMessageEvent(message));\n    });\n  };\n\n  ScreenShareStream.prototype.pause = function () {\n    var _this = this;\n\n    return this.mediaRecording.pause().then(function () {\n      var message = {\n        type: ScreenSharingMessageType_1.default.StreamPause,\n        flags: [ScreenSharingMessageFlag_1.default.Local],\n        data: new Uint8Array([])\n      };\n\n      _this.dispatchEvent(_this.newMessageEvent(message));\n    });\n  };\n\n  ScreenShareStream.prototype.unpause = function () {\n    var _this = this;\n\n    return this.mediaRecording.unpause().then(function () {\n      var message = {\n        type: ScreenSharingMessageType_1.default.StreamUnpause,\n        flags: [ScreenSharingMessageFlag_1.default.Local],\n        data: new Uint8Array([])\n      };\n\n      _this.dispatchEvent(_this.newMessageEvent(message));\n    });\n  };\n\n  ScreenShareStream.prototype.addEventListener = function (type, listener) {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, new Set());\n    }\n\n    this.listeners.get(type).add(listener);\n  };\n\n  ScreenShareStream.prototype.dispatchEvent = function (event) {\n    if (this.listeners.has(event.type)) {\n      this.listeners.get(event.type).forEach(function (listener) {\n        listener(event);\n      });\n    }\n\n    return event.defaultPrevented;\n  };\n\n  ScreenShareStream.prototype.removeEventListener = function (type, listener) {\n    if (this.listeners.has(type)) {\n      this.listeners.get(type).delete(listener);\n    }\n  };\n\n  ScreenShareStream.prototype.onDataAvailable = function (event) {\n    if (event.data.size !== 0) {\n      var message = {\n        type: ScreenSharingMessageType_1.default.WebM,\n        flags: [ScreenSharingMessageFlag_1.default.Broadcast],\n        data: event.data\n      };\n      this.dispatchEvent(this.newMessageEvent(message));\n    }\n  };\n\n  ScreenShareStream.prototype.newMessageEvent = function (message) {\n    return new CustomEvent(ScreenShareStreamingEvent_1.default.MessageEvent, {\n      detail: message\n    });\n  };\n\n  return ScreenShareStream;\n}();\n\nexports.default = ScreenShareStream;","map":{"version":3,"sources":["../../src/screensharestreaming/ScreenShareStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MediaRecordingEvent_1 = require(\"../mediarecording/MediaRecordingEvent\");\nvar ScreenSharingMessageFlag_1 = require(\"../screensharingmessage/ScreenSharingMessageFlag\");\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\nvar ScreenShareStreamingEvent_1 = require(\"./ScreenShareStreamingEvent\");\nvar ScreenShareStream = /** @class */ (function () {\n    function ScreenShareStream(mediaRecording) {\n        this.mediaRecording = mediaRecording;\n        this.listeners = new Map();\n    }\n    ScreenShareStream.prototype.key = function () {\n        return this.mediaRecording.key();\n    };\n    ScreenShareStream.prototype.start = function (timeSliceMs) {\n        var _this = this;\n        this.mediaRecording.addEventListener('dataavailable', function (event) {\n            _this.onDataAvailable(event);\n        });\n        this.mediaRecording.addEventListener(MediaRecordingEvent_1.default.EndedEvent, function () {\n            _this.dispatchEvent(new CustomEvent(ScreenShareStreamingEvent_1.default.EndedEvent));\n        });\n        var message = {\n            type: ScreenSharingMessageType_1.default.StreamStart,\n            flags: [ScreenSharingMessageFlag_1.default.Local],\n            data: new Uint8Array([]),\n        };\n        this.dispatchEvent(this.newMessageEvent(message));\n        this.mediaRecording.start(timeSliceMs);\n    };\n    ScreenShareStream.prototype.stop = function () {\n        var _this = this;\n        return this.mediaRecording.stop().then(function () {\n            var message = {\n                type: ScreenSharingMessageType_1.default.StreamEnd,\n                flags: [ScreenSharingMessageFlag_1.default.Local],\n                data: new Uint8Array([]),\n            };\n            _this.dispatchEvent(_this.newMessageEvent(message));\n        });\n    };\n    ScreenShareStream.prototype.pause = function () {\n        var _this = this;\n        return this.mediaRecording.pause().then(function () {\n            var message = {\n                type: ScreenSharingMessageType_1.default.StreamPause,\n                flags: [ScreenSharingMessageFlag_1.default.Local],\n                data: new Uint8Array([]),\n            };\n            _this.dispatchEvent(_this.newMessageEvent(message));\n        });\n    };\n    ScreenShareStream.prototype.unpause = function () {\n        var _this = this;\n        return this.mediaRecording.unpause().then(function () {\n            var message = {\n                type: ScreenSharingMessageType_1.default.StreamUnpause,\n                flags: [ScreenSharingMessageFlag_1.default.Local],\n                data: new Uint8Array([]),\n            };\n            _this.dispatchEvent(_this.newMessageEvent(message));\n        });\n    };\n    ScreenShareStream.prototype.addEventListener = function (type, listener) {\n        if (!this.listeners.has(type)) {\n            this.listeners.set(type, new Set());\n        }\n        this.listeners.get(type).add(listener);\n    };\n    ScreenShareStream.prototype.dispatchEvent = function (event) {\n        if (this.listeners.has(event.type)) {\n            this.listeners.get(event.type).forEach(function (listener) {\n                listener(event);\n            });\n        }\n        return event.defaultPrevented;\n    };\n    ScreenShareStream.prototype.removeEventListener = function (type, listener) {\n        if (this.listeners.has(type)) {\n            this.listeners.get(type).delete(listener);\n        }\n    };\n    ScreenShareStream.prototype.onDataAvailable = function (event) {\n        if (event.data.size !== 0) {\n            var message = {\n                type: ScreenSharingMessageType_1.default.WebM,\n                flags: [ScreenSharingMessageFlag_1.default.Broadcast],\n                data: event.data,\n            };\n            this.dispatchEvent(this.newMessageEvent(message));\n        }\n    };\n    ScreenShareStream.prototype.newMessageEvent = function (message) {\n        return new CustomEvent(ScreenShareStreamingEvent_1.default.MessageEvent, {\n            detail: message,\n        });\n    };\n    return ScreenShareStream;\n}());\nexports.default = ScreenShareStream;\n//# sourceMappingURL=ScreenShareStream.js.map"]},"metadata":{},"sourceType":"script"}