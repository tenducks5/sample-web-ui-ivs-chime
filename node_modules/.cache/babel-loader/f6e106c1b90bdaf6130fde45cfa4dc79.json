{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DefaultActiveSpeakerPolicy =\n/** @class */\nfunction () {\n  /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.\n   *\n   * @param speakerWeight\n   * The number used to calculate new active speaker score for current attendee\n   * ```js\n   * Formula:\n   * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)\n   * ```\n   *\n   * @param cutoffThreshold\n   * The threshold number compared with updated active speaker score.\n   * If the updated active speaker score is less than this threshold value,\n   * the updated score is returned as 0, else the updated score is returned.\n   *\n   * @param silenceThreshold\n   * The threshold number compared with current received volume.\n   * While calculating the new active speaker score, if the current received\n   * volume is less than this threshold value, the current received volume is considered as 0,\n   * else 1.\n   *\n   * @param takeoverRate\n   * The number used to calculate other attendee's active speaker score, other than the current attendee.\n   * ```js\n   * Formula:\n   *  updatedOtherAttendeeActiveSpeakerScore = Math.max(\n   *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,\n   *    0\n   *  );\n   * ```\n   */\n  function DefaultActiveSpeakerPolicy(speakerWeight, cutoffThreshold, silenceThreshold, takeoverRate) {\n    if (speakerWeight === void 0) {\n      speakerWeight = 0.9;\n    }\n\n    if (cutoffThreshold === void 0) {\n      cutoffThreshold = 0.01;\n    }\n\n    if (silenceThreshold === void 0) {\n      silenceThreshold = 0.2;\n    }\n\n    if (takeoverRate === void 0) {\n      takeoverRate = 0.2;\n    }\n\n    this.speakerWeight = speakerWeight;\n    this.cutoffThreshold = cutoffThreshold;\n    this.silenceThreshold = silenceThreshold;\n    this.takeoverRate = takeoverRate;\n    /**\n     * The map of attendeeIds to their active speaker score values\n     */\n\n    this.volumes = {};\n  }\n\n  DefaultActiveSpeakerPolicy.prototype.calculateScore = function (attendeeId, volume, muted) {\n    if (muted || volume === null) {\n      volume = 0;\n    }\n\n    if (!this.volumes.hasOwnProperty(attendeeId)) {\n      this.volumes[attendeeId] = 0;\n    }\n\n    if (volume > this.silenceThreshold) {\n      volume = 1.0;\n    } else {\n      volume = 0.0;\n    }\n\n    var score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);\n    this.volumes[attendeeId] = score;\n\n    for (var otherAttendeeId in this.volumes) {\n      if (otherAttendeeId !== attendeeId) {\n        this.volumes[otherAttendeeId] = Math.max(this.volumes[otherAttendeeId] - this.takeoverRate * volume, 0);\n      }\n    }\n\n    if (score < this.cutoffThreshold) {\n      return 0;\n    }\n\n    return score;\n  };\n\n  DefaultActiveSpeakerPolicy.prototype.prioritizeVideoSendBandwidthForActiveSpeaker = function () {\n    return true;\n  };\n\n  return DefaultActiveSpeakerPolicy;\n}();\n\nexports.default = DefaultActiveSpeakerPolicy;","map":{"version":3,"sources":["../../src/activespeakerpolicy/DefaultActiveSpeakerPolicy.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAIA,IAAA,0BAAA;AAAA;AAAA,YAAA;AAME;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;AACH,WAAA,0BAAA,CACU,aADV,EAEU,eAFV,EAGU,gBAHV,EAIU,YAJV,EAI4B;AAHlB,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAA,GAAA;AAA2B;;AAC3B,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAA,IAAA;AAA8B;;AAC9B,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,GAAA;AAAsB;;AACtB,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,GAAA;AAAkB;;AAHlB,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AAvCV;;AAEG;;AACK,SAAA,OAAA,GAA4C,EAA5C;AAqCJ;;AAEJ,EAAA,0BAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAAmC,MAAnC,EAA0D,KAA1D,EAA+E;AAC7E,QAAI,KAAK,IAAI,MAAM,KAAK,IAAxB,EAA8B;AAC5B,MAAA,MAAM,GAAG,CAAT;AACD;;AACD,QAAI,CAAC,KAAK,OAAL,CAAa,cAAb,CAA4B,UAA5B,CAAL,EAA8C;AAC5C,WAAK,OAAL,CAAa,UAAb,IAA2B,CAA3B;AACD;;AACD,QAAI,MAAM,GAAG,KAAK,gBAAlB,EAAoC;AAClC,MAAA,MAAM,GAAG,GAAT;AACD,KAFD,MAEO;AACL,MAAA,MAAM,GAAG,GAAT;AACD;;AACD,QAAM,KAAK,GAAG,KAAK,OAAL,CAAa,UAAb,IAA2B,KAAK,aAAhC,GAAgD,MAAM,IAAI,IAAI,KAAK,aAAb,CAApE;AACA,SAAK,OAAL,CAAa,UAAb,IAA2B,KAA3B;;AACA,SAAK,IAAM,eAAX,IAA8B,KAAK,OAAnC,EAA4C;AAC1C,UAAI,eAAe,KAAK,UAAxB,EAAoC;AAClC,aAAK,OAAL,CAAa,eAAb,IAAgC,IAAI,CAAC,GAAL,CAC9B,KAAK,OAAL,CAAa,eAAb,IAAgC,KAAK,YAAL,GAAoB,MADtB,EAE9B,CAF8B,CAAhC;AAID;AACF;;AACD,QAAI,KAAK,GAAG,KAAK,eAAjB,EAAkC;AAChC,aAAO,CAAP;AACD;;AACD,WAAO,KAAP;AACD,GA1BD;;AA4BA,EAAA,0BAAA,CAAA,SAAA,CAAA,4CAAA,GAAA,YAAA;AACE,WAAO,IAAP;AACD,GAFD;;AAGF,SAAA,0BAAA;AAAC,CA1ED,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DefaultActiveSpeakerPolicy = /** @class */ (function () {\n    /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.\n     *\n     * @param speakerWeight\n     * The number used to calculate new active speaker score for current attendee\n     * ```js\n     * Formula:\n     * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)\n     * ```\n     *\n     * @param cutoffThreshold\n     * The threshold number compared with updated active speaker score.\n     * If the updated active speaker score is less than this threshold value,\n     * the updated score is returned as 0, else the updated score is returned.\n     *\n     * @param silenceThreshold\n     * The threshold number compared with current received volume.\n     * While calculating the new active speaker score, if the current received\n     * volume is less than this threshold value, the current received volume is considered as 0,\n     * else 1.\n     *\n     * @param takeoverRate\n     * The number used to calculate other attendee's active speaker score, other than the current attendee.\n     * ```js\n     * Formula:\n     *  updatedOtherAttendeeActiveSpeakerScore = Math.max(\n     *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,\n     *    0\n     *  );\n     * ```\n     */\n    function DefaultActiveSpeakerPolicy(speakerWeight, cutoffThreshold, silenceThreshold, takeoverRate) {\n        if (speakerWeight === void 0) { speakerWeight = 0.9; }\n        if (cutoffThreshold === void 0) { cutoffThreshold = 0.01; }\n        if (silenceThreshold === void 0) { silenceThreshold = 0.2; }\n        if (takeoverRate === void 0) { takeoverRate = 0.2; }\n        this.speakerWeight = speakerWeight;\n        this.cutoffThreshold = cutoffThreshold;\n        this.silenceThreshold = silenceThreshold;\n        this.takeoverRate = takeoverRate;\n        /**\n         * The map of attendeeIds to their active speaker score values\n         */\n        this.volumes = {};\n    }\n    DefaultActiveSpeakerPolicy.prototype.calculateScore = function (attendeeId, volume, muted) {\n        if (muted || volume === null) {\n            volume = 0;\n        }\n        if (!this.volumes.hasOwnProperty(attendeeId)) {\n            this.volumes[attendeeId] = 0;\n        }\n        if (volume > this.silenceThreshold) {\n            volume = 1.0;\n        }\n        else {\n            volume = 0.0;\n        }\n        var score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);\n        this.volumes[attendeeId] = score;\n        for (var otherAttendeeId in this.volumes) {\n            if (otherAttendeeId !== attendeeId) {\n                this.volumes[otherAttendeeId] = Math.max(this.volumes[otherAttendeeId] - this.takeoverRate * volume, 0);\n            }\n        }\n        if (score < this.cutoffThreshold) {\n            return 0;\n        }\n        return score;\n    };\n    DefaultActiveSpeakerPolicy.prototype.prioritizeVideoSendBandwidthForActiveSpeaker = function () {\n        return true;\n    };\n    return DefaultActiveSpeakerPolicy;\n}());\nexports.default = DefaultActiveSpeakerPolicy;\n//# sourceMappingURL=DefaultActiveSpeakerPolicy.js.map"]},"metadata":{},"sourceType":"script"}