{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DefaultVolumeIndicatorAdapter =\n/** @class */\nfunction () {\n  function DefaultVolumeIndicatorAdapter(logger, realtimeController, minVolumeDecibels, maxVolumeDecibels) {\n    this.logger = logger;\n    this.realtimeController = realtimeController;\n    this.minVolumeDecibels = minVolumeDecibels;\n    this.maxVolumeDecibels = maxVolumeDecibels;\n    this.streamIdToAttendeeId = {};\n    this.streamIdToExternalUserId = {};\n    this.warnedAboutMissingStreamIdMapping = {};\n  }\n\n  DefaultVolumeIndicatorAdapter.prototype.sendRealtimeUpdatesForAudioStreamIdInfo = function (info) {\n    var e_1, _a, e_2, _b;\n\n    var streamIndex = 0;\n\n    try {\n      for (var _c = __values(info.streams), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var stream = _d.value;\n        var hasAttendeeId = !!stream.attendeeId;\n        var hasExternalUserId = !!stream.externalUserId;\n        var hasMuted = stream.hasOwnProperty('muted');\n        var hasDropped = !!stream.dropped;\n\n        if (hasAttendeeId) {\n          this.streamIdToAttendeeId[stream.audioStreamId] = stream.attendeeId;\n          var externalUserId = hasExternalUserId ? stream.externalUserId : stream.attendeeId;\n          this.streamIdToExternalUserId[stream.audioStreamId] = externalUserId;\n          this.realtimeController.realtimeSetAttendeeIdPresence(stream.attendeeId, true, externalUserId, false, {\n            attendeeIndex: streamIndex++,\n            attendeesInFrame: info.streams.length\n          });\n        }\n\n        if (hasMuted) {\n          var attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n          var externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n          this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, null, stream.muted, null, externalUserId);\n        }\n\n        if (!hasAttendeeId && !hasMuted) {\n          var attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n\n          if (attendeeId) {\n            var externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n            delete this.streamIdToAttendeeId[stream.audioStreamId];\n            delete this.streamIdToExternalUserId[stream.audioStreamId];\n            delete this.warnedAboutMissingStreamIdMapping[stream.audioStreamId];\n            var attendeeHasNewStreamId = false;\n\n            try {\n              for (var _e = (e_2 = void 0, __values(Object.keys(this.streamIdToAttendeeId))), _f = _e.next(); !_f.done; _f = _e.next()) {\n                var otherStreamId = _f.value;\n                var otherStreamIdNumber = parseInt(otherStreamId);\n\n                if (otherStreamIdNumber > stream.audioStreamId && this.streamIdToAttendeeId[otherStreamIdNumber] === attendeeId) {\n                  attendeeHasNewStreamId = true;\n                  break;\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            if (!attendeeHasNewStreamId) {\n              this.realtimeController.realtimeSetAttendeeIdPresence(attendeeId, false, externalUserId, hasDropped, {\n                attendeeIndex: streamIndex++,\n                attendeesInFrame: info.streams.length\n              });\n            }\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  DefaultVolumeIndicatorAdapter.prototype.sendRealtimeUpdatesForAudioMetadata = function (metadata) {\n    var e_3, _a;\n\n    var volumes = null;\n    var signalStrengths = null;\n\n    try {\n      for (var _b = __values(metadata.attendeeStates), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var state = _c.value;\n        var attendeeId = this.attendeeIdForStreamId(state.audioStreamId);\n\n        if (state.hasOwnProperty('volume')) {\n          if (volumes === null) {\n            volumes = {};\n          }\n\n          if (attendeeId !== null) {\n            // @ts-ignore: TODO fix this protobufjs issue\n            volumes[attendeeId] = this.normalizedVolume(state);\n          }\n        }\n\n        if (state.hasOwnProperty('signalStrength')) {\n          if (signalStrengths === null) {\n            signalStrengths = {};\n          }\n\n          if (attendeeId !== null) {\n            // @ts-ignore: TODO fix this protobufjs issue\n            signalStrengths[attendeeId] = this.normalizedSignalStrength(state);\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    this.applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths);\n  };\n\n  DefaultVolumeIndicatorAdapter.prototype.normalizedVolume = function (state) {\n    var dBVolume = -state.volume;\n    var normalized = 1.0 - (dBVolume - this.maxVolumeDecibels) / (this.minVolumeDecibels - this.maxVolumeDecibels);\n    var clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n    return clipped;\n  };\n\n  DefaultVolumeIndicatorAdapter.prototype.normalizedSignalStrength = function (state) {\n    var normalized = state.signalStrength / DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS;\n    var clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n    return clipped;\n  };\n\n  DefaultVolumeIndicatorAdapter.prototype.applyRealtimeUpdatesForAudioMetadata = function (volumes, signalStrengths) {\n    for (var streamId in this.streamIdToAttendeeId) {\n      var attendeeId = this.streamIdToAttendeeId[streamId];\n      var externalUserId = this.streamIdToExternalUserId[streamId];\n      var volumeUpdate = null;\n      var signalStrengthUpdate = null;\n\n      if (volumes !== null) {\n        if (volumes.hasOwnProperty(attendeeId)) {\n          volumeUpdate = volumes[attendeeId];\n        } else {\n          volumeUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME;\n        }\n      }\n\n      if (signalStrengths !== null) {\n        if (signalStrengths.hasOwnProperty(attendeeId)) {\n          signalStrengthUpdate = signalStrengths[attendeeId];\n        } else {\n          signalStrengthUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH;\n        }\n      }\n\n      if (volumeUpdate !== null || signalStrengthUpdate !== null) {\n        this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, volumeUpdate, null, signalStrengthUpdate, externalUserId);\n      }\n    }\n  };\n\n  DefaultVolumeIndicatorAdapter.prototype.attendeeIdForStreamId = function (streamId) {\n    if (streamId === 0) {\n      return null;\n    }\n\n    var attendeeId = this.streamIdToAttendeeId[streamId];\n\n    if (attendeeId) {\n      return attendeeId;\n    }\n\n    if (!this.warnedAboutMissingStreamIdMapping[streamId]) {\n      this.warnedAboutMissingStreamIdMapping[streamId] = true;\n      this.logger.warn(\"volume indicator stream id \" + streamId + \" seen before being defined\");\n    }\n\n    return null;\n  };\n\n  DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS = 2;\n  DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME = 0;\n  DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH = 1;\n  return DefaultVolumeIndicatorAdapter;\n}();\n\nexports.default = DefaultVolumeIndicatorAdapter;","map":{"version":3,"sources":["../../src/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DefaultVolumeIndicatorAdapter = /** @class */ (function () {\n    function DefaultVolumeIndicatorAdapter(logger, realtimeController, minVolumeDecibels, maxVolumeDecibels) {\n        this.logger = logger;\n        this.realtimeController = realtimeController;\n        this.minVolumeDecibels = minVolumeDecibels;\n        this.maxVolumeDecibels = maxVolumeDecibels;\n        this.streamIdToAttendeeId = {};\n        this.streamIdToExternalUserId = {};\n        this.warnedAboutMissingStreamIdMapping = {};\n    }\n    DefaultVolumeIndicatorAdapter.prototype.sendRealtimeUpdatesForAudioStreamIdInfo = function (info) {\n        var e_1, _a, e_2, _b;\n        var streamIndex = 0;\n        try {\n            for (var _c = __values(info.streams), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var stream = _d.value;\n                var hasAttendeeId = !!stream.attendeeId;\n                var hasExternalUserId = !!stream.externalUserId;\n                var hasMuted = stream.hasOwnProperty('muted');\n                var hasDropped = !!stream.dropped;\n                if (hasAttendeeId) {\n                    this.streamIdToAttendeeId[stream.audioStreamId] = stream.attendeeId;\n                    var externalUserId = hasExternalUserId ? stream.externalUserId : stream.attendeeId;\n                    this.streamIdToExternalUserId[stream.audioStreamId] = externalUserId;\n                    this.realtimeController.realtimeSetAttendeeIdPresence(stream.attendeeId, true, externalUserId, false, { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length });\n                }\n                if (hasMuted) {\n                    var attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n                    var externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n                    this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, null, stream.muted, null, externalUserId);\n                }\n                if (!hasAttendeeId && !hasMuted) {\n                    var attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n                    if (attendeeId) {\n                        var externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n                        delete this.streamIdToAttendeeId[stream.audioStreamId];\n                        delete this.streamIdToExternalUserId[stream.audioStreamId];\n                        delete this.warnedAboutMissingStreamIdMapping[stream.audioStreamId];\n                        var attendeeHasNewStreamId = false;\n                        try {\n                            for (var _e = (e_2 = void 0, __values(Object.keys(this.streamIdToAttendeeId))), _f = _e.next(); !_f.done; _f = _e.next()) {\n                                var otherStreamId = _f.value;\n                                var otherStreamIdNumber = parseInt(otherStreamId);\n                                if (otherStreamIdNumber > stream.audioStreamId &&\n                                    this.streamIdToAttendeeId[otherStreamIdNumber] === attendeeId) {\n                                    attendeeHasNewStreamId = true;\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        if (!attendeeHasNewStreamId) {\n                            this.realtimeController.realtimeSetAttendeeIdPresence(attendeeId, false, externalUserId, hasDropped, { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length });\n                        }\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    DefaultVolumeIndicatorAdapter.prototype.sendRealtimeUpdatesForAudioMetadata = function (metadata) {\n        var e_3, _a;\n        var volumes = null;\n        var signalStrengths = null;\n        try {\n            for (var _b = __values(metadata.attendeeStates), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var state = _c.value;\n                var attendeeId = this.attendeeIdForStreamId(state.audioStreamId);\n                if (state.hasOwnProperty('volume')) {\n                    if (volumes === null) {\n                        volumes = {};\n                    }\n                    if (attendeeId !== null) {\n                        // @ts-ignore: TODO fix this protobufjs issue\n                        volumes[attendeeId] = this.normalizedVolume(state);\n                    }\n                }\n                if (state.hasOwnProperty('signalStrength')) {\n                    if (signalStrengths === null) {\n                        signalStrengths = {};\n                    }\n                    if (attendeeId !== null) {\n                        // @ts-ignore: TODO fix this protobufjs issue\n                        signalStrengths[attendeeId] = this.normalizedSignalStrength(state);\n                    }\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        this.applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths);\n    };\n    DefaultVolumeIndicatorAdapter.prototype.normalizedVolume = function (state) {\n        var dBVolume = -state.volume;\n        var normalized = 1.0 - (dBVolume - this.maxVolumeDecibels) / (this.minVolumeDecibels - this.maxVolumeDecibels);\n        var clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n        return clipped;\n    };\n    DefaultVolumeIndicatorAdapter.prototype.normalizedSignalStrength = function (state) {\n        var normalized = state.signalStrength / DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS;\n        var clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n        return clipped;\n    };\n    DefaultVolumeIndicatorAdapter.prototype.applyRealtimeUpdatesForAudioMetadata = function (volumes, signalStrengths) {\n        for (var streamId in this.streamIdToAttendeeId) {\n            var attendeeId = this.streamIdToAttendeeId[streamId];\n            var externalUserId = this.streamIdToExternalUserId[streamId];\n            var volumeUpdate = null;\n            var signalStrengthUpdate = null;\n            if (volumes !== null) {\n                if (volumes.hasOwnProperty(attendeeId)) {\n                    volumeUpdate = volumes[attendeeId];\n                }\n                else {\n                    volumeUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME;\n                }\n            }\n            if (signalStrengths !== null) {\n                if (signalStrengths.hasOwnProperty(attendeeId)) {\n                    signalStrengthUpdate = signalStrengths[attendeeId];\n                }\n                else {\n                    signalStrengthUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH;\n                }\n            }\n            if (volumeUpdate !== null || signalStrengthUpdate !== null) {\n                this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, volumeUpdate, null, signalStrengthUpdate, externalUserId);\n            }\n        }\n    };\n    DefaultVolumeIndicatorAdapter.prototype.attendeeIdForStreamId = function (streamId) {\n        if (streamId === 0) {\n            return null;\n        }\n        var attendeeId = this.streamIdToAttendeeId[streamId];\n        if (attendeeId) {\n            return attendeeId;\n        }\n        if (!this.warnedAboutMissingStreamIdMapping[streamId]) {\n            this.warnedAboutMissingStreamIdMapping[streamId] = true;\n            this.logger.warn(\"volume indicator stream id \" + streamId + \" seen before being defined\");\n        }\n        return null;\n    };\n    DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS = 2;\n    DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME = 0;\n    DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH = 1;\n    return DefaultVolumeIndicatorAdapter;\n}());\nexports.default = DefaultVolumeIndicatorAdapter;\n//# sourceMappingURL=DefaultVolumeIndicatorAdapter.js.map"]},"metadata":{},"sourceType":"script"}