{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nvar Maybe_1 = require(\"../maybe/Maybe\");\n\nvar TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\n\nvar ScreenShareStreamingEvent_1 = require(\"../screensharestreaming/ScreenShareStreamingEvent\");\n\nvar ScreenSharingMessageFlag_1 = require(\"../screensharingmessage/ScreenSharingMessageFlag\");\n\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\n\nvar DefaultScreenSharingSession =\n/** @class */\nfunction () {\n  function DefaultScreenSharingSession(webSocket, constraintsProvider, timeSliceMs, messageSerialization, mediaStreamBroker, screenShareStreamFactory, mediaRecordingFactory, logger, browserBehavior) {\n    var _this = this;\n\n    if (browserBehavior === void 0) {\n      browserBehavior = new DefaultBrowserBehavior_1.default();\n    }\n\n    this.webSocket = webSocket;\n    this.constraintsProvider = constraintsProvider;\n    this.timeSliceMs = timeSliceMs;\n    this.messageSerialization = messageSerialization;\n    this.mediaStreamBroker = mediaStreamBroker;\n    this.screenShareStreamFactory = screenShareStreamFactory;\n    this.mediaRecordingFactory = mediaRecordingFactory;\n    this.logger = logger;\n    this.browserBehavior = browserBehavior;\n    this.observerQueue = new Set();\n    this.stream = null;\n    this.webSocket.addEventListener('message', function (event) {\n      _this.didReceiveMessageEvent(event);\n\n      _this.logger.debug(function () {\n        return 'dispatched message event';\n      });\n    });\n    this.webSocket.addEventListener('close', function (event) {\n      _this.logger.info('screen sharing connection closed');\n\n      _this.stop().catch(function () {});\n\n      _this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didClose).map(function (f) {\n          return f.bind(observer)(event);\n        });\n      });\n    });\n    this.webSocket.addEventListener('reconnect', function (event) {\n      _this.logger.info('screen sharing connection reconnecting');\n\n      _this.stop().catch(function () {});\n\n      _this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.willReconnect).map(function (f) {\n          return f.bind(observer)(event);\n        });\n      });\n    });\n    this.webSocket.addEventListener('reconnect_error', function (event) {\n      _this.logger.info('reconnect attempt failed');\n\n      _this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didFailReconnectAttempt).map(function (f) {\n          return f.bind(observer)(event);\n        });\n      });\n    });\n    this.webSocket.addEventListener('open', function (event) {\n      _this.logger.info('screen sharing connection opened');\n\n      _this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didOpen).map(function (f) {\n          return f.bind(observer)(event);\n        });\n      });\n    });\n  }\n\n  DefaultScreenSharingSession.prototype.open = function (timeoutMs) {\n    this.logger.info(\"opening screen sharing connection to \" + this.webSocket.url);\n    return this.webSocket.open(timeoutMs);\n  };\n\n  DefaultScreenSharingSession.prototype.close = function (timeoutMs) {\n    var _this = this;\n\n    return this.webSocket.close(timeoutMs).then(function (event) {\n      _this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didClose).map(function (f) {\n          return f.bind(observer)(event);\n        });\n      });\n\n      return event;\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.start = function (sourceId, timeoutMs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, stream;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            /* istanbul ignore next */\n            if (timeoutMs === null || timeoutMs === undefined) {\n              timeoutMs = 3000;\n            }\n\n            if (this.stream !== null) {\n              throw new Error('started');\n            }\n\n            if (this.browserBehavior.screenShareUnsupported()) {\n              throw new Error('Safari browser does not support screen sharing');\n            }\n\n            return [4\n            /*yield*/\n            , this.mediaStreamBroker.acquireDisplayInputStream(this.constraintsProvider(sourceId))];\n\n          case 1:\n            input = _a.sent();\n            if (!(timeoutMs > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.ping(timeoutMs)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            stream = this.screenShareStreamFactory.create(this.mediaRecordingFactory.create(input));\n            stream.addEventListener(ScreenShareStreamingEvent_1.default.MessageEvent, function (event) {\n              try {\n                _this.send(event.detail);\n\n                _this.logger.debug(function () {\n                  return 'dispatched screen sharing stream message event';\n                });\n              } catch (error) {\n                _this.logger.error(error);\n              }\n            });\n            stream.addEventListener(ScreenShareStreamingEvent_1.default.EndedEvent, function () {\n              _this.logger.info('stream ended');\n\n              _this.stop().then(function () {});\n            });\n            stream.start(this.timeSliceMs);\n            this.stream = stream;\n            this.observerQueue.forEach(function (observer) {\n              Maybe_1.default.of(observer.didStartScreenSharing).map(function (f) {\n                return f.bind(observer)();\n              });\n            });\n            this.logger.info('screen sharing stream started');\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.stop = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this.stream === null) {\n        return reject(new Error('not started'));\n      }\n\n      _this.stream.stop().then(function () {\n        _this.observerQueue.forEach(function (observer) {\n          Maybe_1.default.of(observer.didStopScreenSharing).map(function (f) {\n            return f.bind(observer)();\n          });\n        });\n      }).then(function () {\n        _this.logger.info('screen sharing stream stopped');\n      }).finally(function () {\n        _this.stream = null;\n      }).then(resolve);\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.pause = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this.stream === null) {\n        return reject(new Error('not started'));\n      }\n\n      _this.stream.pause().then(function () {\n        _this.observerQueue.forEach(function (observer) {\n          Maybe_1.default.of(observer.didPauseScreenSharing).map(function (f) {\n            return f.bind(observer)();\n          });\n        });\n      });\n\n      _this.logger.info('screen sharing stream paused');\n\n      resolve();\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.unpause = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this.stream === null) {\n        return reject(new Error('not started'));\n      }\n\n      _this.stream.unpause().then(function () {\n        _this.observerQueue.forEach(function (observer) {\n          Maybe_1.default.of(observer.didUnpauseScreenSharing).map(function (f) {\n            return f.bind(observer)();\n          });\n        });\n      });\n\n      _this.logger.info('screen sharing stream unpaused');\n\n      resolve();\n    });\n  };\n  /* istanbul ignore next */\n\n\n  DefaultScreenSharingSession.prototype.ping = function (timeoutMs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, promise, timeout;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        self = this;\n        promise = new Promise(function (resolve) {\n          var observer = {\n            didReceiveHeartbeatResponse: function didReceiveHeartbeatResponse() {\n              self.deregisterObserver(this);\n              resolve();\n            }\n          };\n          var request = {\n            type: ScreenSharingMessageType_1.default.HeartbeatRequestType,\n            flags: [ScreenSharingMessageFlag_1.default.Local],\n            data: new Uint8Array([])\n          };\n\n          _this.registerObserver(observer);\n\n          _this.send(request);\n        });\n        timeout = new Promise(function (resolve, reject) {\n          new TimeoutScheduler_1.default(timeoutMs).start(function () {\n            reject(new Error('ping timed out after ' + timeoutMs + 'ms'));\n          });\n        });\n        return [2\n        /*return*/\n        , Promise.race([promise, timeout])];\n      });\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.registerObserver = function (observer) {\n    this.observerQueue.add(observer);\n    return this;\n  };\n\n  DefaultScreenSharingSession.prototype.deregisterObserver = function (observer) {\n    this.observerQueue.delete(observer);\n    return this;\n  };\n\n  DefaultScreenSharingSession.prototype.didReceiveMessageEvent = function (event) {\n    this.logger.debug(function () {\n      return \"didReceiveMessageEvent: \" + new Uint8Array(event.data);\n    });\n    var message = this.messageSerialization.deserialize(new Uint8Array(event.data));\n\n    switch (message.type) {\n      case ScreenSharingMessageType_1.default.HeartbeatResponseType:\n        return this.didReceiveHeartbeatResponseMessage();\n\n      case ScreenSharingMessageType_1.default.HeartbeatRequestType:\n        return this.didReceiveHeartbeatRequestMessage();\n\n      case ScreenSharingMessageType_1.default.StreamStop:\n        return this.didReceiveStreamStopMessage();\n\n      case ScreenSharingMessageType_1.default.KeyRequest:\n        return this.didReceiveKeyRequest();\n\n      default:\n        return this.didReceiveUnknownMessage();\n    }\n  };\n\n  DefaultScreenSharingSession.prototype.didReceiveHeartbeatResponseMessage = function () {\n    this.logger.info('received heartbeat response message');\n    this.observerQueue.forEach(function (observer) {\n      Maybe_1.default.of(observer.didReceiveHeartbeatResponse).map(function (f) {\n        return f.bind(observer)();\n      });\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.didReceiveKeyRequest = function () {\n    this.logger.info('received key request message');\n    this.stream.key();\n  };\n\n  DefaultScreenSharingSession.prototype.didReceiveStreamStopMessage = function () {\n    this.logger.debug(function () {\n      return 'received stream stop message';\n    });\n    this.observerQueue.forEach(function (observer) {\n      Maybe_1.default.of(observer.didReceiveStreamStopMessage).map(function (f) {\n        return f.bind(observer)();\n      });\n    });\n    this.stop().then(function () {});\n  };\n\n  DefaultScreenSharingSession.prototype.didReceiveUnknownMessage = function () {\n    this.logger.debug(function () {\n      return 'received unknown message';\n    });\n    this.observerQueue.forEach(function (observer) {\n      Maybe_1.default.of(observer.didReceiveUnknownMessage).map(function (f) {\n        return f.bind(observer)();\n      });\n    });\n  };\n\n  DefaultScreenSharingSession.prototype.didReceiveHeartbeatRequestMessage = function () {\n    this.logger.debug(function () {\n      return 'received heartbeat request';\n    });\n    this.observerQueue.forEach(function (observer) {\n      Maybe_1.default.of(observer.didReceiveHeartbeatRequest).map(function (f) {\n        return f.bind(observer)();\n      });\n    });\n    var response = {\n      type: ScreenSharingMessageType_1.default.HeartbeatResponseType,\n      flags: [ScreenSharingMessageFlag_1.default.Local],\n      data: new Uint8Array([])\n    };\n\n    try {\n      this.send(response);\n      this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didSendHeartbeatResponse).map(function (f) {\n          return f.bind(observer)();\n        });\n      });\n    } catch (error) {\n      this.logger.error(error);\n    }\n  };\n\n  DefaultScreenSharingSession.prototype.send = function (message) {\n    try {\n      this.webSocket.send(this.messageSerialization.serialize(message));\n      this.logger.debug(function () {\n        return 'sent screen sharing message';\n      });\n      this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didSendScreenSharingMessage).map(function (f) {\n          return f.bind(observer)(message.type);\n        });\n      });\n      return message;\n    } catch (error) {\n      this.observerQueue.forEach(function (observer) {\n        Maybe_1.default.of(observer.didFailSend).map(function (f) {\n          return f.bind(observer)(error);\n        });\n      });\n      throw error;\n    }\n  };\n\n  return DefaultScreenSharingSession;\n}();\n\nexports.default = DefaultScreenSharingSession;","map":{"version":3,"sources":["../../src/screensharingsession/DefaultScreenSharingSession.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\nvar Maybe_1 = require(\"../maybe/Maybe\");\nvar TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\nvar ScreenShareStreamingEvent_1 = require(\"../screensharestreaming/ScreenShareStreamingEvent\");\nvar ScreenSharingMessageFlag_1 = require(\"../screensharingmessage/ScreenSharingMessageFlag\");\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\nvar DefaultScreenSharingSession = /** @class */ (function () {\n    function DefaultScreenSharingSession(webSocket, constraintsProvider, timeSliceMs, messageSerialization, mediaStreamBroker, screenShareStreamFactory, mediaRecordingFactory, logger, browserBehavior) {\n        var _this = this;\n        if (browserBehavior === void 0) { browserBehavior = new DefaultBrowserBehavior_1.default(); }\n        this.webSocket = webSocket;\n        this.constraintsProvider = constraintsProvider;\n        this.timeSliceMs = timeSliceMs;\n        this.messageSerialization = messageSerialization;\n        this.mediaStreamBroker = mediaStreamBroker;\n        this.screenShareStreamFactory = screenShareStreamFactory;\n        this.mediaRecordingFactory = mediaRecordingFactory;\n        this.logger = logger;\n        this.browserBehavior = browserBehavior;\n        this.observerQueue = new Set();\n        this.stream = null;\n        this.webSocket.addEventListener('message', function (event) {\n            _this.didReceiveMessageEvent(event);\n            _this.logger.debug(function () { return 'dispatched message event'; });\n        });\n        this.webSocket.addEventListener('close', function (event) {\n            _this.logger.info('screen sharing connection closed');\n            _this.stop().catch(function () { });\n            _this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didClose).map(function (f) { return f.bind(observer)(event); });\n            });\n        });\n        this.webSocket.addEventListener('reconnect', function (event) {\n            _this.logger.info('screen sharing connection reconnecting');\n            _this.stop().catch(function () { });\n            _this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.willReconnect).map(function (f) { return f.bind(observer)(event); });\n            });\n        });\n        this.webSocket.addEventListener('reconnect_error', function (event) {\n            _this.logger.info('reconnect attempt failed');\n            _this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didFailReconnectAttempt).map(function (f) { return f.bind(observer)(event); });\n            });\n        });\n        this.webSocket.addEventListener('open', function (event) {\n            _this.logger.info('screen sharing connection opened');\n            _this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didOpen).map(function (f) { return f.bind(observer)(event); });\n            });\n        });\n    }\n    DefaultScreenSharingSession.prototype.open = function (timeoutMs) {\n        this.logger.info(\"opening screen sharing connection to \" + this.webSocket.url);\n        return this.webSocket.open(timeoutMs);\n    };\n    DefaultScreenSharingSession.prototype.close = function (timeoutMs) {\n        var _this = this;\n        return this.webSocket.close(timeoutMs).then(function (event) {\n            _this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didClose).map(function (f) { return f.bind(observer)(event); });\n            });\n            return event;\n        });\n    };\n    DefaultScreenSharingSession.prototype.start = function (sourceId, timeoutMs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, stream;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        /* istanbul ignore next */\n                        if (timeoutMs === null || timeoutMs === undefined) {\n                            timeoutMs = 3000;\n                        }\n                        if (this.stream !== null) {\n                            throw new Error('started');\n                        }\n                        if (this.browserBehavior.screenShareUnsupported()) {\n                            throw new Error('Safari browser does not support screen sharing');\n                        }\n                        return [4 /*yield*/, this.mediaStreamBroker.acquireDisplayInputStream(this.constraintsProvider(sourceId))];\n                    case 1:\n                        input = _a.sent();\n                        if (!(timeoutMs > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.ping(timeoutMs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        stream = this.screenShareStreamFactory.create(this.mediaRecordingFactory.create(input));\n                        stream.addEventListener(ScreenShareStreamingEvent_1.default.MessageEvent, function (event) {\n                            try {\n                                _this.send(event.detail);\n                                _this.logger.debug(function () { return 'dispatched screen sharing stream message event'; });\n                            }\n                            catch (error) {\n                                _this.logger.error(error);\n                            }\n                        });\n                        stream.addEventListener(ScreenShareStreamingEvent_1.default.EndedEvent, function () {\n                            _this.logger.info('stream ended');\n                            _this.stop().then(function () { });\n                        });\n                        stream.start(this.timeSliceMs);\n                        this.stream = stream;\n                        this.observerQueue.forEach(function (observer) {\n                            Maybe_1.default.of(observer.didStartScreenSharing).map(function (f) { return f.bind(observer)(); });\n                        });\n                        this.logger.info('screen sharing stream started');\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultScreenSharingSession.prototype.stop = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.stream === null) {\n                return reject(new Error('not started'));\n            }\n            _this.stream\n                .stop()\n                .then(function () {\n                _this.observerQueue.forEach(function (observer) {\n                    Maybe_1.default.of(observer.didStopScreenSharing).map(function (f) { return f.bind(observer)(); });\n                });\n            })\n                .then(function () {\n                _this.logger.info('screen sharing stream stopped');\n            })\n                .finally(function () {\n                _this.stream = null;\n            })\n                .then(resolve);\n        });\n    };\n    DefaultScreenSharingSession.prototype.pause = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.stream === null) {\n                return reject(new Error('not started'));\n            }\n            _this.stream.pause().then(function () {\n                _this.observerQueue.forEach(function (observer) {\n                    Maybe_1.default.of(observer.didPauseScreenSharing).map(function (f) { return f.bind(observer)(); });\n                });\n            });\n            _this.logger.info('screen sharing stream paused');\n            resolve();\n        });\n    };\n    DefaultScreenSharingSession.prototype.unpause = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (_this.stream === null) {\n                return reject(new Error('not started'));\n            }\n            _this.stream.unpause().then(function () {\n                _this.observerQueue.forEach(function (observer) {\n                    Maybe_1.default.of(observer.didUnpauseScreenSharing).map(function (f) { return f.bind(observer)(); });\n                });\n            });\n            _this.logger.info('screen sharing stream unpaused');\n            resolve();\n        });\n    };\n    /* istanbul ignore next */\n    DefaultScreenSharingSession.prototype.ping = function (timeoutMs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var self, promise, timeout;\n            var _this = this;\n            return __generator(this, function (_a) {\n                self = this;\n                promise = new Promise(function (resolve) {\n                    var observer = {\n                        didReceiveHeartbeatResponse: function () {\n                            self.deregisterObserver(this);\n                            resolve();\n                        },\n                    };\n                    var request = {\n                        type: ScreenSharingMessageType_1.default.HeartbeatRequestType,\n                        flags: [ScreenSharingMessageFlag_1.default.Local],\n                        data: new Uint8Array([]),\n                    };\n                    _this.registerObserver(observer);\n                    _this.send(request);\n                });\n                timeout = new Promise(function (resolve, reject) {\n                    new TimeoutScheduler_1.default(timeoutMs).start(function () {\n                        reject(new Error('ping timed out after ' + timeoutMs + 'ms'));\n                    });\n                });\n                return [2 /*return*/, Promise.race([promise, timeout])];\n            });\n        });\n    };\n    DefaultScreenSharingSession.prototype.registerObserver = function (observer) {\n        this.observerQueue.add(observer);\n        return this;\n    };\n    DefaultScreenSharingSession.prototype.deregisterObserver = function (observer) {\n        this.observerQueue.delete(observer);\n        return this;\n    };\n    DefaultScreenSharingSession.prototype.didReceiveMessageEvent = function (event) {\n        this.logger.debug(function () { return \"didReceiveMessageEvent: \" + new Uint8Array(event.data); });\n        var message = this.messageSerialization.deserialize(new Uint8Array(event.data));\n        switch (message.type) {\n            case ScreenSharingMessageType_1.default.HeartbeatResponseType:\n                return this.didReceiveHeartbeatResponseMessage();\n            case ScreenSharingMessageType_1.default.HeartbeatRequestType:\n                return this.didReceiveHeartbeatRequestMessage();\n            case ScreenSharingMessageType_1.default.StreamStop:\n                return this.didReceiveStreamStopMessage();\n            case ScreenSharingMessageType_1.default.KeyRequest:\n                return this.didReceiveKeyRequest();\n            default:\n                return this.didReceiveUnknownMessage();\n        }\n    };\n    DefaultScreenSharingSession.prototype.didReceiveHeartbeatResponseMessage = function () {\n        this.logger.info('received heartbeat response message');\n        this.observerQueue.forEach(function (observer) {\n            Maybe_1.default.of(observer.didReceiveHeartbeatResponse).map(function (f) { return f.bind(observer)(); });\n        });\n    };\n    DefaultScreenSharingSession.prototype.didReceiveKeyRequest = function () {\n        this.logger.info('received key request message');\n        this.stream.key();\n    };\n    DefaultScreenSharingSession.prototype.didReceiveStreamStopMessage = function () {\n        this.logger.debug(function () { return 'received stream stop message'; });\n        this.observerQueue.forEach(function (observer) {\n            Maybe_1.default.of(observer.didReceiveStreamStopMessage).map(function (f) { return f.bind(observer)(); });\n        });\n        this.stop().then(function () { });\n    };\n    DefaultScreenSharingSession.prototype.didReceiveUnknownMessage = function () {\n        this.logger.debug(function () { return 'received unknown message'; });\n        this.observerQueue.forEach(function (observer) {\n            Maybe_1.default.of(observer.didReceiveUnknownMessage).map(function (f) { return f.bind(observer)(); });\n        });\n    };\n    DefaultScreenSharingSession.prototype.didReceiveHeartbeatRequestMessage = function () {\n        this.logger.debug(function () { return 'received heartbeat request'; });\n        this.observerQueue.forEach(function (observer) {\n            Maybe_1.default.of(observer.didReceiveHeartbeatRequest).map(function (f) { return f.bind(observer)(); });\n        });\n        var response = {\n            type: ScreenSharingMessageType_1.default.HeartbeatResponseType,\n            flags: [ScreenSharingMessageFlag_1.default.Local],\n            data: new Uint8Array([]),\n        };\n        try {\n            this.send(response);\n            this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didSendHeartbeatResponse).map(function (f) { return f.bind(observer)(); });\n            });\n        }\n        catch (error) {\n            this.logger.error(error);\n        }\n    };\n    DefaultScreenSharingSession.prototype.send = function (message) {\n        try {\n            this.webSocket.send(this.messageSerialization.serialize(message));\n            this.logger.debug(function () { return 'sent screen sharing message'; });\n            this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didSendScreenSharingMessage).map(function (f) { return f.bind(observer)(message.type); });\n            });\n            return message;\n        }\n        catch (error) {\n            this.observerQueue.forEach(function (observer) {\n                Maybe_1.default.of(observer.didFailSend).map(function (f) { return f.bind(observer)(error); });\n            });\n            throw error;\n        }\n    };\n    return DefaultScreenSharingSession;\n}());\nexports.default = DefaultScreenSharingSession;\n//# sourceMappingURL=DefaultScreenSharingSession.js.map"]},"metadata":{},"sourceType":"script"}