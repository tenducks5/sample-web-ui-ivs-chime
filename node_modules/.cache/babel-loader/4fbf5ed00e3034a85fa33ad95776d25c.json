{"ast":null,"code":"\"use strict\"; // Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LogLevel_1 = require(\"./LogLevel\");\n/**\n * MultiLogger writes logs to multiple other loggers\n */\n\n\nvar MultiLogger =\n/** @class */\nfunction () {\n  function MultiLogger() {\n    var loggers = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      loggers[_i] = arguments[_i];\n    }\n\n    this._loggers = loggers;\n  }\n\n  MultiLogger.prototype.info = function (msg) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var logger = _c.value;\n        logger.info(msg);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  MultiLogger.prototype.warn = function (msg) {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var logger = _c.value;\n        logger.warn(msg);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  MultiLogger.prototype.error = function (msg) {\n    var e_3, _a;\n\n    try {\n      for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var logger = _c.value;\n        logger.error(msg);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  MultiLogger.prototype.debug = function (debugFunction) {\n    var e_4, _a;\n\n    var message;\n    var memoized = typeof debugFunction === 'string' ? debugFunction : function () {\n      if (!message) {\n        message = debugFunction();\n      }\n\n      return message;\n    };\n\n    try {\n      for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var logger = _c.value;\n        logger.debug(memoized);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n\n  MultiLogger.prototype.setLogLevel = function (level) {\n    var e_5, _a;\n\n    try {\n      for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var logger = _c.value;\n        logger.setLogLevel(level);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n  };\n\n  MultiLogger.prototype.getLogLevel = function () {\n    var e_6, _a;\n\n    try {\n      for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var logger = _c.value;\n        return logger.getLogLevel();\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    return LogLevel_1.default.OFF;\n  };\n\n  return MultiLogger;\n}();\n\nexports.default = MultiLogger;","map":{"version":3,"sources":["../../src/logger/MultiLogger.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAGE,WAAA,WAAA,GAAA;AAAY,QAAA,OAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAoB;AAApB,MAAA,OAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACV,SAAK,QAAL,GAAgB,OAAhB;AACD;;AAED,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,GAAL,EAAgB;;;;AACd,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,QAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;;;;;;;;;;;;AACF,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,GAAL,EAAgB;;;;AACd,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,QAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;;;;;;;;;;;;AACF,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,GAAN,EAAiB;;;;AACf,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,QAAA,MAAM,CAAC,KAAP,CAAa,GAAb;AACD;;;;;;;;;;;;AACF,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,aAAN,EAA4C;;;AAC1C,QAAI,OAAJ;AACA,QAAM,QAAQ,GACZ,OAAO,aAAP,KAAyB,QAAzB,GACI,aADJ,GAEI,YAAA;AACE,UAAI,CAAC,OAAL,EAAc;AACZ,QAAA,OAAO,GAAG,aAAa,EAAvB;AACD;;AACD,aAAO,OAAP;AACD,KARP;;;AAUA,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,QAAA,MAAM,CAAC,KAAP,CAAa,QAAb;AACD;;;;;;;;;;;;AACF,GAfD;;AAiBA,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAA2B;;;;AACzB,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,QAAA,MAAM,CAAC,WAAP,CAAmB,KAAnB;AACD;;;;;;;;;;;;AACF,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;;;;AACE,WAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAkC,CAAA,EAAA,CAAA,IAAlC,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAlC,EAAoC;AAA/B,YAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,eAAO,MAAM,CAAC,WAAP,EAAP;AACD;;;;;;;;;;;;;AACD,WAAO,UAAA,CAAA,OAAA,CAAS,GAAhB;AACD,GALD;;AAMF,SAAA,WAAA;AAAC,CAtDD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LogLevel_1 = require(\"./LogLevel\");\n/**\n * MultiLogger writes logs to multiple other loggers\n */\nvar MultiLogger = /** @class */ (function () {\n    function MultiLogger() {\n        var loggers = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            loggers[_i] = arguments[_i];\n        }\n        this._loggers = loggers;\n    }\n    MultiLogger.prototype.info = function (msg) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var logger = _c.value;\n                logger.info(msg);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    MultiLogger.prototype.warn = function (msg) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var logger = _c.value;\n                logger.warn(msg);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiLogger.prototype.error = function (msg) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var logger = _c.value;\n                logger.error(msg);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiLogger.prototype.debug = function (debugFunction) {\n        var e_4, _a;\n        var message;\n        var memoized = typeof debugFunction === 'string'\n            ? debugFunction\n            : function () {\n                if (!message) {\n                    message = debugFunction();\n                }\n                return message;\n            };\n        try {\n            for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var logger = _c.value;\n                logger.debug(memoized);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n    };\n    MultiLogger.prototype.setLogLevel = function (level) {\n        var e_5, _a;\n        try {\n            for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var logger = _c.value;\n                logger.setLogLevel(level);\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n    };\n    MultiLogger.prototype.getLogLevel = function () {\n        var e_6, _a;\n        try {\n            for (var _b = __values(this._loggers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var logger = _c.value;\n                return logger.getLogLevel();\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        return LogLevel_1.default.OFF;\n    };\n    return MultiLogger;\n}());\nexports.default = MultiLogger;\n//# sourceMappingURL=MultiLogger.js.map"]},"metadata":{},"sourceType":"script"}