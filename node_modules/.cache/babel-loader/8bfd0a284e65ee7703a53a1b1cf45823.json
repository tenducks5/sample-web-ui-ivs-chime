{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\n/**\n * [[ScreenSharingMessageTypeSerializer]] Default ScreenSharingMessageTypeSerialization implementation\n */\n\n\nvar ScreenSharingMessageTypeSerializer =\n/** @class */\nfunction () {\n  function ScreenSharingMessageTypeSerializer() {}\n\n  ScreenSharingMessageTypeSerializer.prototype.serialize = function (type) {\n    if (ScreenSharingMessageTypeSerializer.fromTypeMap.has(type)) {\n      return ScreenSharingMessageTypeSerializer.fromTypeMap.get(type);\n    }\n\n    return 0;\n  };\n\n  ScreenSharingMessageTypeSerializer.prototype.deserialize = function (byte) {\n    if (ScreenSharingMessageTypeSerializer.fromNumberMap.has(byte)) {\n      return ScreenSharingMessageTypeSerializer.fromNumberMap.get(byte);\n    }\n\n    return ScreenSharingMessageType_1.default.UnknownType;\n  };\n\n  ScreenSharingMessageTypeSerializer.fromNumberMap = new Map([[0x02, ScreenSharingMessageType_1.default.KeyRequest], [0x03, ScreenSharingMessageType_1.default.StreamStart], [0x04, ScreenSharingMessageType_1.default.StreamEnd], [0x05, ScreenSharingMessageType_1.default.StreamStop], [0x06, ScreenSharingMessageType_1.default.HeartbeatRequestType], [0x07, ScreenSharingMessageType_1.default.HeartbeatResponseType], [0x0d, ScreenSharingMessageType_1.default.WebM], [0x10, ScreenSharingMessageType_1.default.PresenterSwitch], [0x15, ScreenSharingMessageType_1.default.StreamPause], [0x16, ScreenSharingMessageType_1.default.StreamUnpause]]);\n  ScreenSharingMessageTypeSerializer.fromTypeMap = new Map(Array.from(ScreenSharingMessageTypeSerializer.fromNumberMap).map(function (entry) {\n    return entry.reverse();\n  }));\n  return ScreenSharingMessageTypeSerializer;\n}();\n\nexports.default = ScreenSharingMessageTypeSerializer;","map":{"version":3,"sources":["../../src/screensharingmessageserialization/ScreenSharingMessageTypeSerializer.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,IAAA,0BAAA,GAAA,OAAA,CAAA,kDAAA,CAAA;AAGA;;AAEG;;;AACH,IAAA,kCAAA;AAAA;AAAA,YAAA;AAAA,WAAA,kCAAA,GAAA,CAkCC;;AAbC,EAAA,kCAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwC;AACtC,QAAI,kCAAkC,CAAC,WAAnC,CAA+C,GAA/C,CAAmD,IAAnD,CAAJ,EAA8D;AAC5D,aAAO,kCAAkC,CAAC,WAAnC,CAA+C,GAA/C,CAAmD,IAAnD,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GALD;;AAOA,EAAA,kCAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,IAAZ,EAAwB;AACtB,QAAI,kCAAkC,CAAC,aAAnC,CAAiD,GAAjD,CAAqD,IAArD,CAAJ,EAAgE;AAC9D,aAAO,kCAAkC,CAAC,aAAnC,CAAiD,GAAjD,CAAqD,IAArD,CAAP;AACD;;AACD,WAAO,0BAAA,CAAA,OAAA,CAAyB,WAAhC;AACD,GALD;;AA1BwB,EAAA,kCAAA,CAAA,aAAA,GAAgB,IAAI,GAAJ,CAA0C,CAChF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,UAAhC,CADgF,EAEhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,WAAhC,CAFgF,EAGhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,SAAhC,CAHgF,EAIhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,UAAhC,CAJgF,EAKhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,oBAAhC,CALgF,EAMhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,qBAAhC,CANgF,EAOhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,IAAhC,CAPgF,EAQhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,eAAhC,CARgF,EAShF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,WAAhC,CATgF,EAUhF,CAAC,IAAD,EAAO,0BAAA,CAAA,OAAA,CAAyB,aAAhC,CAVgF,CAA1C,CAAhB;AAaA,EAAA,kCAAA,CAAA,WAAA,GAAc,IAAI,GAAJ,CACpC,KAAK,CAAC,IAAN,CAAW,kCAAkC,CAAC,aAA9C,EAA6D,GAA7D,CACE,UAAA,KAAA,EAAK;AAAI,WAAA,KAAK,CAAL,OAAA,EAAA;AAAqD,GADhE,CADoC,CAAd;AAmB1B,SAAA,kCAAA;AAAC,CAlCD,EAAA;;kBAAqB,kC","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\n/**\n * [[ScreenSharingMessageTypeSerializer]] Default ScreenSharingMessageTypeSerialization implementation\n */\nvar ScreenSharingMessageTypeSerializer = /** @class */ (function () {\n    function ScreenSharingMessageTypeSerializer() {\n    }\n    ScreenSharingMessageTypeSerializer.prototype.serialize = function (type) {\n        if (ScreenSharingMessageTypeSerializer.fromTypeMap.has(type)) {\n            return ScreenSharingMessageTypeSerializer.fromTypeMap.get(type);\n        }\n        return 0;\n    };\n    ScreenSharingMessageTypeSerializer.prototype.deserialize = function (byte) {\n        if (ScreenSharingMessageTypeSerializer.fromNumberMap.has(byte)) {\n            return ScreenSharingMessageTypeSerializer.fromNumberMap.get(byte);\n        }\n        return ScreenSharingMessageType_1.default.UnknownType;\n    };\n    ScreenSharingMessageTypeSerializer.fromNumberMap = new Map([\n        [0x02, ScreenSharingMessageType_1.default.KeyRequest],\n        [0x03, ScreenSharingMessageType_1.default.StreamStart],\n        [0x04, ScreenSharingMessageType_1.default.StreamEnd],\n        [0x05, ScreenSharingMessageType_1.default.StreamStop],\n        [0x06, ScreenSharingMessageType_1.default.HeartbeatRequestType],\n        [0x07, ScreenSharingMessageType_1.default.HeartbeatResponseType],\n        [0x0d, ScreenSharingMessageType_1.default.WebM],\n        [0x10, ScreenSharingMessageType_1.default.PresenterSwitch],\n        [0x15, ScreenSharingMessageType_1.default.StreamPause],\n        [0x16, ScreenSharingMessageType_1.default.StreamUnpause],\n    ]);\n    ScreenSharingMessageTypeSerializer.fromTypeMap = new Map(Array.from(ScreenSharingMessageTypeSerializer.fromNumberMap).map(function (entry) { return entry.reverse(); }));\n    return ScreenSharingMessageTypeSerializer;\n}());\nexports.default = ScreenSharingMessageTypeSerializer;\n//# sourceMappingURL=ScreenSharingMessageTypeSerializer.js.map"]},"metadata":{},"sourceType":"script"}