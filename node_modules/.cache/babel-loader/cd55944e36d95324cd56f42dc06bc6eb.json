{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * [[RealtimeState]] stores all realtime persistent state.\n */\n\nvar RealtimeState =\n/** @class */\nfunction () {\n  function RealtimeState() {\n    /**\n     * Stores the attendee id of the current user\n     */\n    this.localAttendeeId = null;\n    /**\n     * Stores the external user id of the current user\n     */\n\n    this.localExternalUserId = null;\n    /**\n     * Callbacks to listen for attendee id changes\n     */\n\n    this.attendeeIdChangesCallbacks = [];\n    /**\n     * Stores whether the user can transition from muted to unmuted\n     */\n\n    this.canUnmute = true;\n    /**\n     * Callbacks to listen for changes to can-unmute local audio state\n     */\n\n    this.setCanUnmuteLocalAudioCallbacks = [];\n    /**\n     * Stores whether the user is presently muted\n     */\n\n    this.muted = false;\n    /**\n     * Callbacks to listen for local audio mutes and unmutes\n     */\n\n    this.muteAndUnmuteLocalAudioCallbacks = [];\n    /**\n     * Stores the active audio input\n     */\n\n    this.audioInput = null;\n    /**\n     * Stores per-attendee id volume indicator state\n     */\n\n    this.volumeIndicatorState = {};\n    /**\n     * Stores attendee id to external user id mappings\n     */\n\n    this.attendeeIdToExternalUserId = {};\n    /**\n     * Stores per-attendee id callbacks called when volume indicators change\n     */\n\n    this.volumeIndicatorCallbacks = {};\n    /**\n     * Callbacks to listen for changes to local signal strength\n     */\n\n    this.localSignalStrengthChangeCallbacks = [];\n    /**\n     * Callbacks to listen for fatal errors\n     */\n\n    this.fatalErrorCallbacks = [];\n    /**\n     * Callbacks to trigger when sending message\n     */\n\n    this.sendDataMessageCallbacks = [];\n    /**\n     * Callbacks to listen for receiving message from data channel based on given topic\n     */\n\n    this.receiveDataMessageCallbacks = new Map();\n  }\n\n  return RealtimeState;\n}();\n\nexports.default = RealtimeState;","map":{"version":3,"sources":["../../src/realtimecontroller/RealtimeState.ts"],"names":[],"mappings":"cAAA;AACA;;;;;AAMA;;AAEG;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA;AACE;;AAEG;AACH,SAAA,eAAA,GAAiC,IAAjC;AAEA;;AAEG;;AACH,SAAA,mBAAA,GAAqC,IAArC;AAEA;;AAEG;;AACH,SAAA,0BAAA,GAMe,EANf;AAQA;;AAEG;;AACH,SAAA,SAAA,GAAqB,IAArB;AAEA;;AAEG;;AACH,SAAA,+BAAA,GAAoE,EAApE;AAEA;;AAEG;;AACH,SAAA,KAAA,GAAiB,KAAjB;AAEA;;AAEG;;AACH,SAAA,gCAAA,GAAiE,EAAjE;AAEA;;AAEG;;AACH,SAAA,UAAA,GAAiC,IAAjC;AAEA;;AAEG;;AACH,SAAA,oBAAA,GAAmE,EAAnE;AAEA;;AAEG;;AACH,SAAA,0BAAA,GAA+D,EAA/D;AAEA;;AAEG;;AACH,SAAA,wBAAA,GAQI,EARJ;AAUA;;AAEG;;AACH,SAAA,kCAAA,GAA2E,EAA3E;AAEA;;AAEG;;AACH,SAAA,mBAAA,GAAkD,EAAlD;AAEA;;AAEG;;AACH,SAAA,wBAAA,GAIe,EAJf;AAMA;;AAEG;;AACH,SAAA,2BAAA,GAAmF,IAAI,GAAJ,EAAnF;AACD;;AAAD,SAAA,aAAA;AAAC,CA7FD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * [[RealtimeState]] stores all realtime persistent state.\n */\nvar RealtimeState = /** @class */ (function () {\n    function RealtimeState() {\n        /**\n         * Stores the attendee id of the current user\n         */\n        this.localAttendeeId = null;\n        /**\n         * Stores the external user id of the current user\n         */\n        this.localExternalUserId = null;\n        /**\n         * Callbacks to listen for attendee id changes\n         */\n        this.attendeeIdChangesCallbacks = [];\n        /**\n         * Stores whether the user can transition from muted to unmuted\n         */\n        this.canUnmute = true;\n        /**\n         * Callbacks to listen for changes to can-unmute local audio state\n         */\n        this.setCanUnmuteLocalAudioCallbacks = [];\n        /**\n         * Stores whether the user is presently muted\n         */\n        this.muted = false;\n        /**\n         * Callbacks to listen for local audio mutes and unmutes\n         */\n        this.muteAndUnmuteLocalAudioCallbacks = [];\n        /**\n         * Stores the active audio input\n         */\n        this.audioInput = null;\n        /**\n         * Stores per-attendee id volume indicator state\n         */\n        this.volumeIndicatorState = {};\n        /**\n         * Stores attendee id to external user id mappings\n         */\n        this.attendeeIdToExternalUserId = {};\n        /**\n         * Stores per-attendee id callbacks called when volume indicators change\n         */\n        this.volumeIndicatorCallbacks = {};\n        /**\n         * Callbacks to listen for changes to local signal strength\n         */\n        this.localSignalStrengthChangeCallbacks = [];\n        /**\n         * Callbacks to listen for fatal errors\n         */\n        this.fatalErrorCallbacks = [];\n        /**\n         * Callbacks to trigger when sending message\n         */\n        this.sendDataMessageCallbacks = [];\n        /**\n         * Callbacks to listen for receiving message from data channel based on given topic\n         */\n        this.receiveDataMessageCallbacks = new Map();\n    }\n    return RealtimeState;\n}());\nexports.default = RealtimeState;\n//# sourceMappingURL=RealtimeState.js.map"]},"metadata":{},"sourceType":"script"}