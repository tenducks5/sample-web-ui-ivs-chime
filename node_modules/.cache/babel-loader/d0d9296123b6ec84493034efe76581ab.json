{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\n\nvar DefaultReconnectController =\n/** @class */\nfunction () {\n  function DefaultReconnectController(reconnectTimeoutMs, backoffPolicy) {\n    this.reconnectTimeoutMs = reconnectTimeoutMs;\n    this.backoffPolicy = backoffPolicy;\n    this.shouldReconnect = true;\n    this.onlyRestartPeerConnection = false;\n    this.firstConnectionAttempted = false;\n    this.firstConnectionAttemptTimestampMs = 0;\n    this.lastActiveTimestampMs = Infinity;\n    this._isFirstConnection = true;\n    this.backoffTimer = null;\n    this.backoffCancel = null;\n    this.reset();\n  }\n\n  DefaultReconnectController.prototype.timeSpentReconnectingMs = function () {\n    if (!this.firstConnectionAttempted) {\n      return 0;\n    }\n\n    return Date.now() - this.firstConnectionAttemptTimestampMs;\n  };\n\n  DefaultReconnectController.prototype.hasPastReconnectDeadline = function () {\n    if (Date.now() - this.lastActiveTimestampMs >= this.reconnectTimeoutMs) {\n      return true;\n    }\n\n    return this.timeSpentReconnectingMs() >= this.reconnectTimeoutMs;\n  };\n\n  DefaultReconnectController.prototype.reset = function () {\n    this.cancel();\n    this.shouldReconnect = true;\n    this.onlyRestartPeerConnection = false;\n    this.firstConnectionAttempted = false;\n    this.firstConnectionAttemptTimestampMs = 0;\n    this.lastActiveTimestampMs = Infinity;\n    this.backoffPolicy.reset();\n  };\n\n  DefaultReconnectController.prototype.startedConnectionAttempt = function (isFirstConnection) {\n    this._isFirstConnection = isFirstConnection;\n\n    if (!this.firstConnectionAttempted) {\n      this.firstConnectionAttempted = true;\n      this.firstConnectionAttemptTimestampMs = Date.now();\n    }\n  };\n\n  DefaultReconnectController.prototype.hasStartedConnectionAttempt = function () {\n    return this.firstConnectionAttempted;\n  };\n\n  DefaultReconnectController.prototype.isFirstConnection = function () {\n    return this._isFirstConnection;\n  };\n\n  DefaultReconnectController.prototype.disableReconnect = function () {\n    this.shouldReconnect = false;\n  };\n\n  DefaultReconnectController.prototype.enableRestartPeerConnection = function () {\n    this.onlyRestartPeerConnection = true;\n  };\n\n  DefaultReconnectController.prototype.cancel = function () {\n    this.disableReconnect();\n\n    if (this.backoffTimer) {\n      this.backoffTimer.stop();\n\n      if (this.backoffCancel) {\n        this.backoffCancel();\n        this.backoffCancel = null;\n      }\n    }\n  };\n\n  DefaultReconnectController.prototype.retryWithBackoff = function (retryFunc, cancelFunc) {\n    var _this = this;\n\n    var willRetry = this.shouldReconnect && !this.hasPastReconnectDeadline();\n\n    if (willRetry) {\n      this.backoffCancel = cancelFunc;\n      this.backoffTimer = new TimeoutScheduler_1.default(this.backoffPolicy.nextBackoffAmountMs());\n      this.backoffTimer.start(function () {\n        _this.backoffCancel = null;\n        retryFunc();\n      });\n    }\n\n    return willRetry;\n  };\n\n  DefaultReconnectController.prototype.shouldOnlyRestartPeerConnection = function () {\n    return this.onlyRestartPeerConnection;\n  };\n\n  DefaultReconnectController.prototype.clone = function () {\n    return new DefaultReconnectController(this.reconnectTimeoutMs, this.backoffPolicy);\n  };\n\n  DefaultReconnectController.prototype.setLastActiveTimestampMs = function (timestampMs) {\n    this.lastActiveTimestampMs = timestampMs;\n  };\n\n  return DefaultReconnectController;\n}();\n\nexports.default = DefaultReconnectController;","map":{"version":3,"sources":["../../src/reconnectcontroller/DefaultReconnectController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\nvar DefaultReconnectController = /** @class */ (function () {\n    function DefaultReconnectController(reconnectTimeoutMs, backoffPolicy) {\n        this.reconnectTimeoutMs = reconnectTimeoutMs;\n        this.backoffPolicy = backoffPolicy;\n        this.shouldReconnect = true;\n        this.onlyRestartPeerConnection = false;\n        this.firstConnectionAttempted = false;\n        this.firstConnectionAttemptTimestampMs = 0;\n        this.lastActiveTimestampMs = Infinity;\n        this._isFirstConnection = true;\n        this.backoffTimer = null;\n        this.backoffCancel = null;\n        this.reset();\n    }\n    DefaultReconnectController.prototype.timeSpentReconnectingMs = function () {\n        if (!this.firstConnectionAttempted) {\n            return 0;\n        }\n        return Date.now() - this.firstConnectionAttemptTimestampMs;\n    };\n    DefaultReconnectController.prototype.hasPastReconnectDeadline = function () {\n        if (Date.now() - this.lastActiveTimestampMs >= this.reconnectTimeoutMs) {\n            return true;\n        }\n        return this.timeSpentReconnectingMs() >= this.reconnectTimeoutMs;\n    };\n    DefaultReconnectController.prototype.reset = function () {\n        this.cancel();\n        this.shouldReconnect = true;\n        this.onlyRestartPeerConnection = false;\n        this.firstConnectionAttempted = false;\n        this.firstConnectionAttemptTimestampMs = 0;\n        this.lastActiveTimestampMs = Infinity;\n        this.backoffPolicy.reset();\n    };\n    DefaultReconnectController.prototype.startedConnectionAttempt = function (isFirstConnection) {\n        this._isFirstConnection = isFirstConnection;\n        if (!this.firstConnectionAttempted) {\n            this.firstConnectionAttempted = true;\n            this.firstConnectionAttemptTimestampMs = Date.now();\n        }\n    };\n    DefaultReconnectController.prototype.hasStartedConnectionAttempt = function () {\n        return this.firstConnectionAttempted;\n    };\n    DefaultReconnectController.prototype.isFirstConnection = function () {\n        return this._isFirstConnection;\n    };\n    DefaultReconnectController.prototype.disableReconnect = function () {\n        this.shouldReconnect = false;\n    };\n    DefaultReconnectController.prototype.enableRestartPeerConnection = function () {\n        this.onlyRestartPeerConnection = true;\n    };\n    DefaultReconnectController.prototype.cancel = function () {\n        this.disableReconnect();\n        if (this.backoffTimer) {\n            this.backoffTimer.stop();\n            if (this.backoffCancel) {\n                this.backoffCancel();\n                this.backoffCancel = null;\n            }\n        }\n    };\n    DefaultReconnectController.prototype.retryWithBackoff = function (retryFunc, cancelFunc) {\n        var _this = this;\n        var willRetry = this.shouldReconnect && !this.hasPastReconnectDeadline();\n        if (willRetry) {\n            this.backoffCancel = cancelFunc;\n            this.backoffTimer = new TimeoutScheduler_1.default(this.backoffPolicy.nextBackoffAmountMs());\n            this.backoffTimer.start(function () {\n                _this.backoffCancel = null;\n                retryFunc();\n            });\n        }\n        return willRetry;\n    };\n    DefaultReconnectController.prototype.shouldOnlyRestartPeerConnection = function () {\n        return this.onlyRestartPeerConnection;\n    };\n    DefaultReconnectController.prototype.clone = function () {\n        return new DefaultReconnectController(this.reconnectTimeoutMs, this.backoffPolicy);\n    };\n    DefaultReconnectController.prototype.setLastActiveTimestampMs = function (timestampMs) {\n        this.lastActiveTimestampMs = timestampMs;\n    };\n    return DefaultReconnectController;\n}());\nexports.default = DefaultReconnectController;\n//# sourceMappingURL=DefaultReconnectController.js.map"]},"metadata":{},"sourceType":"script"}