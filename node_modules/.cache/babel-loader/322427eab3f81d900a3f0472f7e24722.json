{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nvar ConnectionHealthPolicyConfiguration_1 = require(\"../connectionhealthpolicy/ConnectionHealthPolicyConfiguration\");\n\nvar AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\n\nvar NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\n\nvar MeetingSessionCredentials_1 = require(\"./MeetingSessionCredentials\");\n\nvar MeetingSessionURLs_1 = require(\"./MeetingSessionURLs\");\n/**\n * [[MeetingSessionConfiguration]] contains the information necessary to start\n * a session.\n */\n\n\nvar MeetingSessionConfiguration =\n/** @class */\nfunction () {\n  /**\n   * Constructs a MeetingSessionConfiguration optionally with a chime:CreateMeeting and\n   * chime:CreateAttendee response. You can pass in either a JSON object containing the\n   * responses, or a JSON object containing the information in the Meeting and Attendee\n   * root-level fields. Examples:\n   *\n   * ```\n   * const configuration = new MeetingSessionConfiguration({\n   *   \"Meeting\": {\n   *      \"MeetingId\": \"...\",\n   *      \"MediaPlacement\": {\n   *        \"AudioHostUrl\": \"...\",\n   *        \"ScreenDataUrl\": \"...\",\n   *        \"ScreenSharingUrl\": \"...\",\n   *        \"ScreenViewingUrl\": \"...\",\n   *        \"SignalingUrl\": \"...\",\n   *        \"TurnControlUrl\": \"...\"\n   *      }\n   *    }\n   *   }\n   * }, {\n   *   \"Attendee\": {\n   *     \"ExternalUserId\": \"...\",\n   *     \"AttendeeId\": \"...\",\n   *     \"JoinToken\": \"...\"\n   *   }\n   * });\n   * ```\n   *\n   * ```\n   * const configuration = new MeetingSessionConfiguration({\n   *   \"MeetingId\": \"...\",\n   *   \"MediaPlacement\": {\n   *     \"AudioHostUrl\": \"...\",\n   *     \"ScreenDataUrl\": \"...\",\n   *     \"ScreenSharingUrl\": \"...\",\n   *     \"ScreenViewingUrl\": \"...\",\n   *     \"SignalingUrl\": \"...\",\n   *     \"TurnControlUrl\": \"...\"\n   *   }\n   * }, {\n   *   \"ExternalUserId\": \"...\",\n   *   \"AttendeeId\": \"...\",\n   *   \"JoinToken\": \"...\"\n   * });\n   * ```\n   */\n  function MeetingSessionConfiguration(createMeetingResponse, createAttendeeResponse) {\n    /**\n     * The id of the meeting the session is joining.\n     */\n    this.meetingId = null;\n    /**\n     * The external meeting id of the meeting the session is joining.\n     */\n\n    this.externalMeetingId = null;\n    /**\n     * The credentials used to authenticate the session.\n     */\n\n    this.credentials = null;\n    /**\n     * The URLs the session uses to reach the meeting service.\n     */\n\n    this.urls = null;\n    /**\n     * Maximum amount of time in milliseconds to allow for connecting.\n     */\n\n    this.connectionTimeoutMs = 15000;\n    /**\n     * Maximum amount of time in milliseconds to allow for a screen sharing connection.\n     */\n\n    this.screenSharingTimeoutMs = 5000;\n    /**\n     * Maximum amount of time in milliseconds to allow for a screen viewing connection.\n     */\n\n    this.screenViewingTimeoutMs = 5000;\n    /**\n     * Maximum amount of time in milliseconds to wait for the current attendee to be present\n     * after initial connection.\n     */\n\n    this.attendeePresenceTimeoutMs = 0;\n    /**\n     * Screen sharing session options.\n     */\n\n    this.screenSharingSessionOptions = {};\n    /**\n     * Configuration for connection health policies: reconnection, unusable audio warning connection,\n     * and signal strength bars connection.\n     */\n\n    this.connectionHealthPolicyConfiguration = new ConnectionHealthPolicyConfiguration_1.default();\n    /**\n     * Feature flag to enable WebAudio processing\n     */\n\n    this.enableWebAudio = false;\n    /**\n     * Feature flag to enable Chromium-based browsers\n     */\n\n    this.enableUnifiedPlanForChromiumBasedBrowsers = true;\n    /**\n     * Feature flag to enable Simulcast\n     */\n\n    this.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;\n    /**\n     * Video downlink bandwidth policy to determine which remote videos\n     * are subscribed to.\n     */\n\n    this.videoDownlinkBandwidthPolicy = null;\n    /**\n     * Video uplink bandwidth policy to determine the bandwidth constraints\n     * of the local video.\n     */\n\n    this.videoUplinkBandwidthPolicy = null;\n\n    if (createMeetingResponse) {\n      createMeetingResponse = this.toLowerCasePropertyNames(createMeetingResponse);\n\n      if (createMeetingResponse.meeting) {\n        createMeetingResponse = createMeetingResponse.meeting;\n      }\n\n      this.meetingId = createMeetingResponse.meetingid;\n      this.externalMeetingId = createMeetingResponse.externalmeetingid;\n      this.urls = new MeetingSessionURLs_1.default();\n      this.urls.audioHostURL = createMeetingResponse.mediaplacement.audiohosturl;\n      this.urls.screenDataURL = createMeetingResponse.mediaplacement.screendataurl;\n      this.urls.screenSharingURL = createMeetingResponse.mediaplacement.screensharingurl;\n      this.urls.screenViewingURL = createMeetingResponse.mediaplacement.screenviewingurl;\n      this.urls.signalingURL = createMeetingResponse.mediaplacement.signalingurl;\n      this.urls.turnControlURL = createMeetingResponse.mediaplacement.turncontrolurl;\n    }\n\n    if (createAttendeeResponse) {\n      createAttendeeResponse = this.toLowerCasePropertyNames(createAttendeeResponse);\n\n      if (createAttendeeResponse.attendee) {\n        createAttendeeResponse = createAttendeeResponse.attendee;\n      }\n\n      this.credentials = new MeetingSessionCredentials_1.default();\n      this.credentials.attendeeId = createAttendeeResponse.attendeeid;\n      this.credentials.externalUserId = createAttendeeResponse.externaluserid;\n      this.credentials.joinToken = createAttendeeResponse.jointoken;\n    }\n\n    if (new DefaultBrowserBehavior_1.default().screenShareSendsOnlyKeyframes()) {\n      this.screenSharingSessionOptions = {\n        bitRate: 384000\n      };\n    } // simulcast feature flag will override the following policies when DefaultAudioVideoController is created\n\n\n    this.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.credentials ? this.credentials.attendeeId : null);\n    this.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.credentials ? this.credentials.attendeeId : null);\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  MeetingSessionConfiguration.prototype.toLowerCasePropertyNames = function (input) {\n    var _this = this;\n\n    if (input === null) {\n      return null;\n    } else if (typeof input !== 'object') {\n      return input;\n    } else if (Array.isArray(input)) {\n      return input.map(this.toLowerCasePropertyNames);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    return Object.keys(input).reduce(function (result, key) {\n      var value = input[key];\n      var newValue = typeof value === 'object' ? _this.toLowerCasePropertyNames(value) : value;\n      result[key.toLowerCase()] = newValue;\n      return result;\n    }, {});\n  };\n\n  return MeetingSessionConfiguration;\n}();\n\nexports.default = MeetingSessionConfiguration;","map":{"version":3,"sources":["../../src/meetingsession/MeetingSessionConfiguration.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\nvar ConnectionHealthPolicyConfiguration_1 = require(\"../connectionhealthpolicy/ConnectionHealthPolicyConfiguration\");\nvar AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\nvar NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\nvar MeetingSessionCredentials_1 = require(\"./MeetingSessionCredentials\");\nvar MeetingSessionURLs_1 = require(\"./MeetingSessionURLs\");\n/**\n * [[MeetingSessionConfiguration]] contains the information necessary to start\n * a session.\n */\nvar MeetingSessionConfiguration = /** @class */ (function () {\n    /**\n     * Constructs a MeetingSessionConfiguration optionally with a chime:CreateMeeting and\n     * chime:CreateAttendee response. You can pass in either a JSON object containing the\n     * responses, or a JSON object containing the information in the Meeting and Attendee\n     * root-level fields. Examples:\n     *\n     * ```\n     * const configuration = new MeetingSessionConfiguration({\n     *   \"Meeting\": {\n     *      \"MeetingId\": \"...\",\n     *      \"MediaPlacement\": {\n     *        \"AudioHostUrl\": \"...\",\n     *        \"ScreenDataUrl\": \"...\",\n     *        \"ScreenSharingUrl\": \"...\",\n     *        \"ScreenViewingUrl\": \"...\",\n     *        \"SignalingUrl\": \"...\",\n     *        \"TurnControlUrl\": \"...\"\n     *      }\n     *    }\n     *   }\n     * }, {\n     *   \"Attendee\": {\n     *     \"ExternalUserId\": \"...\",\n     *     \"AttendeeId\": \"...\",\n     *     \"JoinToken\": \"...\"\n     *   }\n     * });\n     * ```\n     *\n     * ```\n     * const configuration = new MeetingSessionConfiguration({\n     *   \"MeetingId\": \"...\",\n     *   \"MediaPlacement\": {\n     *     \"AudioHostUrl\": \"...\",\n     *     \"ScreenDataUrl\": \"...\",\n     *     \"ScreenSharingUrl\": \"...\",\n     *     \"ScreenViewingUrl\": \"...\",\n     *     \"SignalingUrl\": \"...\",\n     *     \"TurnControlUrl\": \"...\"\n     *   }\n     * }, {\n     *   \"ExternalUserId\": \"...\",\n     *   \"AttendeeId\": \"...\",\n     *   \"JoinToken\": \"...\"\n     * });\n     * ```\n     */\n    function MeetingSessionConfiguration(createMeetingResponse, createAttendeeResponse) {\n        /**\n         * The id of the meeting the session is joining.\n         */\n        this.meetingId = null;\n        /**\n         * The external meeting id of the meeting the session is joining.\n         */\n        this.externalMeetingId = null;\n        /**\n         * The credentials used to authenticate the session.\n         */\n        this.credentials = null;\n        /**\n         * The URLs the session uses to reach the meeting service.\n         */\n        this.urls = null;\n        /**\n         * Maximum amount of time in milliseconds to allow for connecting.\n         */\n        this.connectionTimeoutMs = 15000;\n        /**\n         * Maximum amount of time in milliseconds to allow for a screen sharing connection.\n         */\n        this.screenSharingTimeoutMs = 5000;\n        /**\n         * Maximum amount of time in milliseconds to allow for a screen viewing connection.\n         */\n        this.screenViewingTimeoutMs = 5000;\n        /**\n         * Maximum amount of time in milliseconds to wait for the current attendee to be present\n         * after initial connection.\n         */\n        this.attendeePresenceTimeoutMs = 0;\n        /**\n         * Screen sharing session options.\n         */\n        this.screenSharingSessionOptions = {};\n        /**\n         * Configuration for connection health policies: reconnection, unusable audio warning connection,\n         * and signal strength bars connection.\n         */\n        this.connectionHealthPolicyConfiguration = new ConnectionHealthPolicyConfiguration_1.default();\n        /**\n         * Feature flag to enable WebAudio processing\n         */\n        this.enableWebAudio = false;\n        /**\n         * Feature flag to enable Chromium-based browsers\n         */\n        this.enableUnifiedPlanForChromiumBasedBrowsers = true;\n        /**\n         * Feature flag to enable Simulcast\n         */\n        this.enableSimulcastForUnifiedPlanChromiumBasedBrowsers = false;\n        /**\n         * Video downlink bandwidth policy to determine which remote videos\n         * are subscribed to.\n         */\n        this.videoDownlinkBandwidthPolicy = null;\n        /**\n         * Video uplink bandwidth policy to determine the bandwidth constraints\n         * of the local video.\n         */\n        this.videoUplinkBandwidthPolicy = null;\n        if (createMeetingResponse) {\n            createMeetingResponse = this.toLowerCasePropertyNames(createMeetingResponse);\n            if (createMeetingResponse.meeting) {\n                createMeetingResponse = createMeetingResponse.meeting;\n            }\n            this.meetingId = createMeetingResponse.meetingid;\n            this.externalMeetingId = createMeetingResponse.externalmeetingid;\n            this.urls = new MeetingSessionURLs_1.default();\n            this.urls.audioHostURL = createMeetingResponse.mediaplacement.audiohosturl;\n            this.urls.screenDataURL = createMeetingResponse.mediaplacement.screendataurl;\n            this.urls.screenSharingURL = createMeetingResponse.mediaplacement.screensharingurl;\n            this.urls.screenViewingURL = createMeetingResponse.mediaplacement.screenviewingurl;\n            this.urls.signalingURL = createMeetingResponse.mediaplacement.signalingurl;\n            this.urls.turnControlURL = createMeetingResponse.mediaplacement.turncontrolurl;\n        }\n        if (createAttendeeResponse) {\n            createAttendeeResponse = this.toLowerCasePropertyNames(createAttendeeResponse);\n            if (createAttendeeResponse.attendee) {\n                createAttendeeResponse = createAttendeeResponse.attendee;\n            }\n            this.credentials = new MeetingSessionCredentials_1.default();\n            this.credentials.attendeeId = createAttendeeResponse.attendeeid;\n            this.credentials.externalUserId = createAttendeeResponse.externaluserid;\n            this.credentials.joinToken = createAttendeeResponse.jointoken;\n        }\n        if (new DefaultBrowserBehavior_1.default().screenShareSendsOnlyKeyframes()) {\n            this.screenSharingSessionOptions = { bitRate: 384000 };\n        }\n        // simulcast feature flag will override the following policies when DefaultAudioVideoController is created\n        this.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.credentials ? this.credentials.attendeeId : null);\n        this.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.credentials ? this.credentials.attendeeId : null);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    MeetingSessionConfiguration.prototype.toLowerCasePropertyNames = function (input) {\n        var _this = this;\n        if (input === null) {\n            return null;\n        }\n        else if (typeof input !== 'object') {\n            return input;\n        }\n        else if (Array.isArray(input)) {\n            return input.map(this.toLowerCasePropertyNames);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return Object.keys(input).reduce(function (result, key) {\n            var value = input[key];\n            var newValue = typeof value === 'object' ? _this.toLowerCasePropertyNames(value) : value;\n            result[key.toLowerCase()] = newValue;\n            return result;\n        }, {});\n    };\n    return MeetingSessionConfiguration;\n}());\nexports.default = MeetingSessionConfiguration;\n//# sourceMappingURL=MeetingSessionConfiguration.js.map"]},"metadata":{},"sourceType":"script"}