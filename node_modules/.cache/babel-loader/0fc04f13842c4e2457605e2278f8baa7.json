{"ast":null,"code":"var _jsxFileName = \"/Users/sykang/Documents/Git/amazon-ivs-chime-web-demo/web-ui/src/components/chimeWeb/RemoteVideoGroup.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport RemoteVideo from './RemoteVideo';\nimport * as config from '../../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_REMOTE_VIDEOS = config.CHIME_ROOM_MAX_ATTENDEE;\n\nclass RemoteVideoGroup extends Component {\n  constructor() {\n    super();\n    this.state = {\n      rosterChanged: false,\n      roster: []\n    };\n\n    this.findRosterSlot = attendeeId => {\n      let index;\n\n      for (index = 0; index < this.state.roster.length; index++) {\n        if (this.state.roster[index].attendeeId === attendeeId) {\n          return index;\n        }\n      }\n\n      for (index = 0; index < this.state.roster.length; index++) {\n        if (!this.state.roster[index].attendeeId) {\n          return index;\n        }\n      }\n\n      return 0;\n    };\n\n    this.rosterCallback = newRoster => {\n      if (Object.keys(newRoster).length > 2) {\n        if (config.DEBUG) console.log('More than 2');\n      }\n\n      if (Object.keys(newRoster).length < Object.keys(this.previousRoster).length) {\n        if (config.DEBUG) console.log('Attendee(s) left');\n        const differ = Object.keys(this.previousRoster).filter(k => this.previousRoster[k] !== newRoster[k]);\n        if (config.DEBUG) console.log(differ);\n\n        if (differ.length) {\n          let i;\n\n          for (i in differ) {\n            const index = this.findRosterSlot(differ[i]);\n            const roster = this.state.roster;\n            roster[index] = {\n              videoElement: roster[index].videoElement\n            };\n            this.setState({\n              roster\n            });\n          }\n        }\n      }\n\n      this.previousRoster = Object.assign({}, newRoster);\n      let attendeeId;\n\n      for (attendeeId in newRoster) {\n        // Exclude self\n        if (attendeeId === this.props.joinInfo.Attendee.AttendeeId) {\n          continue;\n        } // exclude empty name\n\n\n        if (!newRoster[attendeeId].name) {\n          continue;\n        }\n\n        const index = this.findRosterSlot(attendeeId);\n        const roster = this.state.roster;\n        const attendee = { ...roster[index],\n          attendeeId,\n          ...newRoster[attendeeId]\n        };\n        roster[index] = attendee;\n        this.setState({\n          roster\n        });\n      }\n    };\n\n    this.videoTileDidUpdateCallback = tileState => {\n      if (!tileState.boundAttendeeId || tileState.localTile || tileState.isContent || !tileState.tileId) {\n        return;\n      }\n\n      let index = this.findRosterSlot(tileState.boundAttendeeId);\n      const roster = this.state.roster;\n      const attendee = { ...roster[index],\n        videoEnabled: tileState.active,\n        attendeeId: tileState.boundAttendeeId,\n        tileId: tileState.tileId\n      };\n      roster[index] = attendee;\n      this.setState({\n        roster\n      });\n      setTimeout(() => {\n        if (config.DEBUG) console.log(roster[index]);\n        const videoElement = document.getElementById(`video_${tileState.boundAttendeeId}`);\n\n        if (videoElement) {\n          this.props.chime.audioVideo.bindVideoElement(tileState.tileId, videoElement);\n        }\n      }, 1000);\n    };\n\n    this.videoTileWasRemovedCallback = tileId => {\n      let roster = this.state.roster; // Find the removed tileId in the roster and mark the video as disabled.\n      // eslint-disable-next-line\n\n      roster.find((o, i) => {\n        if (o.tileId === tileId) {\n          roster[i].videoEnabled = false;\n          this.setState({\n            roster\n          });\n          if (config.DEBUG) console.log(`Tile was removed ${tileId}`);\n        }\n      });\n    };\n\n    this.previousRoster = {};\n  }\n\n  componentDidMount() {\n    const roster = []; // eslint-disable-next-line\n\n    Array.from(Array(MAX_REMOTE_VIDEOS).keys()).map((key, index) => {\n      roster[index] = {\n        videoElement: /*#__PURE__*/React.createRef()\n      };\n    });\n    this.setState({\n      roster\n    });\n    this.props.chime.subscribeToRosterUpdate(this.rosterCallback);\n    this.props.chime.audioVideo.addObserver({\n      videoTileDidUpdate: this.videoTileDidUpdateCallback,\n      videoTileWasRemoved: this.videoTileWasRemovedCallback\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.chime.unsubscribeFromRosterUpdate(this.rosterCallback);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: this.state.roster.map((attendee, index) => {\n        return /*#__PURE__*/_jsxDEV(RemoteVideo, {\n          chime: this.props.chime,\n          attendeeId: attendee.attendeeId,\n          videoEnabled: attendee.videoEnabled,\n          name: attendee.name,\n          muted: attendee.muted,\n          videoElement: attendee.videoElement\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nRemoteVideoGroup.propTypes = {\n  chime: PropTypes.object,\n  joinInfo: PropTypes.object\n};\nexport default RemoteVideoGroup;","map":{"version":3,"sources":["/Users/sykang/Documents/Git/amazon-ivs-chime-web-demo/web-ui/src/components/chimeWeb/RemoteVideoGroup.jsx"],"names":["React","Component","PropTypes","RemoteVideo","config","MAX_REMOTE_VIDEOS","CHIME_ROOM_MAX_ATTENDEE","RemoteVideoGroup","constructor","state","rosterChanged","roster","findRosterSlot","attendeeId","index","length","rosterCallback","newRoster","Object","keys","DEBUG","console","log","previousRoster","differ","filter","k","i","videoElement","setState","assign","props","joinInfo","Attendee","AttendeeId","name","attendee","videoTileDidUpdateCallback","tileState","boundAttendeeId","localTile","isContent","tileId","videoEnabled","active","setTimeout","document","getElementById","chime","audioVideo","bindVideoElement","videoTileWasRemovedCallback","find","o","componentDidMount","Array","from","map","key","createRef","subscribeToRosterUpdate","addObserver","videoTileDidUpdate","videoTileWasRemoved","componentWillUnmount","unsubscribeFromRosterUpdate","render","muted","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport RemoteVideo from './RemoteVideo';\nimport * as config from '../../config';\n\nconst MAX_REMOTE_VIDEOS = config.CHIME_ROOM_MAX_ATTENDEE;\n\nclass RemoteVideoGroup extends Component {\n\n  state = {\n    rosterChanged: false,\n    roster: []\n  }\n\n  constructor() {\n    super();\n    this.previousRoster = {};\n  }\n\n  findRosterSlot = (attendeeId) => {\n    let index;\n    for (index = 0; index < this.state.roster.length; index++) {\n      if (this.state.roster[index].attendeeId === attendeeId) {\n        return index;\n      }\n    }\n    for (index = 0; index < this.state.roster.length; index++) {\n      if (!this.state.roster[index].attendeeId) {\n        return index;\n      }\n    }\n    return 0;\n  }\n\n  rosterCallback = (newRoster) => {\n\n    if (Object.keys(newRoster).length > 2) {\n      if (config.DEBUG) console.log('More than 2');\n    }\n\n    if (Object.keys(newRoster).length < Object.keys(this.previousRoster).length) {\n      if (config.DEBUG) console.log('Attendee(s) left');\n      const differ = Object.keys(this.previousRoster).filter(k => this.previousRoster[k] !== newRoster[k]);\n      if (config.DEBUG) console.log(differ);\n\n      if (differ.length) {\n        let i;\n        for (i in differ) {\n          const index = this.findRosterSlot(differ[i]);\n          const roster = this.state.roster;\n          roster[index] = {\n            videoElement: roster[index].videoElement\n          }\n          this.setState({ roster });\n        }\n      }\n    }\n\n    this.previousRoster = Object.assign({}, newRoster);\n\n    let attendeeId;\n    for (attendeeId in newRoster) {\n\n      // Exclude self\n      if (attendeeId === this.props.joinInfo.Attendee.AttendeeId) {\n        continue;\n      }\n\n      // exclude empty name\n      if (!newRoster[attendeeId].name) {\n        continue;\n      }\n\n      const index = this.findRosterSlot(attendeeId);\n      const roster = this.state.roster;\n      const attendee = {\n        ...roster[index],\n        attendeeId,\n        ...newRoster[attendeeId]\n      };\n\n      roster[index] = attendee;\n      this.setState({ roster });\n    }\n  };\n\n  videoTileDidUpdateCallback = (tileState) => {\n    if (\n      !tileState.boundAttendeeId ||\n      tileState.localTile ||\n      tileState.isContent ||\n      !tileState.tileId\n    ) {\n      return;\n    }\n\n    let index = this.findRosterSlot(tileState.boundAttendeeId);\n    const roster = this.state.roster;\n    const attendee = {\n      ...roster[index],\n      videoEnabled: tileState.active,\n      attendeeId: tileState.boundAttendeeId,\n      tileId: tileState.tileId\n    };\n    roster[index] = attendee;\n    this.setState({ roster });\n\n    setTimeout(() => {\n      if (config.DEBUG) console.log(roster[index]);\n      const videoElement = document.getElementById(`video_${tileState.boundAttendeeId}`);\n      if (videoElement) {\n        this.props.chime.audioVideo.bindVideoElement(\n          tileState.tileId,\n          videoElement\n        );\n      }\n    }, 1000);\n  };\n\n  videoTileWasRemovedCallback = (tileId) => {\n    let roster = this.state.roster;\n\n    // Find the removed tileId in the roster and mark the video as disabled.\n    // eslint-disable-next-line\n    roster.find((o, i) => {\n      if (o.tileId === tileId) {\n        roster[i].videoEnabled = false;\n        this.setState({ roster });\n        if (config.DEBUG) console.log(`Tile was removed ${tileId}`);\n      }\n    });\n  }\n\n  componentDidMount() {\n    const roster = [];\n    // eslint-disable-next-line\n    Array.from(Array(MAX_REMOTE_VIDEOS).keys()).map((key, index) => {\n      roster[index] = {\n        videoElement: React.createRef()\n      };\n    });\n    this.setState({ roster });\n\n    this.props.chime.subscribeToRosterUpdate(this.rosterCallback);\n\n    this.props.chime.audioVideo.addObserver({\n      videoTileDidUpdate: this.videoTileDidUpdateCallback,\n      videoTileWasRemoved: this.videoTileWasRemovedCallback,\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.chime.unsubscribeFromRosterUpdate(this.rosterCallback);\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        {this.state.roster.map((attendee, index) => {\n          return (\n            <RemoteVideo\n              chime={this.props.chime}\n              key={index}\n              attendeeId={attendee.attendeeId}\n              videoEnabled={attendee.videoEnabled}\n              name={attendee.name}\n              muted={attendee.muted}\n              videoElement={attendee.videoElement}\n            />\n          );\n        })}\n      </React.Fragment>\n    )\n  }\n}\n\nRemoteVideoGroup.propTypes = {\n  chime: PropTypes.object,\n  joinInfo: PropTypes.object\n};\n\nexport default RemoteVideoGroup;\n"]},"metadata":{},"sourceType":"module"}