{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DefaultActiveSpeakerDetector_1 = require(\"../activespeakerdetector/DefaultActiveSpeakerDetector\");\n\nvar DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\n\nvar DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nvar ConnectionHealthData_1 = require(\"../connectionhealthpolicy/ConnectionHealthData\");\n\nvar SignalingAndMetricsConnectionMonitor_1 = require(\"../connectionmonitor/SignalingAndMetricsConnectionMonitor\");\n\nvar DefaultEventController_1 = require(\"../eventcontroller/DefaultEventController\");\n\nvar Maybe_1 = require(\"../maybe/Maybe\");\n\nvar MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nvar MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nvar MeetingSessionVideoAvailability_1 = require(\"../meetingsession/MeetingSessionVideoAvailability\");\n\nvar DefaultPingPong_1 = require(\"../pingpong/DefaultPingPong\");\n\nvar DefaultRealtimeController_1 = require(\"../realtimecontroller/DefaultRealtimeController\");\n\nvar AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nvar DefaultSessionStateController_1 = require(\"../sessionstatecontroller/DefaultSessionStateController\");\n\nvar SessionStateControllerAction_1 = require(\"../sessionstatecontroller/SessionStateControllerAction\");\n\nvar SessionStateControllerState_1 = require(\"../sessionstatecontroller/SessionStateControllerState\");\n\nvar SessionStateControllerTransitionResult_1 = require(\"../sessionstatecontroller/SessionStateControllerTransitionResult\");\n\nvar DefaultSignalingClient_1 = require(\"../signalingclient/DefaultSignalingClient\");\n\nvar SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nvar DefaultStatsCollector_1 = require(\"../statscollector/DefaultStatsCollector\");\n\nvar AttachMediaInputTask_1 = require(\"../task/AttachMediaInputTask\");\n\nvar CleanRestartedSessionTask_1 = require(\"../task/CleanRestartedSessionTask\");\n\nvar CleanStoppedSessionTask_1 = require(\"../task/CleanStoppedSessionTask\");\n\nvar CreatePeerConnectionTask_1 = require(\"../task/CreatePeerConnectionTask\");\n\nvar CreateSDPTask_1 = require(\"../task/CreateSDPTask\");\n\nvar FinishGatheringICECandidatesTask_1 = require(\"../task/FinishGatheringICECandidatesTask\");\n\nvar JoinAndReceiveIndexTask_1 = require(\"../task/JoinAndReceiveIndexTask\");\n\nvar LeaveAndReceiveLeaveAckTask_1 = require(\"../task/LeaveAndReceiveLeaveAckTask\");\n\nvar ListenForVolumeIndicatorsTask_1 = require(\"../task/ListenForVolumeIndicatorsTask\");\n\nvar MonitorTask_1 = require(\"../task/MonitorTask\");\n\nvar OpenSignalingConnectionTask_1 = require(\"../task/OpenSignalingConnectionTask\");\n\nvar ParallelGroupTask_1 = require(\"../task/ParallelGroupTask\");\n\nvar ReceiveAudioInputTask_1 = require(\"../task/ReceiveAudioInputTask\");\n\nvar ReceiveTURNCredentialsTask_1 = require(\"../task/ReceiveTURNCredentialsTask\");\n\nvar ReceiveVideoInputTask_1 = require(\"../task/ReceiveVideoInputTask\");\n\nvar ReceiveVideoStreamIndexTask_1 = require(\"../task/ReceiveVideoStreamIndexTask\");\n\nvar SendAndReceiveDataMessagesTask_1 = require(\"../task/SendAndReceiveDataMessagesTask\");\n\nvar SerialGroupTask_1 = require(\"../task/SerialGroupTask\");\n\nvar SetLocalDescriptionTask_1 = require(\"../task/SetLocalDescriptionTask\");\n\nvar SetRemoteDescriptionTask_1 = require(\"../task/SetRemoteDescriptionTask\");\n\nvar SubscribeAndReceiveSubscribeAckTask_1 = require(\"../task/SubscribeAndReceiveSubscribeAckTask\");\n\nvar TimeoutTask_1 = require(\"../task/TimeoutTask\");\n\nvar WaitForAttendeePresenceTask_1 = require(\"../task/WaitForAttendeePresenceTask\");\n\nvar DefaultTransceiverController_1 = require(\"../transceivercontroller/DefaultTransceiverController\");\n\nvar SimulcastTransceiverController_1 = require(\"../transceivercontroller/SimulcastTransceiverController\");\n\nvar DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n\nvar AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\n\nvar VideoAdaptiveProbePolicy_1 = require(\"../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy\");\n\nvar DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\n\nvar DefaultVideoStreamIndex_1 = require(\"../videostreamindex/DefaultVideoStreamIndex\");\n\nvar SimulcastVideoStreamIndex_1 = require(\"../videostreamindex/SimulcastVideoStreamIndex\");\n\nvar DefaultVideoTileController_1 = require(\"../videotilecontroller/DefaultVideoTileController\");\n\nvar DefaultVideoTileFactory_1 = require(\"../videotilefactory/DefaultVideoTileFactory\");\n\nvar DefaultSimulcastUplinkPolicy_1 = require(\"../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy\");\n\nvar NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\n\nvar DefaultVolumeIndicatorAdapter_1 = require(\"../volumeindicatoradapter/DefaultVolumeIndicatorAdapter\");\n\nvar AudioVideoControllerState_1 = require(\"./AudioVideoControllerState\");\n\nvar DefaultAudioVideoController =\n/** @class */\nfunction () {\n  function DefaultAudioVideoController(configuration, logger, webSocketAdapter, mediaStreamBroker, reconnectController) {\n    this.connectionHealthData = new ConnectionHealthData_1.default();\n    this.observerQueue = new Set();\n    this.meetingSessionContext = new AudioVideoControllerState_1.default();\n    this.enableSimulcast = false;\n    this.totalRetryCount = 0;\n    this._logger = logger;\n    this.sessionStateController = new DefaultSessionStateController_1.default(this._logger);\n    this._configuration = configuration;\n    this.enableSimulcast = configuration.enableUnifiedPlanForChromiumBasedBrowsers && configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers && new DefaultBrowserBehavior_1.default().hasChromiumWebRTC();\n    this._webSocketAdapter = webSocketAdapter;\n    this._realtimeController = new DefaultRealtimeController_1.default();\n\n    this._realtimeController.realtimeSetLocalAttendeeId(configuration.credentials.attendeeId, configuration.credentials.externalUserId);\n\n    this._activeSpeakerDetector = new DefaultActiveSpeakerDetector_1.default(this._realtimeController, configuration.credentials.attendeeId, this.handleHasBandwidthPriority.bind(this));\n    this._mediaStreamBroker = mediaStreamBroker;\n    this._reconnectController = reconnectController;\n    this._videoTileController = new DefaultVideoTileController_1.default(new DefaultVideoTileFactory_1.default(), this, this._logger);\n    this._audioMixController = new DefaultAudioMixController_1.default();\n    this.meetingSessionContext.logger = this._logger;\n    this._eventController = new DefaultEventController_1.default(this);\n  }\n\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"configuration\", {\n    get: function get() {\n      return this._configuration;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"realtimeController\", {\n    get: function get() {\n      return this._realtimeController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"activeSpeakerDetector\", {\n    get: function get() {\n      return this._activeSpeakerDetector;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"videoTileController\", {\n    get: function get() {\n      return this._videoTileController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"audioMixController\", {\n    get: function get() {\n      return this._audioMixController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"eventController\", {\n    get: function get() {\n      return this._eventController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"logger\", {\n    get: function get() {\n      return this._logger;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"rtcPeerConnection\", {\n    get: function get() {\n      return this.meetingSessionContext && this.meetingSessionContext.peer || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultAudioVideoController.prototype, \"mediaStreamBroker\", {\n    get: function get() {\n      return this._mediaStreamBroker;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DefaultAudioVideoController.prototype.getRTCPeerConnectionStats = function (selector) {\n    if (!this.rtcPeerConnection) {\n      return null;\n    }\n\n    return this.rtcPeerConnection.getStats(selector);\n  };\n\n  DefaultAudioVideoController.prototype.addObserver = function (observer) {\n    this.logger.info('adding meeting observer');\n    this.observerQueue.add(observer);\n  };\n\n  DefaultAudioVideoController.prototype.removeObserver = function (observer) {\n    this.logger.info('removing meeting observer');\n    this.observerQueue.delete(observer);\n  };\n\n  DefaultAudioVideoController.prototype.forEachObserver = function (observerFunc) {\n    var e_1, _a;\n\n    var _this = this;\n\n    var _loop_1 = function _loop_1(observer) {\n      new AsyncScheduler_1.default().start(function () {\n        if (_this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    };\n\n    try {\n      for (var _b = __values(this.observerQueue), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var observer = _c.value;\n\n        _loop_1(observer);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  DefaultAudioVideoController.prototype.start = function () {\n    var _this = this;\n\n    this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, function () {\n      _this.actionConnect(false);\n    });\n  };\n\n  DefaultAudioVideoController.prototype.actionConnect = function (reconnecting) {\n    return __awaiter(this, void 0, void 0, function () {\n      var simulcastPolicy, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.connectionHealthData.reset();\n            this.meetingSessionContext = new AudioVideoControllerState_1.default();\n            this.meetingSessionContext.logger = this.logger;\n            this.meetingSessionContext.eventController = this.eventController;\n            this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior_1.default({\n              enableUnifiedPlanForChromiumBasedBrowsers: this.configuration.enableUnifiedPlanForChromiumBasedBrowsers\n            });\n            this.meetingSessionContext.meetingSessionConfiguration = this.configuration;\n            this.meetingSessionContext.signalingClient = new DefaultSignalingClient_1.default(this._webSocketAdapter, this.logger);\n            this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;\n            this.meetingSessionContext.realtimeController = this._realtimeController;\n            this.meetingSessionContext.audioMixController = this._audioMixController;\n            this.meetingSessionContext.audioVideoController = this;\n\n            if (this.enableSimulcast) {\n              this.meetingSessionContext.transceiverController = new SimulcastTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n            } else {\n              this.meetingSessionContext.transceiverController = new DefaultTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n            }\n\n            this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter_1.default(this.logger, this._realtimeController, DefaultAudioVideoController.MIN_VOLUME_DECIBELS, DefaultAudioVideoController.MAX_VOLUME_DECIBELS);\n            this.meetingSessionContext.videoTileController = this._videoTileController;\n            this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;\n            this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;\n            this.meetingSessionContext.enableSimulcast = this.enableSimulcast;\n\n            if (this.enableSimulcast) {\n              simulcastPolicy = new DefaultSimulcastUplinkPolicy_1.default(this.configuration.credentials.attendeeId, this.meetingSessionContext.logger);\n              simulcastPolicy.addObserver(this);\n              this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;\n              this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy_1.default(this.logger, this.meetingSessionContext.videoTileController);\n              this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex_1.default(this.logger);\n            } else {\n              this.meetingSessionContext.enableSimulcast = false;\n              this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex_1.default(this.logger);\n\n              if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n                this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n              }\n\n              if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n                this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n              }\n            }\n\n            this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability_1.default();\n            this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n            this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet_1.default();\n            this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet_1.default();\n            this.meetingSessionContext.statsCollector = new DefaultStatsCollector_1.default(this, this.logger, this.meetingSessionContext.browserBehavior);\n            this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor_1.default(this, this._realtimeController, this._videoTileController, this.connectionHealthData, new DefaultPingPong_1.default(this.meetingSessionContext.signalingClient, DefaultAudioVideoController.PING_PONG_INTERVAL_MS, this.logger), this.meetingSessionContext.statsCollector);\n            this.meetingSessionContext.reconnectController = this._reconnectController;\n            this.meetingSessionContext.audioDeviceInformation = {};\n            this.meetingSessionContext.videoDeviceInformation = {};\n\n            if (!reconnecting) {\n              this.totalRetryCount = 0;\n\n              this._reconnectController.reset();\n\n              this.forEachObserver(function (observer) {\n                Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(function (f) {\n                  return f.bind(observer)(false);\n                });\n              });\n              /* istanbul ignore else */\n\n              if (this.eventController) {\n                this.eventController.publishEvent('meetingStartRequested');\n              }\n            }\n\n            if (this._reconnectController.hasStartedConnectionAttempt()) {\n              // This does not reset the reconnect deadline, but declare it's not the first connection.\n              this._reconnectController.startedConnectionAttempt(false);\n            } else {\n              this._reconnectController.startedConnectionAttempt(true);\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [new MonitorTask_1.default(this.meetingSessionContext, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData), new ReceiveAudioInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [new SerialGroupTask_1.default(this.logger, 'Signaling', [new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), new ListenForVolumeIndicatorsTask_1.default(this.meetingSessionContext), new SendAndReceiveDataMessagesTask_1.default(this.meetingSessionContext), new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext), new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext), // TODO: ensure index handler does not race with incoming index update\n            new ReceiveVideoStreamIndexTask_1.default(this.meetingSessionContext)]), new SerialGroupTask_1.default(this.logger, 'Peer', [new CreatePeerConnectionTask_1.default(this.meetingSessionContext), new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0 ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [new WaitForAttendeePresenceTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs) : new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)])]), this.configuration.connectionTimeoutMs)]).run()];\n\n          case 2:\n            _a.sent();\n\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, function () {\n              /* istanbul ignore else */\n              if (_this.eventController) {\n                _this.eventController.publishEvent('meetingStartSucceeded', {\n                  maxVideoTileCount: _this.meetingSessionContext.maxVideoTileCount,\n                  poorConnectionCount: _this.meetingSessionContext.poorConnectionCount,\n                  retryCount: _this.totalRetryCount,\n                  signalingOpenDurationMs: _this.meetingSessionContext.signalingOpenDurationMs\n                });\n              }\n\n              _this.meetingSessionContext.startTimeMs = Date.now();\n\n              _this.actionFinishConnecting();\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var status;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error_1) || MeetingSessionStatusCode_1.default.TaskFailed);\n                      return [4\n                      /*yield*/\n                      , this.actionDisconnect(status, true, error_1)];\n\n                    case 1:\n                      _a.sent();\n\n                      if (!this.handleMeetingSessionStatus(status, error_1)) {\n                        this.notifyStop(status, error_1);\n                      }\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            this.connectionHealthData.setConnectionStartTime();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.actionFinishConnecting = function () {\n    this.meetingSessionContext.videoDuplexMode = SignalingProtocol_js_1.SdkStreamServiceType.RX;\n\n    if (!this.meetingSessionContext.enableSimulcast) {\n      this.enforceBandwidthLimitationForSender(this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]);\n    }\n\n    this.forEachObserver(function (observer) {\n      Maybe_1.default.of(observer.audioVideoDidStart).map(function (f) {\n        return f.bind(observer)();\n      });\n    });\n\n    this._reconnectController.reset();\n  };\n\n  DefaultAudioVideoController.prototype.stop = function () {\n    var _this = this;\n\n    this.sessionStateController.perform(SessionStateControllerAction_1.default.Disconnect, function () {\n      _this.actionDisconnect(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.Left), false, null);\n    });\n  };\n\n  DefaultAudioVideoController.prototype.actionDisconnect = function (status, reconnecting, error) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stopError_1, cleanError_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStop'), [new TimeoutTask_1.default(this.logger, new LeaveAndReceiveLeaveAckTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs)]).run()];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            stopError_1 = _a.sent();\n            this.logger.info('fail to stop');\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoClean'), [new TimeoutTask_1.default(this.logger, new CleanStoppedSessionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs)]).run()];\n\n          case 4:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            cleanError_1 = _a.sent();\n            this.logger.info('fail to clean');\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishDisconnecting, function () {\n              if (!reconnecting) {\n                _this.notifyStop(status, error);\n              }\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.update = function () {\n    var _this = this;\n\n    var result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, function () {\n      _this.actionUpdate(true);\n    });\n    return result === SessionStateControllerTransitionResult_1.default.Transitioned || result === SessionStateControllerTransitionResult_1.default.DeferredTransition;\n  };\n\n  DefaultAudioVideoController.prototype.restartLocalVideo = function (callback) {\n    var _this = this;\n\n    var restartVideo = function restartVideo() {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this._videoTileController.hasStartedLocalVideoTile()) return [3\n              /*break*/\n              , 2];\n              this.logger.info('stopping local video tile prior to local video restart');\n\n              this._videoTileController.stopLocalVideoTile();\n\n              this.logger.info('preparing local video restart update');\n              return [4\n              /*yield*/\n              , this.actionUpdate(false)];\n\n            case 1:\n              _a.sent();\n\n              this.logger.info('starting local video tile for local video restart');\n\n              this._videoTileController.startLocalVideoTile();\n\n              _a.label = 2;\n\n            case 2:\n              this.logger.info('finalizing local video restart update');\n              return [4\n              /*yield*/\n              , this.actionUpdate(true)];\n\n            case 3:\n              _a.sent();\n\n              callback();\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    var result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, function () {\n      restartVideo();\n    });\n    return result === SessionStateControllerTransitionResult_1.default.Transitioned || result === SessionStateControllerTransitionResult_1.default.DeferredTransition;\n  };\n\n  DefaultAudioVideoController.prototype.restartLocalAudio = function (callback) {\n    return __awaiter(this, void 0, void 0, function () {\n      var audioStream, error_2, audioTrack, replaceTrackSuccess;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            audioStream = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.mediaStreamBroker.acquireAudioInputStream()];\n\n          case 2:\n            audioStream = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_2 = _a.sent();\n            this.logger.info('could not acquire audio stream from mediaStreamBroker');\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (!audioStream || audioStream.getAudioTracks().length < 1) {\n              throw new Error('could not acquire audio track');\n            }\n\n            this.connectionHealthData.reset();\n            this.connectionHealthData.setConnectionStartTime();\n            audioTrack = audioStream.getAudioTracks()[0];\n\n            if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n              throw new Error('no active meeting and peer connection');\n            }\n\n            replaceTrackSuccess = false;\n            if (!this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.meetingSessionContext.transceiverController.replaceAudioTrack(audioTrack)];\n\n          case 5:\n            replaceTrackSuccess = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , DefaultTransceiverController_1.default.replaceAudioTrackForSender(this.meetingSessionContext.localAudioSender, audioTrack)];\n\n          case 7:\n            replaceTrackSuccess = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            this.meetingSessionContext.activeAudioInput = audioStream;\n            callback();\n\n            if (replaceTrackSuccess) {\n              return [2\n              /*return*/\n              , Promise.resolve()];\n            } else {\n              return [2\n              /*return*/\n              , Promise.reject()];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.actionUpdate = function (notify) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_3;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoUpdate'), [new ReceiveVideoInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs)]).run()];\n\n          case 1:\n            _a.sent();\n\n            if (notify) {\n              this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, function () {\n                _this.actionFinishUpdating();\n              });\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_3 = _a.sent();\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, function () {\n              var status = new MeetingSessionStatus_1.default(_this.getMeetingStatusCode(error_3) || MeetingSessionStatusCode_1.default.TaskFailed);\n\n              if (status.statusCode() !== MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n                _this.logger.info('failed to update audio-video session');\n              }\n\n              _this.handleMeetingSessionStatus(status, error_3);\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.notifyStop = function (status, error) {\n    this.forEachObserver(function (observer) {\n      Maybe_1.default.of(observer.audioVideoDidStop).map(function (f) {\n        return f.bind(observer)(status);\n      });\n    });\n    /* istanbul ignore else */\n\n    if (this.eventController) {\n      var _a = this.meetingSessionContext,\n          signalingOpenDurationMs = _a.signalingOpenDurationMs,\n          poorConnectionCount = _a.poorConnectionCount,\n          startTimeMs = _a.startTimeMs;\n      var attributes = {\n        maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n        meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n        meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],\n        signalingOpenDurationMs: signalingOpenDurationMs,\n        poorConnectionCount: poorConnectionCount,\n        retryCount: this.totalRetryCount\n      };\n\n      if (attributes.meetingDurationMs === 0) {\n        attributes.meetingErrorMessage = error && error.message || '';\n        delete attributes.meetingDurationMs;\n        this.eventController.publishEvent('meetingStartFailed', attributes);\n      } else if (status.isFailure() || status.isAudioConnectionFailure()) {\n        attributes.meetingErrorMessage = error && error.message || '';\n        this.eventController.publishEvent('meetingFailed', attributes);\n      } else {\n        this.eventController.publishEvent('meetingEnded', attributes);\n      }\n    }\n  };\n\n  DefaultAudioVideoController.prototype.actionFinishUpdating = function () {\n    // we do not update parameter for simulcast since they are updated in AttachMediaInputTask\n    if (!this.meetingSessionContext.enableSimulcast) {\n      var maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n      this.enforceBandwidthLimitationForSender(maxBitrateKbps);\n    }\n\n    this.logger.info('updated audio-video session');\n  };\n\n  DefaultAudioVideoController.prototype.reconnect = function (status, error) {\n    var _this = this;\n\n    var willRetry = this._reconnectController.retryWithBackoff(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, function () {\n              _this.actionConnect(true);\n            });\n          } else {\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.Reconnect, function () {\n              _this.actionReconnect();\n            });\n          }\n\n          this.totalRetryCount += 1;\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    }, function () {\n      _this.logger.info('canceled retry');\n    });\n\n    if (!willRetry) {\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, function () {\n        _this.actionDisconnect(status, false, error);\n      });\n    }\n\n    return willRetry;\n  };\n\n  DefaultAudioVideoController.prototype.actionReconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_4;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._reconnectController.hasStartedConnectionAttempt()) {\n              this._reconnectController.startedConnectionAttempt(false);\n\n              this.forEachObserver(function (observer) {\n                Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(function (f) {\n                  return f.bind(observer)(true);\n                });\n              });\n            }\n\n            this.connectionHealthData.reset();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoReconnect'), [new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [new CleanRestartedSessionTask_1.default(this.meetingSessionContext), new SerialGroupTask_1.default(this.logger, 'Signaling', [new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext), new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext)]), new CreatePeerConnectionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs), // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?\n            new ReceiveVideoInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs)]).run()];\n\n          case 2:\n            _a.sent();\n\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, function () {\n              /* istanbul ignore else */\n              if (_this.eventController) {\n                _this.eventController.pushMeetingState('meetingReconnected');\n              }\n\n              _this.actionFinishConnecting();\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_4 = _a.sent(); // To perform the \"Reconnect\" action again, the session should be in the \"Connected\" state.\n\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, function () {\n              _this.logger.info('failed to reconnect audio-video session');\n\n              var status = new MeetingSessionStatus_1.default(_this.getMeetingStatusCode(error_4) || MeetingSessionStatusCode_1.default.TaskFailed);\n\n              _this.handleMeetingSessionStatus(status, error_4);\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            this.connectionHealthData.setConnectionStartTime();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.wrapTaskName = function (taskName) {\n    return taskName + \"/\" + this.configuration.meetingId + \"/\" + this.configuration.credentials.attendeeId;\n  };\n\n  DefaultAudioVideoController.prototype.getMeetingStatusCode = function (error) {\n    var matched = /the meeting status code: (\\d+)/.exec(error && error.message);\n\n    if (matched && matched.length > 1) {\n      return Number(matched[1]);\n    } else {\n      return null;\n    }\n  };\n\n  DefaultAudioVideoController.prototype.enforceBandwidthLimitationForSender = function (maxBitrateKbps) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(maxBitrateKbps)];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , DefaultTransceiverController_1.default.setVideoSendingBitrateKbpsForSender(this.meetingSessionContext.localVideoSender, maxBitrateKbps, this.meetingSessionContext.logger)];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.handleMeetingSessionStatus = function (status, error) {\n    var _this = this;\n\n    this.logger.info(\"handling status: \" + MeetingSessionStatusCode_1.default[status.statusCode()]);\n\n    if (!status.isTerminal()) {\n      if (this.meetingSessionContext.statsCollector) {\n        this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);\n      }\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n      this.restartLocalVideo(function () {\n        _this.logger.info('handled incompatible SDP by attempting to restart video');\n      });\n      return true;\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly) {\n      this._videoTileController.removeLocalVideoTile();\n\n      this.forEachObserver(function (observer) {\n        Maybe_1.default.of(observer.videoSendDidBecomeUnavailable).map(function (f) {\n          return f.bind(observer)();\n        });\n      });\n      return false;\n    }\n\n    if (status.isTerminal()) {\n      this.logger.error('session will not be reconnected');\n\n      if (this.meetingSessionContext.reconnectController) {\n        this.meetingSessionContext.reconnectController.disableReconnect();\n      }\n    }\n\n    if (status.isFailure() || status.isTerminal()) {\n      if (this.meetingSessionContext.reconnectController) {\n        var willRetry = this.reconnect(status, error);\n\n        if (willRetry) {\n          this.logger.warn(\"will retry due to status code \" + MeetingSessionStatusCode_1.default[status.statusCode()] + (error ? \" and error: \" + error.message : \"\"));\n        } else {\n          this.logger.error(\"failed with status code \" + MeetingSessionStatusCode_1.default[status.statusCode()] + (error ? \" and error: \" + error.message : \"\"));\n        }\n\n        return willRetry;\n      }\n    }\n\n    return false;\n  };\n\n  DefaultAudioVideoController.prototype.setVideoMaxBandwidthKbps = function (maxBandwidthKbps) {\n    if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n      this.logger.info(\"video send has ideal max bandwidth \" + maxBandwidthKbps + \" kbps\");\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(maxBandwidthKbps);\n    }\n  };\n\n  DefaultAudioVideoController.prototype.handleHasBandwidthPriority = function (hasBandwidthPriority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var oldMaxBandwidth, newMaxBandwidth;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy && !this.meetingSessionContext.enableSimulcast)) return [3\n            /*break*/\n            , 2];\n            oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n            this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);\n            newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n            if (!(oldMaxBandwidth !== newMaxBandwidth)) return [3\n            /*break*/\n            , 2];\n            this.logger.info(\"video send bandwidth priority \" + hasBandwidthPriority + \" max has changed from \" + oldMaxBandwidth + \" kbps to \" + newMaxBandwidth + \" kbps\");\n            return [4\n            /*yield*/\n            , this.enforceBandwidthLimitationForSender(newMaxBandwidth)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DefaultAudioVideoController.prototype.pauseReceivingStream = function (streamId) {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.pause([streamId]);\n    }\n  };\n\n  DefaultAudioVideoController.prototype.resumeReceivingStream = function (streamId) {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.resume([streamId]);\n    }\n  };\n\n  DefaultAudioVideoController.prototype.getRemoteVideoSources = function () {\n    var videoStreamIndex = this.meetingSessionContext.videoStreamIndex;\n\n    if (!videoStreamIndex) {\n      this.logger.info('meeting has not started');\n      return [];\n    }\n\n    var selfAttendeeId = this.configuration.credentials.attendeeId;\n    return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);\n  };\n\n  DefaultAudioVideoController.prototype.encodingSimulcastLayersDidChange = function (simulcastLayers) {\n    this.forEachObserver(function (observer) {\n      Maybe_1.default.of(observer.encodingSimulcastLayersDidChange).map(function (f) {\n        return f.bind(observer)(simulcastLayers);\n      });\n    });\n  };\n\n  DefaultAudioVideoController.MIN_VOLUME_DECIBELS = -42;\n  DefaultAudioVideoController.MAX_VOLUME_DECIBELS = -14;\n  DefaultAudioVideoController.PING_PONG_INTERVAL_MS = 10000;\n  return DefaultAudioVideoController;\n}();\n\nexports.default = DefaultAudioVideoController;","map":{"version":3,"sources":["../../src/audiovideocontroller/DefaultAudioVideoController.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAA,8BAAA,GAAA,OAAA,CAAA,uDAAA,CAAA;;AAEA,IAAA,2BAAA,GAAA,OAAA,CAAA,iDAAA,CAAA;;AAGA,IAAA,wBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,gDAAA,CAAA;;AACA,IAAA,sCAAA,GAAA,OAAA,CAAA,2DAAA,CAAA;;AAEA,IAAA,wBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAGA,IAAA,sBAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,4CAAA,CAAA;;AACA,IAAA,iCAAA,GAAA,OAAA,CAAA,mDAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,OAAA,CAAA,iDAAA,CAAA;;AAGA,IAAA,gBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,IAAA,+BAAA,GAAA,OAAA,CAAA,yDAAA,CAAA;;AAEA,IAAA,8BAAA,GAAA,OAAA,CAAA,wDAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,uDAAA,CAAA;;AACA,IAAA,wCAAA,GAAA,OAAA,CAAA,kEAAA,CAAA;;AACA,IAAA,wBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,kCAAA,GAAA,OAAA,CAAA,0CAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,+BAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,4BAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,gCAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,IAAA,qCAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,8BAAA,GAAA,OAAA,CAAA,uDAAA,CAAA;;AACA,IAAA,gCAAA,GAAA,OAAA,CAAA,yDAAA,CAAA;;AACA,IAAA,uCAAA,GAAA,OAAA,CAAA,yEAAA,CAAA;;AACA,IAAA,gCAAA,GAAA,OAAA,CAAA,gEAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,0DAAA,CAAA;;AAEA,IAAA,yBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,OAAA,CAAA,+CAAA,CAAA;;AACA,IAAA,4BAAA,GAAA,OAAA,CAAA,mDAAA,CAAA;;AAEA,IAAA,yBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,8BAAA,GAAA,OAAA,CAAA,4DAAA,CAAA;;AACA,IAAA,kCAAA,GAAA,OAAA,CAAA,gEAAA,CAAA;;AAEA,IAAA,+BAAA,GAAA,OAAA,CAAA,yDAAA,CAAA;;AAEA,IAAA,2BAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,IAAA,2BAAA;AAAA;AAAA,YAAA;AAyBE,WAAA,2BAAA,CACE,aADF,EAEE,MAFF,EAGE,gBAHF,EAIE,iBAJF,EAKE,mBALF,EAK0C;AAjBlC,SAAA,oBAAA,GAAuB,IAAI,sBAAA,CAAA,OAAJ,EAAvB;AACA,SAAA,aAAA,GAAyC,IAAI,GAAJ,EAAzC;AACA,SAAA,qBAAA,GAAwB,IAAI,2BAAA,CAAA,OAAJ,EAAxB;AAOA,SAAA,eAAA,GAA2B,KAA3B;AACA,SAAA,eAAA,GAAkB,CAAlB;AASN,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,sBAAL,GAA8B,IAAI,+BAAA,CAAA,OAAJ,CAAkC,KAAK,OAAvC,CAA9B;AACA,SAAK,cAAL,GAAsB,aAAtB;AACA,SAAK,eAAL,GACE,aAAa,CAAC,yCAAd,IACA,aAAa,CAAC,kDADd,IAEA,IAAI,wBAAA,CAAA,OAAJ,GAA6B,iBAA7B,EAHF;AAKA,SAAK,iBAAL,GAAyB,gBAAzB;AACA,SAAK,mBAAL,GAA2B,IAAI,2BAAA,CAAA,OAAJ,EAA3B;;AACA,SAAK,mBAAL,CAAyB,0BAAzB,CACE,aAAa,CAAC,WAAd,CAA0B,UAD5B,EAEE,aAAa,CAAC,WAAd,CAA0B,cAF5B;;AAKA,SAAK,sBAAL,GAA8B,IAAI,8BAAA,CAAA,OAAJ,CAC5B,KAAK,mBADuB,EAE5B,aAAa,CAAC,WAAd,CAA0B,UAFE,EAG5B,KAAK,0BAAL,CAAgC,IAAhC,CAAqC,IAArC,CAH4B,CAA9B;AAMA,SAAK,kBAAL,GAA0B,iBAA1B;AACA,SAAK,oBAAL,GAA4B,mBAA5B;AACA,SAAK,oBAAL,GAA4B,IAAI,4BAAA,CAAA,OAAJ,CAC1B,IAAI,yBAAA,CAAA,OAAJ,EAD0B,EAE1B,IAF0B,EAG1B,KAAK,OAHqB,CAA5B;AAKA,SAAK,mBAAL,GAA2B,IAAI,2BAAA,CAAA,OAAJ,EAA3B;AACA,SAAK,qBAAL,CAA2B,MAA3B,GAAoC,KAAK,OAAzC;AACA,SAAK,gBAAL,GAAwB,IAAI,wBAAA,CAAA,OAAJ,CAA2B,IAA3B,CAAxB;AACD;;AAED,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,eAAJ,EAAiB;SAAjB,eAAA;AACE,aAAO,KAAK,cAAZ;AACD,KAFgB;qBAAA;;AAAA,GAAjB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;SAAtB,eAAA;AACE,aAAO,KAAK,mBAAZ;AACD,KAFqB;qBAAA;;AAAA,GAAtB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,uBAAJ,EAAyB;SAAzB,eAAA;AACE,aAAO,KAAK,sBAAZ;AACD,KAFwB;qBAAA;;AAAA,GAAzB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,qBAAJ,EAAuB;SAAvB,eAAA;AACE,aAAO,KAAK,oBAAZ;AACD,KAFsB;qBAAA;;AAAA,GAAvB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;SAAtB,eAAA;AACE,aAAO,KAAK,mBAAZ;AACD,KAFqB;qBAAA;;AAAA,GAAtB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;SAAnB,eAAA;AACE,aAAO,KAAK,gBAAZ;AACD,KAFkB;qBAAA;;AAAA,GAAnB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;SAAV,eAAA;AACE,aAAO,KAAK,OAAZ;AACD,KAFS;qBAAA;;AAAA,GAAV;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;SAArB,eAAA;AACE,aAAQ,KAAK,qBAAL,IAA8B,KAAK,qBAAL,CAA2B,IAA1D,IAAmE,IAA1E;AACD,KAFoB;qBAAA;;AAAA,GAArB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,2BAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;SAArB,eAAA;AACE,aAAO,KAAK,kBAAZ;AACD,KAFoB;qBAAA;;AAAA,GAArB;;AAIA,EAAA,2BAAA,CAAA,SAAA,CAAA,yBAAA,GAAA,UAA0B,QAA1B,EAAqD;AACnD,QAAI,CAAC,KAAK,iBAAV,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,WAAO,KAAK,iBAAL,CAAuB,QAAvB,CAAgC,QAAhC,CAAP;AACD,GALD;;AAOA,EAAA,2BAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAwC;AACtC,SAAK,MAAL,CAAY,IAAZ,CAAiB,yBAAjB;AACA,SAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB;AACD,GAHD;;AAKA,EAAA,2BAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,QAAf,EAA2C;AACzC,SAAK,MAAL,CAAY,IAAZ,CAAiB,2BAAjB;AACA,SAAK,aAAL,CAAmB,MAAnB,CAA0B,QAA1B;AACD,GAHD;;AAKA,EAAA,2BAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,YAAhB,EAAoE;;;AAApE,QAAA,KAAA,GAAA,IAAA;;mCACa,Q,EAAQ;AACjB,UAAI,gBAAA,CAAA,OAAJ,GAAqB,KAArB,CAA2B,YAAA;AACzB,YAAI,KAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,QAAvB,CAAJ,EAAsC;AACpC,UAAA,YAAY,CAAC,QAAD,CAAZ;AACD;AACF,OAJD;;;;AADF,WAAuB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,aAAL,CAAA,EAAkB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAzC,EAAyC,CAAA,EAAA,CAAA,IAAzC,EAAyC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAzC,EAAyC;AAApC,YAAM,QAAQ,GAAA,EAAA,CAAA,KAAd;;gBAAM,Q;AAMV;;;;;;;;;;;;AACF,GARD;;AAUA,EAAA,2BAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,OAAjE,EAA0E,YAAA;AACxE,MAAA,KAAI,CAAC,aAAL,CAAmB,KAAnB;AACD,KAFD;AAGD,GAJD;;AAMc,EAAA,2BAAA,CAAA,SAAA,CAAA,aAAA,GAAd,UAA4B,YAA5B,EAAiD;;;;;;;;;AAC/C,iBAAK,oBAAL,CAA0B,KAA1B;AACA,iBAAK,qBAAL,GAA6B,IAAI,2BAAA,CAAA,OAAJ,EAA7B;AACA,iBAAK,qBAAL,CAA2B,MAA3B,GAAoC,KAAK,MAAzC;AACA,iBAAK,qBAAL,CAA2B,eAA3B,GAA6C,KAAK,eAAlD;AACA,iBAAK,qBAAL,CAA2B,eAA3B,GAA6C,IAAI,wBAAA,CAAA,OAAJ,CAA2B;AACtE,cAAA,yCAAyC,EAAE,KAAK,aAAL,CACxC;AAFmE,aAA3B,CAA7C;AAIA,iBAAK,qBAAL,CAA2B,2BAA3B,GAAyD,KAAK,aAA9D;AACA,iBAAK,qBAAL,CAA2B,eAA3B,GAA6C,IAAI,wBAAA,CAAA,OAAJ,CAC3C,KAAK,iBADsC,EAE3C,KAAK,MAFsC,CAA7C;AAIA,iBAAK,qBAAL,CAA2B,iBAA3B,GAA+C,KAAK,kBAApD;AACA,iBAAK,qBAAL,CAA2B,kBAA3B,GAAgD,KAAK,mBAArD;AACA,iBAAK,qBAAL,CAA2B,kBAA3B,GAAgD,KAAK,mBAArD;AACA,iBAAK,qBAAL,CAA2B,oBAA3B,GAAkD,IAAlD;;AACA,gBAAI,KAAK,eAAT,EAA0B;AACxB,mBAAK,qBAAL,CAA2B,qBAA3B,GAAmD,IAAI,gCAAA,CAAA,OAAJ,CACjD,KAAK,MAD4C,EAEjD,KAAK,qBAAL,CAA2B,eAFsB,CAAnD;AAID,aALD,MAKO;AACL,mBAAK,qBAAL,CAA2B,qBAA3B,GAAmD,IAAI,8BAAA,CAAA,OAAJ,CACjD,KAAK,MAD4C,EAEjD,KAAK,qBAAL,CAA2B,eAFsB,CAAnD;AAID;;AAED,iBAAK,qBAAL,CAA2B,sBAA3B,GAAoD,IAAI,+BAAA,CAAA,OAAJ,CAClD,KAAK,MAD6C,EAElD,KAAK,mBAF6C,EAGlD,2BAA2B,CAAC,mBAHsB,EAIlD,2BAA2B,CAAC,mBAJsB,CAApD;AAMA,iBAAK,qBAAL,CAA2B,mBAA3B,GAAiD,KAAK,oBAAtD;AACA,iBAAK,qBAAL,CAA2B,4BAA3B,GAA0D,KAAK,aAAL,CAAmB,4BAA7E;AACA,iBAAK,qBAAL,CAA2B,0BAA3B,GAAwD,KAAK,aAAL,CAAmB,0BAA3E;AAEA,iBAAK,qBAAL,CAA2B,eAA3B,GAA6C,KAAK,eAAlD;;AACA,gBAAI,KAAK,eAAT,EAA0B;AAClB,cAAA,eAAe,GAAG,IAAI,8BAAA,CAAA,OAAJ,CACtB,KAAK,aAAL,CAAmB,WAAnB,CAA+B,UADT,EAEtB,KAAK,qBAAL,CAA2B,MAFL,CAAlB;AAIN,cAAA,eAAe,CAAC,WAAhB,CAA4B,IAA5B;AACA,mBAAK,qBAAL,CAA2B,0BAA3B,GAAwD,eAAxD;AACA,mBAAK,qBAAL,CAA2B,4BAA3B,GAA0D,IAAI,0BAAA,CAAA,OAAJ,CACxD,KAAK,MADmD,EAExD,KAAK,qBAAL,CAA2B,mBAF6B,CAA1D;AAIA,mBAAK,qBAAL,CAA2B,gBAA3B,GAA8C,IAAI,2BAAA,CAAA,OAAJ,CAA8B,KAAK,MAAnC,CAA9C;AACD,aAZD,MAYO;AACL,mBAAK,qBAAL,CAA2B,eAA3B,GAA6C,KAA7C;AACA,mBAAK,qBAAL,CAA2B,gBAA3B,GAA8C,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,MAAjC,CAA9C;;AACA,kBAAI,CAAC,KAAK,qBAAL,CAA2B,4BAAhC,EAA8D;AAC5D,qBAAK,qBAAL,CAA2B,4BAA3B,GAA0D,IAAI,gCAAA,CAAA,OAAJ,CACxD,KAAK,aAAL,CAAmB,WAAnB,CAA+B,UADyB,CAA1D;AAGD;;AACD,kBAAI,CAAC,KAAK,qBAAL,CAA2B,0BAAhC,EAA4D;AAC1D,qBAAK,qBAAL,CAA2B,0BAA3B,GAAwD,IAAI,kCAAA,CAAA,OAAJ,CACtD,KAAK,aAAL,CAAmB,WAAnB,CAA+B,UADuB,CAAxD;AAGD;AACF;;AAED,iBAAK,qBAAL,CAA2B,0BAA3B,GAAwD,IAAI,iCAAA,CAAA,OAAJ,EAAxD;AACA,iBAAK,qBAAL,CAA2B,8BAA3B,GAA4D,IAAI,uCAAA,CAAA,OAAJ,CAC1D,CAD0D,EAE1D,CAF0D,EAG1D,CAH0D,EAI1D,CAJ0D,EAK1D,KAL0D,CAA5D;AAOA,iBAAK,qBAAL,CAA2B,eAA3B,GAA6C,IAAI,yBAAA,CAAA,OAAJ,EAA7C;AACA,iBAAK,qBAAL,CAA2B,YAA3B,GAA0C,IAAI,yBAAA,CAAA,OAAJ,EAA1C;AACA,iBAAK,qBAAL,CAA2B,cAA3B,GAA4C,IAAI,uBAAA,CAAA,OAAJ,CAC1C,IAD0C,EAE1C,KAAK,MAFqC,EAG1C,KAAK,qBAAL,CAA2B,eAHe,CAA5C;AAKA,iBAAK,qBAAL,CAA2B,iBAA3B,GAA+C,IAAI,sCAAA,CAAA,OAAJ,CAC7C,IAD6C,EAE7C,KAAK,mBAFwC,EAG7C,KAAK,oBAHwC,EAI7C,KAAK,oBAJwC,EAK7C,IAAI,iBAAA,CAAA,OAAJ,CACE,KAAK,qBAAL,CAA2B,eAD7B,EAEE,2BAA2B,CAAC,qBAF9B,EAGE,KAAK,MAHP,CAL6C,EAU7C,KAAK,qBAAL,CAA2B,cAVkB,CAA/C;AAYA,iBAAK,qBAAL,CAA2B,mBAA3B,GAAiD,KAAK,oBAAtD;AACA,iBAAK,qBAAL,CAA2B,sBAA3B,GAAoD,EAApD;AACA,iBAAK,qBAAL,CAA2B,sBAA3B,GAAoD,EAApD;;AAEA,gBAAI,CAAC,YAAL,EAAmB;AACjB,mBAAK,eAAL,GAAuB,CAAvB;;AACA,mBAAK,oBAAL,CAA0B,KAA1B;;AACA,mBAAK,eAAL,CAAqB,UAAA,QAAA,EAAQ;AAC3B,gBAAA,OAAA,CAAA,OAAA,CAAM,EAAN,CAAS,QAAQ,CAAC,4BAAlB,EAAgD,GAAhD,CAAoD,UAAA,CAAA,EAAC;AAAI,yBAAA,CAAC,CAAC,IAAF,CAAO,QAAP,EAAA,KAAA,CAAA;AAAuB,iBAAhF;AACD,eAFD;AAGA;;AACA,kBAAI,KAAK,eAAT,EAA0B;AACxB,qBAAK,eAAL,CAAqB,YAArB,CAAkC,uBAAlC;AACD;AACF;;AAED,gBAAI,KAAK,oBAAL,CAA0B,2BAA1B,EAAJ,EAA6D;AAC3D;AACA,mBAAK,oBAAL,CAA0B,wBAA1B,CAAmD,KAAnD;AACD,aAHD,MAGO;AACL,mBAAK,oBAAL,CAA0B,wBAA1B,CAAmD,IAAnD;AACD;;;;;;;AAGC,mBAAA,CAAA;AAAA;AAAA,cAAM,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,KAAK,YAAL,CAAkB,iBAAlB,CAAjC,EAAuE,CAC3E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,qBADP,EAEE,KAAK,aAAL,CAAmB,mCAFrB,EAGE,KAAK,oBAHP,CAD2E,EAM3E,IAAI,uBAAA,CAAA,OAAJ,CAA0B,KAAK,qBAA/B,CAN2E,EAO3E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,OAAjC,EAA0C,CACxC,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,WAAjC,EAA8C,CAC5C,IAAI,6BAAA,CAAA,OAAJ,CAAgC,KAAK,qBAArC,CAD4C,EAE5C,IAAI,+BAAA,CAAA,OAAJ,CAAkC,KAAK,qBAAvC,CAF4C,EAG5C,IAAI,gCAAA,CAAA,OAAJ,CAAmC,KAAK,qBAAxC,CAH4C,EAI5C,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,qBAAjC,CAJ4C,EAK5C,IAAI,4BAAA,CAAA,OAAJ,CAA+B,KAAK,qBAApC,CAL4C,EAM5C;AACA,gBAAI,6BAAA,CAAA,OAAJ,CAAgC,KAAK,qBAArC,CAP4C,CAA9C,CADwC,EAUxC,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,MAAjC,EAAyC,CACvC,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,qBAAlC,CADuC,EAEvC,IAAI,sBAAA,CAAA,OAAJ,CAAyB,KAAK,qBAA9B,CAFuC,EAGvC,IAAI,eAAA,CAAA,OAAJ,CAAkB,KAAK,qBAAvB,CAHuC,EAIvC,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,qBAAjC,CAJuC,EAKvC,IAAI,kCAAA,CAAA,OAAJ,CAAqC,KAAK,qBAA1C,CALuC,EAMvC,IAAI,qCAAA,CAAA,OAAJ,CAAwC,KAAK,qBAA7C,CANuC,EAOvC,KAAK,qBAAL,CAA2B,2BAA3B,CAAuD,yBAAvD,GAAmF,CAAnF,GACI,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,mBAAA,CAAA,OAAJ,CAAsB,KAAK,MAA3B,EAAmC,oBAAnC,EAAyD,CACvD,IAAI,6BAAA,CAAA,OAAJ,CAAgC,KAAK,qBAArC,CADuD,EAEvD,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,qBAAlC,CAFuD,CAAzD,CAFF,EAME,KAAK,qBAAL,CAA2B,2BAA3B,CAAuD,yBANzD,CADJ,GASI,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,qBAAlC,CAhBmC,CAAzC,CAVwC,CAA1C,CAFF,EA+BE,KAAK,aAAL,CAAmB,mBA/BrB,CAP2E,CAAvE,EAwCH,GAxCG,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAyCA,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,gBAAjE,EAAmF,YAAA;AACjF;AACA,kBAAI,KAAI,CAAC,eAAT,EAA0B;AACxB,gBAAA,KAAI,CAAC,eAAL,CAAqB,YAArB,CAAkC,uBAAlC,EAA2D;AACzD,kBAAA,iBAAiB,EAAE,KAAI,CAAC,qBAAL,CAA2B,iBADW;AAEzD,kBAAA,mBAAmB,EAAE,KAAI,CAAC,qBAAL,CAA2B,mBAFS;AAGzD,kBAAA,UAAU,EAAE,KAAI,CAAC,eAHwC;AAIzD,kBAAA,uBAAuB,EAAE,KAAI,CAAC,qBAAL,CAA2B;AAJK,iBAA3D;AAMD;;AACD,cAAA,KAAI,CAAC,qBAAL,CAA2B,WAA3B,GAAyC,IAAI,CAAC,GAAL,EAAzC;;AACA,cAAA,KAAI,CAAC,sBAAL;AACD,aAZD;;;;;;;AAcA,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,IAAjE,EAAuE,YAAA;AAAA,qBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC/D,sBAAA,MAAM,GAAG,IAAI,sBAAA,CAAA,OAAJ,CACb,KAAK,oBAAL,CAA0B,OAA1B,KAAoC,0BAAA,CAAA,OAAA,CAAyB,UADhD,CAAT;AAGN,6BAAA,CAAA;AAAA;AAAA,wBAAM,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,OAApC,CAAN,CAAA;;;AAAA,sBAAA,EAAA,CAAA,IAAA;;AACA,0BAAI,CAAC,KAAK,0BAAL,CAAgC,MAAhC,EAAwC,OAAxC,CAAL,EAAqD;AACnD,6BAAK,UAAL,CAAgB,MAAhB,EAAwB,OAAxB;AACD;;;;;;;eAPoE,CAAA;AAQtE,aARD;;;;;;AAUF,iBAAK,oBAAL,CAA0B,sBAA1B;;;;;;;AACD,GAzLa;;AA2LN,EAAA,2BAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AACE,SAAK,qBAAL,CAA2B,eAA3B,GAA6C,sBAAA,CAAA,oBAAA,CAAqB,EAAlE;;AACA,QAAI,CAAC,KAAK,qBAAL,CAA2B,eAAhC,EAAiD;AAC/C,WAAK,mCAAL,CACE,KAAK,qBAAL,CAA2B,8BAA3B,CAA0D,cAA1D,GAA2E,CAA3E,CADF;AAGD;;AAED,SAAK,eAAL,CAAqB,UAAA,QAAA,EAAQ;AAC3B,MAAA,OAAA,CAAA,OAAA,CAAM,EAAN,CAAS,QAAQ,CAAC,kBAAlB,EAAsC,GAAtC,CAA0C,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,IAAF,CAAA,QAAA,GAAA;AAAkB,OAAjE;AACD,KAFD;;AAGA,SAAK,oBAAL,CAA0B,KAA1B;AACD,GAZO;;AAcR,EAAA,2BAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,UAAjE,EAA6E,YAAA;AAC3E,MAAA,KAAI,CAAC,gBAAL,CAAsB,IAAI,sBAAA,CAAA,OAAJ,CAAyB,0BAAA,CAAA,OAAA,CAAyB,IAAlD,CAAtB,EAA+E,KAA/E,EAAsF,IAAtF;AACD,KAFD;AAGD,GAJD;;AAMc,EAAA,2BAAA,CAAA,SAAA,CAAA,gBAAA,GAAd,UACE,MADF,EAEE,YAFF,EAGE,KAHF,EAGqB;;;;;;;;;;;AAGjB,mBAAA,CAAA;AAAA;AAAA,cAAM,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,KAAK,YAAL,CAAkB,gBAAlB,CAAjC,EAAsE,CAC1E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,6BAAA,CAAA,OAAJ,CAAgC,KAAK,qBAArC,CAFF,EAGE,KAAK,aAAL,CAAmB,mBAHrB,CAD0E,CAAtE,EAMH,GANG,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAQA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,cAAjB;;;;;;;;AAIA,mBAAA,CAAA;AAAA;AAAA,cAAM,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,KAAK,YAAL,CAAkB,iBAAlB,CAAjC,EAAuE,CAC3E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,qBAAjC,CAFF,EAGE,KAAK,aAAL,CAAmB,mBAHrB,CAD2E,CAAvE,EAMH,GANG,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAQA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,eAAjB;;;;;;AAEF,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,mBAAjE,EAAsF,YAAA;AACpF,kBAAI,CAAC,YAAL,EAAmB;AACjB,gBAAA,KAAI,CAAC,UAAL,CAAgB,MAAhB,EAAwB,KAAxB;AACD;AACF,aAJD;;;;;;;AAKD,GAjCa;;AAmCd,EAAA,2BAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,MAAM,GAAG,KAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,MAAjE,EAAyE,YAAA;AACtF,MAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB;AACD,KAFc,CAAf;AAGA,WACE,MAAM,KAAK,wCAAA,CAAA,OAAA,CAAuC,YAAlD,IACA,MAAM,KAAK,wCAAA,CAAA,OAAA,CAAuC,kBAFpD;AAID,GARD;;AAUA,EAAA,2BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,QAAlB,EAAsC;AAAtC,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,YAAY,GAAG,SAAf,YAAe,GAAA;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;mBACf,KAAK,oBAAL,CAA0B,wBAA1B,E,EAAA,OAAA,CAAA;AAAA;AAAA,gBAAA,CAAA,CAAA;AACF,mBAAK,MAAL,CAAY,IAAZ,CAAiB,wDAAjB;;AACA,mBAAK,oBAAL,CAA0B,kBAA1B;;AACA,mBAAK,MAAL,CAAY,IAAZ,CAAiB,sCAAjB;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAM,KAAK,YAAL,CAAkB,KAAlB,CAAN,CAAA;;;AAAA,cAAA,EAAA,CAAA,IAAA;;AACA,mBAAK,MAAL,CAAY,IAAZ,CAAiB,mDAAjB;;AACA,mBAAK,oBAAL,CAA0B,mBAA1B;;;;;AAEF,mBAAK,MAAL,CAAY,IAAZ,CAAiB,uCAAjB;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAM,KAAK,YAAL,CAAkB,IAAlB,CAAN,CAAA;;;AAAA,cAAA,EAAA,CAAA,IAAA;;AACA,cAAA,QAAQ;;;;;;OAXW,CAAA;AAYpB,KAZD;;AAaA,QAAM,MAAM,GAAG,KAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,MAAjE,EAAyE,YAAA;AACtF,MAAA,YAAY;AACb,KAFc,CAAf;AAGA,WACE,MAAM,KAAK,wCAAA,CAAA,OAAA,CAAuC,YAAlD,IACA,MAAM,KAAK,wCAAA,CAAA,OAAA,CAAuC,kBAFpD;AAID,GArBD;;AAuBM,EAAA,2BAAA,CAAA,SAAA,CAAA,iBAAA,GAAN,UAAwB,QAAxB,EAA4C;;;;;;AACtC,YAAA,WAAW,GAAuB,IAAlC;;;;;;AAEY,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,uBAAvB,EAAN,CAAA;;;AAAd,YAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;;;;;;;AAEA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,uDAAjB;;;;;;AAEF,gBAAI,CAAC,WAAD,IAAgB,WAAW,CAAC,cAAZ,GAA6B,MAA7B,GAAsC,CAA1D,EAA6D;AAC3D,oBAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,iBAAK,oBAAL,CAA0B,KAA1B;AACA,iBAAK,oBAAL,CAA0B,sBAA1B;AAEM,YAAA,UAAU,GAAG,WAAW,CAAC,cAAZ,GAA6B,CAA7B,CAAb;;AACN,gBAAI,CAAC,KAAK,qBAAN,IAA+B,CAAC,KAAK,qBAAL,CAA2B,IAA/D,EAAqE;AACnE,oBAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACG,YAAA,mBAAmB,GAAG,KAAtB;iBAEA,KAAK,qBAAL,CAA2B,eAA3B,CAA2C,mBAA3C,E,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACoB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,qBAAL,CAA2B,qBAA3B,CAAiD,iBAAjD,CAC1B,UAD0B,CAAN,CAAA;;;AAAtB,YAAA,mBAAmB,GAAG,EAAA,CAAA,IAAA,EAAtB;;;;;;AAIsB,mBAAA,CAAA;AAAA;AAAA,cAAM,8BAAA,CAAA,OAAA,CAA6B,0BAA7B,CAC1B,KAAK,qBAAL,CAA2B,gBADD,EAE1B,UAF0B,CAAN,CAAA;;;AAAtB,YAAA,mBAAmB,GAAG,EAAA,CAAA,IAAA,EAAtB;;;;AAKF,iBAAK,qBAAL,CAA2B,gBAA3B,GAA8C,WAA9C;AACA,YAAA,QAAQ;;AACR,gBAAI,mBAAJ,EAAyB;AACvB,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,OAAR,EAAP,CAAA;AACD,aAFD,MAEO;AACL,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,EAAP,CAAA;AACD;;;;;;;;AACF,GArCK;;AAuCQ,EAAA,2BAAA,CAAA,SAAA,CAAA,YAAA,GAAd,UAA2B,MAA3B,EAA0C;;;;;;;;;;;AAGtC,mBAAA,CAAA;AAAA;AAAA,cAAM,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,KAAK,YAAL,CAAkB,kBAAlB,CAAjC,EAAwE,CAC5E,IAAI,uBAAA,CAAA,OAAJ,CAA0B,KAAK,qBAA/B,CAD4E,EAE5E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,eAAjC,EAAkD,CAChD,IAAI,sBAAA,CAAA,OAAJ,CAAyB,KAAK,qBAA9B,CADgD,EAEhD,IAAI,eAAA,CAAA,OAAJ,CAAkB,KAAK,qBAAvB,CAFgD,EAGhD,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,qBAAjC,CAHgD,EAIhD,IAAI,kCAAA,CAAA,OAAJ,CAAqC,KAAK,qBAA1C,CAJgD,EAKhD,IAAI,qCAAA,CAAA,OAAJ,CAAwC,KAAK,qBAA7C,CALgD,EAMhD,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,qBAAlC,CANgD,CAAlD,CAFF,EAUE,KAAK,aAAL,CAAmB,mBAVrB,CAF4E,CAAxE,EAcH,GAdG,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AAeA,gBAAI,MAAJ,EAAY;AACV,mBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,cAAjE,EAAiF,YAAA;AAC/E,gBAAA,KAAI,CAAC,oBAAL;AACD,eAFD;AAGD;;;;;;;;AAED,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,cAAjE,EAAiF,YAAA;AAC/E,kBAAM,MAAM,GAAG,IAAI,sBAAA,CAAA,OAAJ,CACb,KAAI,CAAC,oBAAL,CAA0B,OAA1B,KAAoC,0BAAA,CAAA,OAAA,CAAyB,UADhD,CAAf;;AAGA,kBAAI,MAAM,CAAC,UAAP,OAAwB,0BAAA,CAAA,OAAA,CAAyB,eAArD,EAAsE;AACpE,gBAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,sCAAjB;AACD;;AACD,cAAA,KAAI,CAAC,0BAAL,CAAgC,MAAhC,EAAwC,OAAxC;AACD,aARD;;;;;;;;;;;;AAUH,GAlCa;;AAoCN,EAAA,2BAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,MAAnB,EAAiD,KAAjD,EAAoE;AAClE,SAAK,eAAL,CAAqB,UAAA,QAAA,EAAQ;AAC3B,MAAA,OAAA,CAAA,OAAA,CAAM,EAAN,CAAS,QAAQ,CAAC,iBAAlB,EAAqC,GAArC,CAAyC,UAAA,CAAA,EAAC;AAAI,eAAA,CAAC,CAAC,IAAF,CAAO,QAAP,EAAA,MAAA,CAAA;AAAwB,OAAtE;AACD,KAFD;AAIA;;AACA,QAAI,KAAK,eAAT,EAA0B;AAClB,UAAA,EAAA,GAIF,KAAK,qBAJH;AAAA,UACJ,uBAAuB,GAAA,EAAA,CAAA,uBADnB;AAAA,UAEJ,mBAAmB,GAAA,EAAA,CAAA,mBAFf;AAAA,UAGJ,WAAW,GAAA,EAAA,CAAA,WAHP;AAKN,UAAM,UAAU,GAA8B;AAC5C,QAAA,iBAAiB,EAAE,KAAK,qBAAL,CAA2B,iBADF;AAE5C,QAAA,iBAAiB,EAAE,WAAW,KAAK,IAAhB,GAAuB,CAAvB,GAA2B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,KAAa,WAAxB,CAFF;AAG5C,QAAA,aAAa,EAAE,0BAAA,CAAA,OAAA,CAAyB,MAAM,CAAC,UAAP,EAAzB,CAH6B;AAI5C,QAAA,uBAAuB,EAAA,uBAJqB;AAK5C,QAAA,mBAAmB,EAAA,mBALyB;AAM5C,QAAA,UAAU,EAAE,KAAK;AAN2B,OAA9C;;AASA,UAAI,UAAU,CAAC,iBAAX,KAAiC,CAArC,EAAwC;AACtC,QAAA,UAAU,CAAC,mBAAX,GAAkC,KAAK,IAAI,KAAK,CAAC,OAAhB,IAA4B,EAA7D;AACA,eAAO,UAAU,CAAC,iBAAlB;AACA,aAAK,eAAL,CAAqB,YAArB,CAAkC,oBAAlC,EAAwD,UAAxD;AACD,OAJD,MAIO,IAAI,MAAM,CAAC,SAAP,MAAsB,MAAM,CAAC,wBAAP,EAA1B,EAA6D;AAClE,QAAA,UAAU,CAAC,mBAAX,GAAkC,KAAK,IAAI,KAAK,CAAC,OAAhB,IAA4B,EAA7D;AACA,aAAK,eAAL,CAAqB,YAArB,CAAkC,eAAlC,EAAmD,UAAnD;AACD,OAHM,MAGA;AACL,aAAK,eAAL,CAAqB,YAArB,CAAkC,cAAlC,EAAkD,UAAlD;AACD;AACF;AACF,GAhCO;;AAkCA,EAAA,2BAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACE;AACA,QAAI,CAAC,KAAK,qBAAL,CAA2B,eAAhC,EAAiD;AAC/C,UAAM,cAAc,GAAG,KAAK,qBAAL,CAA2B,8BAA3B,CAA0D,cAA1D,GAA2E,CAA3E,CAAvB;AACA,WAAK,mCAAL,CAAyC,cAAzC;AACD;;AACD,SAAK,MAAL,CAAY,IAAZ,CAAiB,6BAAjB;AACD,GAPO;;AASR,EAAA,2BAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAwC,KAAxC,EAA2D;AAA3D,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,SAAS,GAAG,KAAK,oBAAL,CAA0B,gBAA1B,CAChB,YAAA;AAAA,aAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AACE,cAAI,KAAK,sBAAL,CAA4B,KAA5B,OAAwC,6BAAA,CAAA,OAAA,CAA4B,YAAxE,EAAsF;AACpF,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,OAAjE,EAA0E,YAAA;AACxE,cAAA,KAAI,CAAC,aAAL,CAAmB,IAAnB;AACD,aAFD;AAGD,WAJD,MAIO;AACL,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,SAAjE,EAA4E,YAAA;AAC1E,cAAA,KAAI,CAAC,eAAL;AACD,aAFD;AAGD;;AACD,eAAK,eAAL,IAAwB,CAAxB;;;;;OAVF,CAAA;AAWC,KAZe,EAahB,YAAA;AACE,MAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,gBAAjB;AACD,KAfe,CAAlB;;AAiBA,QAAI,CAAC,SAAL,EAAgB;AACd,WAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,IAAjE,EAAuE,YAAA;AACrE,QAAA,KAAI,CAAC,gBAAL,CAAsB,MAAtB,EAA8B,KAA9B,EAAqC,KAArC;AACD,OAFD;AAGD;;AAED,WAAO,SAAP;AACD,GAzBD;;AA2Bc,EAAA,2BAAA,CAAA,SAAA,CAAA,eAAA,GAAd,YAAA;;;;;;;;;AACE,gBAAI,CAAC,KAAK,oBAAL,CAA0B,2BAA1B,EAAL,EAA8D;AAC5D,mBAAK,oBAAL,CAA0B,wBAA1B,CAAmD,KAAnD;;AACA,mBAAK,eAAL,CAAqB,UAAA,QAAA,EAAQ;AAC3B,gBAAA,OAAA,CAAA,OAAA,CAAM,EAAN,CAAS,QAAQ,CAAC,4BAAlB,EAAgD,GAAhD,CAAoD,UAAA,CAAA,EAAC;AAAI,yBAAA,CAAC,CAAC,IAAF,CAAO,QAAP,EAAA,IAAA,CAAA;AAAsB,iBAA/E;AACD,eAFD;AAGD;;AAED,iBAAK,oBAAL,CAA0B,KAA1B;;;;;;AAEE,mBAAA,CAAA;AAAA;AAAA,cAAM,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,KAAK,YAAL,CAAkB,qBAAlB,CAAjC,EAA2E,CAC/E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,OAAjC,EAA0C,CACxC,IAAI,2BAAA,CAAA,OAAJ,CAA8B,KAAK,qBAAnC,CADwC,EAExC,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,WAAjC,EAA8C,CAC5C,IAAI,6BAAA,CAAA,OAAJ,CAAgC,KAAK,qBAArC,CAD4C,EAE5C,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,qBAAjC,CAF4C,EAG5C,IAAI,4BAAA,CAAA,OAAJ,CAA+B,KAAK,qBAApC,CAH4C,CAA9C,CAFwC,EAOxC,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,qBAAlC,CAPwC,CAA1C,CAFF,EAWE,KAAK,aAAL,CAAmB,mBAXrB,CAD+E,EAc/E;AACA,gBAAI,uBAAA,CAAA,OAAJ,CAA0B,KAAK,qBAA/B,CAf+E,EAgB/E,IAAI,aAAA,CAAA,OAAJ,CACE,KAAK,MADP,EAEE,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,MAAzB,EAAiC,eAAjC,EAAkD,CAChD,IAAI,sBAAA,CAAA,OAAJ,CAAyB,KAAK,qBAA9B,CADgD,EAEhD,IAAI,eAAA,CAAA,OAAJ,CAAkB,KAAK,qBAAvB,CAFgD,EAGhD,IAAI,yBAAA,CAAA,OAAJ,CAA4B,KAAK,qBAAjC,CAHgD,EAIhD,IAAI,kCAAA,CAAA,OAAJ,CAAqC,KAAK,qBAA1C,CAJgD,EAKhD,IAAI,qCAAA,CAAA,OAAJ,CAAwC,KAAK,qBAA7C,CALgD,EAMhD,IAAI,0BAAA,CAAA,OAAJ,CAA6B,KAAK,qBAAlC,CANgD,CAAlD,CAFF,EAUE,KAAK,aAAL,CAAmB,mBAVrB,CAhB+E,CAA3E,EA4BH,GA5BG,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AA8BA,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,gBAAjE,EAAmF,YAAA;AACjF;AACA,kBAAI,KAAI,CAAC,eAAT,EAA0B;AACxB,gBAAA,KAAI,CAAC,eAAL,CAAqB,gBAArB,CAAsC,oBAAtC;AACD;;AACD,cAAA,KAAI,CAAC,sBAAL;AACD,aAND;;;;;;iCAQA;;AACA,iBAAK,sBAAL,CAA4B,OAA5B,CAAoC,8BAAA,CAAA,OAAA,CAA6B,gBAAjE,EAAmF,YAAA;AACjF,cAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,yCAAjB;;AACA,kBAAM,MAAM,GAAG,IAAI,sBAAA,CAAA,OAAJ,CACb,KAAI,CAAC,oBAAL,CAA0B,OAA1B,KAAoC,0BAAA,CAAA,OAAA,CAAyB,UADhD,CAAf;;AAGA,cAAA,KAAI,CAAC,0BAAL,CAAgC,MAAhC,EAAwC,OAAxC;AACD,aAND;;;;;;AAQF,iBAAK,oBAAL,CAA0B,sBAA1B;;;;;;;AACD,GA1Da;;AA4DN,EAAA,2BAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,QAArB,EAAqC;AACnC,WAAU,QAAQ,GAAA,GAAR,GAAY,KAAK,aAAL,CAAmB,SAA/B,GAAwC,GAAxC,GAA4C,KAAK,aAAL,CAAmB,WAAnB,CAA+B,UAArF;AACD,GAFO;;AAIA,EAAA,2BAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,KAA7B,EAAyC;AACvC,QAAM,OAAO,GAAG,iCAAiC,IAAjC,CAAsC,KAAK,IAAI,KAAK,CAAC,OAArD,CAAhB;;AACA,QAAI,OAAO,IAAI,OAAO,CAAC,MAAR,GAAiB,CAAhC,EAAmC;AACjC,aAAO,MAAM,CAAC,OAAO,CAAC,CAAD,CAAR,CAAb;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPO;;AASM,EAAA,2BAAA,CAAA,SAAA,CAAA,mCAAA,GAAd,UAAkD,cAAlD,EAAwE;;;;;iBAClE,KAAK,qBAAL,CAA2B,eAA3B,CAA2C,mBAA3C,E,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACF,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,qBAAL,CAA2B,qBAA3B,CAAiD,0BAAjD,CACJ,cADI,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAIA,mBAAA,CAAA;AAAA;AAAA,cAAM,8BAAA,CAAA,OAAA,CAA6B,mCAA7B,CACJ,KAAK,qBAAL,CAA2B,gBADvB,EAEJ,cAFI,EAGJ,KAAK,qBAAL,CAA2B,MAHvB,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;AAMH,GAZa;;AAcd,EAAA,2BAAA,CAAA,SAAA,CAAA,0BAAA,GAAA,UAA2B,MAA3B,EAAyD,KAAzD,EAA4E;AAA5E,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,MAAL,CAAY,IAAZ,CAAiB,sBAAoB,0BAAA,CAAA,OAAA,CAAyB,MAAM,CAAC,UAAP,EAAzB,CAArC;;AACA,QAAI,CAAC,MAAM,CAAC,UAAP,EAAL,EAA0B;AACxB,UAAI,KAAK,qBAAL,CAA2B,cAA/B,EAA+C;AAC7C,aAAK,qBAAL,CAA2B,cAA3B,CAA0C,uBAA1C,CAAkE,MAAlE;AACD;AACF;;AACD,QAAI,MAAM,CAAC,UAAP,OAAwB,0BAAA,CAAA,OAAA,CAAyB,eAArD,EAAsE;AACpE,WAAK,iBAAL,CAAuB,YAAA;AACrB,QAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,yDAAjB;AACD,OAFD;AAGA,aAAO,IAAP;AACD;;AACD,QAAI,MAAM,CAAC,UAAP,OAAwB,0BAAA,CAAA,OAAA,CAAyB,yBAArD,EAAgF;AAC9E,WAAK,oBAAL,CAA0B,oBAA1B;;AACA,WAAK,eAAL,CAAqB,UAAC,QAAD,EAA6B;AAChD,QAAA,OAAA,CAAA,OAAA,CAAM,EAAN,CAAS,QAAQ,CAAC,6BAAlB,EAAiD,GAAjD,CAAqD,UAAA,CAAA,EAAC;AAAI,iBAAA,CAAC,CAAC,IAAF,CAAA,QAAA,GAAA;AAAkB,SAA5E;AACD,OAFD;AAGA,aAAO,KAAP;AACD;;AACD,QAAI,MAAM,CAAC,UAAP,EAAJ,EAAyB;AACvB,WAAK,MAAL,CAAY,KAAZ,CAAkB,iCAAlB;;AACA,UAAI,KAAK,qBAAL,CAA2B,mBAA/B,EAAoD;AAClD,aAAK,qBAAL,CAA2B,mBAA3B,CAA+C,gBAA/C;AACD;AACF;;AACD,QAAI,MAAM,CAAC,SAAP,MAAsB,MAAM,CAAC,UAAP,EAA1B,EAA+C;AAC7C,UAAI,KAAK,qBAAL,CAA2B,mBAA/B,EAAoD;AAClD,YAAM,SAAS,GAAG,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAvB,CAAlB;;AACA,YAAI,SAAJ,EAAe;AACb,eAAK,MAAL,CAAY,IAAZ,CACE,mCAAiC,0BAAA,CAAA,OAAA,CAAyB,MAAM,CAAC,UAAP,EAAzB,CAAjC,IACE,KAAK,GAAG,iBAAe,KAAK,CAAC,OAAxB,GAAoC,EAD3C,CADF;AAKD,SAND,MAMO;AACL,eAAK,MAAL,CAAY,KAAZ,CACE,6BAA2B,0BAAA,CAAA,OAAA,CAAyB,MAAM,CAAC,UAAP,EAAzB,CAA3B,IACE,KAAK,GAAG,iBAAe,KAAK,CAAC,OAAxB,GAAoC,EAD3C,CADF;AAKD;;AACD,eAAO,SAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GA9CD;;AAgDA,EAAA,2BAAA,CAAA,SAAA,CAAA,wBAAA,GAAA,UAAyB,gBAAzB,EAAiD;AAC/C,QAAI,KAAK,qBAAL,IAA8B,KAAK,qBAAL,CAA2B,0BAA7D,EAAyF;AACvF,WAAK,MAAL,CAAY,IAAZ,CAAiB,wCAAsC,gBAAtC,GAAsD,OAAvE;AACA,WAAK,qBAAL,CAA2B,0BAA3B,CAAsD,wBAAtD,CACE,gBADF;AAGD;AACF,GAPD;;AASM,EAAA,2BAAA,CAAA,SAAA,CAAA,0BAAA,GAAN,UAAiC,oBAAjC,EAA8D;;;;;;gBAE1D,EAAA,KAAK,qBAAL,IACA,KAAK,qBAAL,CAA2B,0BAD3B,IAEA,CAAC,KAAK,qBAAL,CAA2B,eAF5B,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAIM,YAAA,eAAe,GAAG,KAAK,qBAAL,CAA2B,0BAA3B,CAAsD,gBAAtD,EAAlB;AAEN,iBAAK,qBAAL,CAA2B,0BAA3B,CAAsD,uBAAtD,CACE,oBADF;AAGM,YAAA,eAAe,GAAG,KAAK,qBAAL,CAA2B,0BAA3B,CAAsD,gBAAtD,EAAlB;gBAEF,EAAA,eAAe,KAAK,eAApB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACF,iBAAK,MAAL,CAAY,IAAZ,CACE,mCAAiC,oBAAjC,GAAqD,wBAArD,GAA8E,eAA9E,GAA6F,WAA7F,GAAyG,eAAzG,GAAwH,OAD1H;AAGA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,mCAAL,CAAyC,eAAzC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;AAGL,GApBK;;AAsBN,EAAA,2BAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,QAArB,EAAqC;AACnC,QAAI,CAAC,CAAC,KAAK,qBAAP,IAAgC,KAAK,qBAAL,CAA2B,eAA/D,EAAgF;AAC9E,WAAK,qBAAL,CAA2B,eAA3B,CAA2C,KAA3C,CAAiD,CAAC,QAAD,CAAjD;AACD;AACF,GAJD;;AAMA,EAAA,2BAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAAsB,QAAtB,EAAsC;AACpC,QAAI,CAAC,CAAC,KAAK,qBAAP,IAAgC,KAAK,qBAAL,CAA2B,eAA/D,EAAgF;AAC9E,WAAK,qBAAL,CAA2B,eAA3B,CAA2C,MAA3C,CAAkD,CAAC,QAAD,CAAlD;AACD;AACF,GAJD;;AAMA,EAAA,2BAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;AACU,QAAA,gBAAgB,GAAK,KAAK,qBAAL,CAAL,gBAAhB;;AACR,QAAI,CAAC,gBAAL,EAAuB;AACrB,WAAK,MAAL,CAAY,IAAZ,CAAiB,yBAAjB;AACA,aAAO,EAAP;AACD;;AACD,QAAM,cAAc,GAAG,KAAK,aAAL,CAAmB,WAAnB,CAA+B,UAAtD;AACA,WAAO,gBAAgB,CAAC,mCAAjB,CAAqD,cAArD,CAAP;AACD,GARD;;AAUA,EAAA,2BAAA,CAAA,SAAA,CAAA,gCAAA,GAAA,UAAiC,eAAjC,EAAiE;AAC/D,SAAK,eAAL,CAAqB,UAAA,QAAA,EAAQ;AAC3B,MAAA,OAAA,CAAA,OAAA,CAAM,EAAN,CAAS,QAAQ,CAAC,gCAAlB,EAAoD,GAApD,CAAwD,UAAA,CAAA,EAAC;AACvD,eAAA,CAAC,CAAC,IAAF,CAAO,QAAP,EAAiB,eAAjB,CAAA;AAAiC,OADnC;AAGD,KAJD;AAKD,GAND;;AAptBe,EAAA,2BAAA,CAAA,mBAAA,GAAsB,CAAC,EAAvB;AACA,EAAA,2BAAA,CAAA,mBAAA,GAAsB,CAAC,EAAvB;AACA,EAAA,2BAAA,CAAA,qBAAA,GAAwB,KAAxB;AAytBjB,SAAA,2BAAA;AAAC,CA7uBD,EAAA;;kBAAqB,2B","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DefaultActiveSpeakerDetector_1 = require(\"../activespeakerdetector/DefaultActiveSpeakerDetector\");\nvar DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\nvar DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\nvar ConnectionHealthData_1 = require(\"../connectionhealthpolicy/ConnectionHealthData\");\nvar SignalingAndMetricsConnectionMonitor_1 = require(\"../connectionmonitor/SignalingAndMetricsConnectionMonitor\");\nvar DefaultEventController_1 = require(\"../eventcontroller/DefaultEventController\");\nvar Maybe_1 = require(\"../maybe/Maybe\");\nvar MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\nvar MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nvar MeetingSessionVideoAvailability_1 = require(\"../meetingsession/MeetingSessionVideoAvailability\");\nvar DefaultPingPong_1 = require(\"../pingpong/DefaultPingPong\");\nvar DefaultRealtimeController_1 = require(\"../realtimecontroller/DefaultRealtimeController\");\nvar AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\nvar DefaultSessionStateController_1 = require(\"../sessionstatecontroller/DefaultSessionStateController\");\nvar SessionStateControllerAction_1 = require(\"../sessionstatecontroller/SessionStateControllerAction\");\nvar SessionStateControllerState_1 = require(\"../sessionstatecontroller/SessionStateControllerState\");\nvar SessionStateControllerTransitionResult_1 = require(\"../sessionstatecontroller/SessionStateControllerTransitionResult\");\nvar DefaultSignalingClient_1 = require(\"../signalingclient/DefaultSignalingClient\");\nvar SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nvar DefaultStatsCollector_1 = require(\"../statscollector/DefaultStatsCollector\");\nvar AttachMediaInputTask_1 = require(\"../task/AttachMediaInputTask\");\nvar CleanRestartedSessionTask_1 = require(\"../task/CleanRestartedSessionTask\");\nvar CleanStoppedSessionTask_1 = require(\"../task/CleanStoppedSessionTask\");\nvar CreatePeerConnectionTask_1 = require(\"../task/CreatePeerConnectionTask\");\nvar CreateSDPTask_1 = require(\"../task/CreateSDPTask\");\nvar FinishGatheringICECandidatesTask_1 = require(\"../task/FinishGatheringICECandidatesTask\");\nvar JoinAndReceiveIndexTask_1 = require(\"../task/JoinAndReceiveIndexTask\");\nvar LeaveAndReceiveLeaveAckTask_1 = require(\"../task/LeaveAndReceiveLeaveAckTask\");\nvar ListenForVolumeIndicatorsTask_1 = require(\"../task/ListenForVolumeIndicatorsTask\");\nvar MonitorTask_1 = require(\"../task/MonitorTask\");\nvar OpenSignalingConnectionTask_1 = require(\"../task/OpenSignalingConnectionTask\");\nvar ParallelGroupTask_1 = require(\"../task/ParallelGroupTask\");\nvar ReceiveAudioInputTask_1 = require(\"../task/ReceiveAudioInputTask\");\nvar ReceiveTURNCredentialsTask_1 = require(\"../task/ReceiveTURNCredentialsTask\");\nvar ReceiveVideoInputTask_1 = require(\"../task/ReceiveVideoInputTask\");\nvar ReceiveVideoStreamIndexTask_1 = require(\"../task/ReceiveVideoStreamIndexTask\");\nvar SendAndReceiveDataMessagesTask_1 = require(\"../task/SendAndReceiveDataMessagesTask\");\nvar SerialGroupTask_1 = require(\"../task/SerialGroupTask\");\nvar SetLocalDescriptionTask_1 = require(\"../task/SetLocalDescriptionTask\");\nvar SetRemoteDescriptionTask_1 = require(\"../task/SetRemoteDescriptionTask\");\nvar SubscribeAndReceiveSubscribeAckTask_1 = require(\"../task/SubscribeAndReceiveSubscribeAckTask\");\nvar TimeoutTask_1 = require(\"../task/TimeoutTask\");\nvar WaitForAttendeePresenceTask_1 = require(\"../task/WaitForAttendeePresenceTask\");\nvar DefaultTransceiverController_1 = require(\"../transceivercontroller/DefaultTransceiverController\");\nvar SimulcastTransceiverController_1 = require(\"../transceivercontroller/SimulcastTransceiverController\");\nvar DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\nvar AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\nvar VideoAdaptiveProbePolicy_1 = require(\"../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy\");\nvar DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\nvar DefaultVideoStreamIndex_1 = require(\"../videostreamindex/DefaultVideoStreamIndex\");\nvar SimulcastVideoStreamIndex_1 = require(\"../videostreamindex/SimulcastVideoStreamIndex\");\nvar DefaultVideoTileController_1 = require(\"../videotilecontroller/DefaultVideoTileController\");\nvar DefaultVideoTileFactory_1 = require(\"../videotilefactory/DefaultVideoTileFactory\");\nvar DefaultSimulcastUplinkPolicy_1 = require(\"../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy\");\nvar NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\nvar DefaultVolumeIndicatorAdapter_1 = require(\"../volumeindicatoradapter/DefaultVolumeIndicatorAdapter\");\nvar AudioVideoControllerState_1 = require(\"./AudioVideoControllerState\");\nvar DefaultAudioVideoController = /** @class */ (function () {\n    function DefaultAudioVideoController(configuration, logger, webSocketAdapter, mediaStreamBroker, reconnectController) {\n        this.connectionHealthData = new ConnectionHealthData_1.default();\n        this.observerQueue = new Set();\n        this.meetingSessionContext = new AudioVideoControllerState_1.default();\n        this.enableSimulcast = false;\n        this.totalRetryCount = 0;\n        this._logger = logger;\n        this.sessionStateController = new DefaultSessionStateController_1.default(this._logger);\n        this._configuration = configuration;\n        this.enableSimulcast =\n            configuration.enableUnifiedPlanForChromiumBasedBrowsers &&\n                configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers &&\n                new DefaultBrowserBehavior_1.default().hasChromiumWebRTC();\n        this._webSocketAdapter = webSocketAdapter;\n        this._realtimeController = new DefaultRealtimeController_1.default();\n        this._realtimeController.realtimeSetLocalAttendeeId(configuration.credentials.attendeeId, configuration.credentials.externalUserId);\n        this._activeSpeakerDetector = new DefaultActiveSpeakerDetector_1.default(this._realtimeController, configuration.credentials.attendeeId, this.handleHasBandwidthPriority.bind(this));\n        this._mediaStreamBroker = mediaStreamBroker;\n        this._reconnectController = reconnectController;\n        this._videoTileController = new DefaultVideoTileController_1.default(new DefaultVideoTileFactory_1.default(), this, this._logger);\n        this._audioMixController = new DefaultAudioMixController_1.default();\n        this.meetingSessionContext.logger = this._logger;\n        this._eventController = new DefaultEventController_1.default(this);\n    }\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"configuration\", {\n        get: function () {\n            return this._configuration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"realtimeController\", {\n        get: function () {\n            return this._realtimeController;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"activeSpeakerDetector\", {\n        get: function () {\n            return this._activeSpeakerDetector;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"videoTileController\", {\n        get: function () {\n            return this._videoTileController;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"audioMixController\", {\n        get: function () {\n            return this._audioMixController;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"eventController\", {\n        get: function () {\n            return this._eventController;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"logger\", {\n        get: function () {\n            return this._logger;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"rtcPeerConnection\", {\n        get: function () {\n            return (this.meetingSessionContext && this.meetingSessionContext.peer) || null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DefaultAudioVideoController.prototype, \"mediaStreamBroker\", {\n        get: function () {\n            return this._mediaStreamBroker;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DefaultAudioVideoController.prototype.getRTCPeerConnectionStats = function (selector) {\n        if (!this.rtcPeerConnection) {\n            return null;\n        }\n        return this.rtcPeerConnection.getStats(selector);\n    };\n    DefaultAudioVideoController.prototype.addObserver = function (observer) {\n        this.logger.info('adding meeting observer');\n        this.observerQueue.add(observer);\n    };\n    DefaultAudioVideoController.prototype.removeObserver = function (observer) {\n        this.logger.info('removing meeting observer');\n        this.observerQueue.delete(observer);\n    };\n    DefaultAudioVideoController.prototype.forEachObserver = function (observerFunc) {\n        var e_1, _a;\n        var _this = this;\n        var _loop_1 = function (observer) {\n            new AsyncScheduler_1.default().start(function () {\n                if (_this.observerQueue.has(observer)) {\n                    observerFunc(observer);\n                }\n            });\n        };\n        try {\n            for (var _b = __values(this.observerQueue), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var observer = _c.value;\n                _loop_1(observer);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    DefaultAudioVideoController.prototype.start = function () {\n        var _this = this;\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, function () {\n            _this.actionConnect(false);\n        });\n    };\n    DefaultAudioVideoController.prototype.actionConnect = function (reconnecting) {\n        return __awaiter(this, void 0, void 0, function () {\n            var simulcastPolicy, error_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.connectionHealthData.reset();\n                        this.meetingSessionContext = new AudioVideoControllerState_1.default();\n                        this.meetingSessionContext.logger = this.logger;\n                        this.meetingSessionContext.eventController = this.eventController;\n                        this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior_1.default({\n                            enableUnifiedPlanForChromiumBasedBrowsers: this.configuration\n                                .enableUnifiedPlanForChromiumBasedBrowsers,\n                        });\n                        this.meetingSessionContext.meetingSessionConfiguration = this.configuration;\n                        this.meetingSessionContext.signalingClient = new DefaultSignalingClient_1.default(this._webSocketAdapter, this.logger);\n                        this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;\n                        this.meetingSessionContext.realtimeController = this._realtimeController;\n                        this.meetingSessionContext.audioMixController = this._audioMixController;\n                        this.meetingSessionContext.audioVideoController = this;\n                        if (this.enableSimulcast) {\n                            this.meetingSessionContext.transceiverController = new SimulcastTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n                        }\n                        else {\n                            this.meetingSessionContext.transceiverController = new DefaultTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n                        }\n                        this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter_1.default(this.logger, this._realtimeController, DefaultAudioVideoController.MIN_VOLUME_DECIBELS, DefaultAudioVideoController.MAX_VOLUME_DECIBELS);\n                        this.meetingSessionContext.videoTileController = this._videoTileController;\n                        this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;\n                        this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;\n                        this.meetingSessionContext.enableSimulcast = this.enableSimulcast;\n                        if (this.enableSimulcast) {\n                            simulcastPolicy = new DefaultSimulcastUplinkPolicy_1.default(this.configuration.credentials.attendeeId, this.meetingSessionContext.logger);\n                            simulcastPolicy.addObserver(this);\n                            this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;\n                            this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy_1.default(this.logger, this.meetingSessionContext.videoTileController);\n                            this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex_1.default(this.logger);\n                        }\n                        else {\n                            this.meetingSessionContext.enableSimulcast = false;\n                            this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex_1.default(this.logger);\n                            if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n                                this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n                            }\n                            if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n                                this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n                            }\n                        }\n                        this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability_1.default();\n                        this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n                        this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet_1.default();\n                        this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet_1.default();\n                        this.meetingSessionContext.statsCollector = new DefaultStatsCollector_1.default(this, this.logger, this.meetingSessionContext.browserBehavior);\n                        this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor_1.default(this, this._realtimeController, this._videoTileController, this.connectionHealthData, new DefaultPingPong_1.default(this.meetingSessionContext.signalingClient, DefaultAudioVideoController.PING_PONG_INTERVAL_MS, this.logger), this.meetingSessionContext.statsCollector);\n                        this.meetingSessionContext.reconnectController = this._reconnectController;\n                        this.meetingSessionContext.audioDeviceInformation = {};\n                        this.meetingSessionContext.videoDeviceInformation = {};\n                        if (!reconnecting) {\n                            this.totalRetryCount = 0;\n                            this._reconnectController.reset();\n                            this.forEachObserver(function (observer) {\n                                Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(function (f) { return f.bind(observer)(false); });\n                            });\n                            /* istanbul ignore else */\n                            if (this.eventController) {\n                                this.eventController.publishEvent('meetingStartRequested');\n                            }\n                        }\n                        if (this._reconnectController.hasStartedConnectionAttempt()) {\n                            // This does not reset the reconnect deadline, but declare it's not the first connection.\n                            this._reconnectController.startedConnectionAttempt(false);\n                        }\n                        else {\n                            this._reconnectController.startedConnectionAttempt(true);\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [\n                                new MonitorTask_1.default(this.meetingSessionContext, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData),\n                                new ReceiveAudioInputTask_1.default(this.meetingSessionContext),\n                                new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [\n                                    new SerialGroupTask_1.default(this.logger, 'Signaling', [\n                                        new OpenSignalingConnectionTask_1.default(this.meetingSessionContext),\n                                        new ListenForVolumeIndicatorsTask_1.default(this.meetingSessionContext),\n                                        new SendAndReceiveDataMessagesTask_1.default(this.meetingSessionContext),\n                                        new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext),\n                                        new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext),\n                                        // TODO: ensure index handler does not race with incoming index update\n                                        new ReceiveVideoStreamIndexTask_1.default(this.meetingSessionContext),\n                                    ]),\n                                    new SerialGroupTask_1.default(this.logger, 'Peer', [\n                                        new CreatePeerConnectionTask_1.default(this.meetingSessionContext),\n                                        new AttachMediaInputTask_1.default(this.meetingSessionContext),\n                                        new CreateSDPTask_1.default(this.meetingSessionContext),\n                                        new SetLocalDescriptionTask_1.default(this.meetingSessionContext),\n                                        new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),\n                                        new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),\n                                        this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0\n                                            ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [\n                                                new WaitForAttendeePresenceTask_1.default(this.meetingSessionContext),\n                                                new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                                            ]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs)\n                                            : new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                                    ]),\n                                ]), this.configuration.connectionTimeoutMs),\n                            ]).run()];\n                    case 2:\n                        _a.sent();\n                        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, function () {\n                            /* istanbul ignore else */\n                            if (_this.eventController) {\n                                _this.eventController.publishEvent('meetingStartSucceeded', {\n                                    maxVideoTileCount: _this.meetingSessionContext.maxVideoTileCount,\n                                    poorConnectionCount: _this.meetingSessionContext.poorConnectionCount,\n                                    retryCount: _this.totalRetryCount,\n                                    signalingOpenDurationMs: _this.meetingSessionContext.signalingOpenDurationMs,\n                                });\n                            }\n                            _this.meetingSessionContext.startTimeMs = Date.now();\n                            _this.actionFinishConnecting();\n                        });\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, function () { return __awaiter(_this, void 0, void 0, function () {\n                            var status;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error_1) || MeetingSessionStatusCode_1.default.TaskFailed);\n                                        return [4 /*yield*/, this.actionDisconnect(status, true, error_1)];\n                                    case 1:\n                                        _a.sent();\n                                        if (!this.handleMeetingSessionStatus(status, error_1)) {\n                                            this.notifyStop(status, error_1);\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.connectionHealthData.setConnectionStartTime();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.actionFinishConnecting = function () {\n        this.meetingSessionContext.videoDuplexMode = SignalingProtocol_js_1.SdkStreamServiceType.RX;\n        if (!this.meetingSessionContext.enableSimulcast) {\n            this.enforceBandwidthLimitationForSender(this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]);\n        }\n        this.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.audioVideoDidStart).map(function (f) { return f.bind(observer)(); });\n        });\n        this._reconnectController.reset();\n    };\n    DefaultAudioVideoController.prototype.stop = function () {\n        var _this = this;\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Disconnect, function () {\n            _this.actionDisconnect(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.Left), false, null);\n        });\n    };\n    DefaultAudioVideoController.prototype.actionDisconnect = function (status, reconnecting, error) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stopError_1, cleanError_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStop'), [\n                                new TimeoutTask_1.default(this.logger, new LeaveAndReceiveLeaveAckTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs),\n                            ]).run()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        stopError_1 = _a.sent();\n                        this.logger.info('fail to stop');\n                        return [3 /*break*/, 3];\n                    case 3:\n                        _a.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoClean'), [\n                                new TimeoutTask_1.default(this.logger, new CleanStoppedSessionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs),\n                            ]).run()];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        cleanError_1 = _a.sent();\n                        this.logger.info('fail to clean');\n                        return [3 /*break*/, 6];\n                    case 6:\n                        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishDisconnecting, function () {\n                            if (!reconnecting) {\n                                _this.notifyStop(status, error);\n                            }\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.update = function () {\n        var _this = this;\n        var result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, function () {\n            _this.actionUpdate(true);\n        });\n        return (result === SessionStateControllerTransitionResult_1.default.Transitioned ||\n            result === SessionStateControllerTransitionResult_1.default.DeferredTransition);\n    };\n    DefaultAudioVideoController.prototype.restartLocalVideo = function (callback) {\n        var _this = this;\n        var restartVideo = function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._videoTileController.hasStartedLocalVideoTile()) return [3 /*break*/, 2];\n                        this.logger.info('stopping local video tile prior to local video restart');\n                        this._videoTileController.stopLocalVideoTile();\n                        this.logger.info('preparing local video restart update');\n                        return [4 /*yield*/, this.actionUpdate(false)];\n                    case 1:\n                        _a.sent();\n                        this.logger.info('starting local video tile for local video restart');\n                        this._videoTileController.startLocalVideoTile();\n                        _a.label = 2;\n                    case 2:\n                        this.logger.info('finalizing local video restart update');\n                        return [4 /*yield*/, this.actionUpdate(true)];\n                    case 3:\n                        _a.sent();\n                        callback();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        var result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, function () {\n            restartVideo();\n        });\n        return (result === SessionStateControllerTransitionResult_1.default.Transitioned ||\n            result === SessionStateControllerTransitionResult_1.default.DeferredTransition);\n    };\n    DefaultAudioVideoController.prototype.restartLocalAudio = function (callback) {\n        return __awaiter(this, void 0, void 0, function () {\n            var audioStream, error_2, audioTrack, replaceTrackSuccess;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        audioStream = null;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.mediaStreamBroker.acquireAudioInputStream()];\n                    case 2:\n                        audioStream = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_2 = _a.sent();\n                        this.logger.info('could not acquire audio stream from mediaStreamBroker');\n                        return [3 /*break*/, 4];\n                    case 4:\n                        if (!audioStream || audioStream.getAudioTracks().length < 1) {\n                            throw new Error('could not acquire audio track');\n                        }\n                        this.connectionHealthData.reset();\n                        this.connectionHealthData.setConnectionStartTime();\n                        audioTrack = audioStream.getAudioTracks()[0];\n                        if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n                            throw new Error('no active meeting and peer connection');\n                        }\n                        replaceTrackSuccess = false;\n                        if (!this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.meetingSessionContext.transceiverController.replaceAudioTrack(audioTrack)];\n                    case 5:\n                        replaceTrackSuccess = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, DefaultTransceiverController_1.default.replaceAudioTrackForSender(this.meetingSessionContext.localAudioSender, audioTrack)];\n                    case 7:\n                        replaceTrackSuccess = _a.sent();\n                        _a.label = 8;\n                    case 8:\n                        this.meetingSessionContext.activeAudioInput = audioStream;\n                        callback();\n                        if (replaceTrackSuccess) {\n                            return [2 /*return*/, Promise.resolve()];\n                        }\n                        else {\n                            return [2 /*return*/, Promise.reject()];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.actionUpdate = function (notify) {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_3;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoUpdate'), [\n                                new ReceiveVideoInputTask_1.default(this.meetingSessionContext),\n                                new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [\n                                    new AttachMediaInputTask_1.default(this.meetingSessionContext),\n                                    new CreateSDPTask_1.default(this.meetingSessionContext),\n                                    new SetLocalDescriptionTask_1.default(this.meetingSessionContext),\n                                    new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),\n                                    new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),\n                                    new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                                ]), this.configuration.connectionTimeoutMs),\n                            ]).run()];\n                    case 1:\n                        _a.sent();\n                        if (notify) {\n                            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, function () {\n                                _this.actionFinishUpdating();\n                            });\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_3 = _a.sent();\n                        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, function () {\n                            var status = new MeetingSessionStatus_1.default(_this.getMeetingStatusCode(error_3) || MeetingSessionStatusCode_1.default.TaskFailed);\n                            if (status.statusCode() !== MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n                                _this.logger.info('failed to update audio-video session');\n                            }\n                            _this.handleMeetingSessionStatus(status, error_3);\n                        });\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.notifyStop = function (status, error) {\n        this.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.audioVideoDidStop).map(function (f) { return f.bind(observer)(status); });\n        });\n        /* istanbul ignore else */\n        if (this.eventController) {\n            var _a = this.meetingSessionContext, signalingOpenDurationMs = _a.signalingOpenDurationMs, poorConnectionCount = _a.poorConnectionCount, startTimeMs = _a.startTimeMs;\n            var attributes = {\n                maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n                meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n                meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],\n                signalingOpenDurationMs: signalingOpenDurationMs,\n                poorConnectionCount: poorConnectionCount,\n                retryCount: this.totalRetryCount,\n            };\n            if (attributes.meetingDurationMs === 0) {\n                attributes.meetingErrorMessage = (error && error.message) || '';\n                delete attributes.meetingDurationMs;\n                this.eventController.publishEvent('meetingStartFailed', attributes);\n            }\n            else if (status.isFailure() || status.isAudioConnectionFailure()) {\n                attributes.meetingErrorMessage = (error && error.message) || '';\n                this.eventController.publishEvent('meetingFailed', attributes);\n            }\n            else {\n                this.eventController.publishEvent('meetingEnded', attributes);\n            }\n        }\n    };\n    DefaultAudioVideoController.prototype.actionFinishUpdating = function () {\n        // we do not update parameter for simulcast since they are updated in AttachMediaInputTask\n        if (!this.meetingSessionContext.enableSimulcast) {\n            var maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n            this.enforceBandwidthLimitationForSender(maxBitrateKbps);\n        }\n        this.logger.info('updated audio-video session');\n    };\n    DefaultAudioVideoController.prototype.reconnect = function (status, error) {\n        var _this = this;\n        var willRetry = this._reconnectController.retryWithBackoff(function () { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n                    this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, function () {\n                        _this.actionConnect(true);\n                    });\n                }\n                else {\n                    this.sessionStateController.perform(SessionStateControllerAction_1.default.Reconnect, function () {\n                        _this.actionReconnect();\n                    });\n                }\n                this.totalRetryCount += 1;\n                return [2 /*return*/];\n            });\n        }); }, function () {\n            _this.logger.info('canceled retry');\n        });\n        if (!willRetry) {\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, function () {\n                _this.actionDisconnect(status, false, error);\n            });\n        }\n        return willRetry;\n    };\n    DefaultAudioVideoController.prototype.actionReconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var error_4;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._reconnectController.hasStartedConnectionAttempt()) {\n                            this._reconnectController.startedConnectionAttempt(false);\n                            this.forEachObserver(function (observer) {\n                                Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(function (f) { return f.bind(observer)(true); });\n                            });\n                        }\n                        this.connectionHealthData.reset();\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoReconnect'), [\n                                new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [\n                                    new CleanRestartedSessionTask_1.default(this.meetingSessionContext),\n                                    new SerialGroupTask_1.default(this.logger, 'Signaling', [\n                                        new OpenSignalingConnectionTask_1.default(this.meetingSessionContext),\n                                        new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext),\n                                        new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext),\n                                    ]),\n                                    new CreatePeerConnectionTask_1.default(this.meetingSessionContext),\n                                ]), this.configuration.connectionTimeoutMs),\n                                // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?\n                                new ReceiveVideoInputTask_1.default(this.meetingSessionContext),\n                                new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [\n                                    new AttachMediaInputTask_1.default(this.meetingSessionContext),\n                                    new CreateSDPTask_1.default(this.meetingSessionContext),\n                                    new SetLocalDescriptionTask_1.default(this.meetingSessionContext),\n                                    new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),\n                                    new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),\n                                    new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                                ]), this.configuration.connectionTimeoutMs),\n                            ]).run()];\n                    case 2:\n                        _a.sent();\n                        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, function () {\n                            /* istanbul ignore else */\n                            if (_this.eventController) {\n                                _this.eventController.pushMeetingState('meetingReconnected');\n                            }\n                            _this.actionFinishConnecting();\n                        });\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_4 = _a.sent();\n                        // To perform the \"Reconnect\" action again, the session should be in the \"Connected\" state.\n                        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, function () {\n                            _this.logger.info('failed to reconnect audio-video session');\n                            var status = new MeetingSessionStatus_1.default(_this.getMeetingStatusCode(error_4) || MeetingSessionStatusCode_1.default.TaskFailed);\n                            _this.handleMeetingSessionStatus(status, error_4);\n                        });\n                        return [3 /*break*/, 4];\n                    case 4:\n                        this.connectionHealthData.setConnectionStartTime();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.wrapTaskName = function (taskName) {\n        return taskName + \"/\" + this.configuration.meetingId + \"/\" + this.configuration.credentials.attendeeId;\n    };\n    DefaultAudioVideoController.prototype.getMeetingStatusCode = function (error) {\n        var matched = /the meeting status code: (\\d+)/.exec(error && error.message);\n        if (matched && matched.length > 1) {\n            return Number(matched[1]);\n        }\n        else {\n            return null;\n        }\n    };\n    DefaultAudioVideoController.prototype.enforceBandwidthLimitationForSender = function (maxBitrateKbps) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(maxBitrateKbps)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, DefaultTransceiverController_1.default.setVideoSendingBitrateKbpsForSender(this.meetingSessionContext.localVideoSender, maxBitrateKbps, this.meetingSessionContext.logger)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.handleMeetingSessionStatus = function (status, error) {\n        var _this = this;\n        this.logger.info(\"handling status: \" + MeetingSessionStatusCode_1.default[status.statusCode()]);\n        if (!status.isTerminal()) {\n            if (this.meetingSessionContext.statsCollector) {\n                this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);\n            }\n        }\n        if (status.statusCode() === MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n            this.restartLocalVideo(function () {\n                _this.logger.info('handled incompatible SDP by attempting to restart video');\n            });\n            return true;\n        }\n        if (status.statusCode() === MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly) {\n            this._videoTileController.removeLocalVideoTile();\n            this.forEachObserver(function (observer) {\n                Maybe_1.default.of(observer.videoSendDidBecomeUnavailable).map(function (f) { return f.bind(observer)(); });\n            });\n            return false;\n        }\n        if (status.isTerminal()) {\n            this.logger.error('session will not be reconnected');\n            if (this.meetingSessionContext.reconnectController) {\n                this.meetingSessionContext.reconnectController.disableReconnect();\n            }\n        }\n        if (status.isFailure() || status.isTerminal()) {\n            if (this.meetingSessionContext.reconnectController) {\n                var willRetry = this.reconnect(status, error);\n                if (willRetry) {\n                    this.logger.warn(\"will retry due to status code \" + MeetingSessionStatusCode_1.default[status.statusCode()] + (error ? \" and error: \" + error.message : \"\"));\n                }\n                else {\n                    this.logger.error(\"failed with status code \" + MeetingSessionStatusCode_1.default[status.statusCode()] + (error ? \" and error: \" + error.message : \"\"));\n                }\n                return willRetry;\n            }\n        }\n        return false;\n    };\n    DefaultAudioVideoController.prototype.setVideoMaxBandwidthKbps = function (maxBandwidthKbps) {\n        if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n            this.logger.info(\"video send has ideal max bandwidth \" + maxBandwidthKbps + \" kbps\");\n            this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(maxBandwidthKbps);\n        }\n    };\n    DefaultAudioVideoController.prototype.handleHasBandwidthPriority = function (hasBandwidthPriority) {\n        return __awaiter(this, void 0, void 0, function () {\n            var oldMaxBandwidth, newMaxBandwidth;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.meetingSessionContext &&\n                            this.meetingSessionContext.videoUplinkBandwidthPolicy &&\n                            !this.meetingSessionContext.enableSimulcast)) return [3 /*break*/, 2];\n                        oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n                        this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);\n                        newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n                        if (!(oldMaxBandwidth !== newMaxBandwidth)) return [3 /*break*/, 2];\n                        this.logger.info(\"video send bandwidth priority \" + hasBandwidthPriority + \" max has changed from \" + oldMaxBandwidth + \" kbps to \" + newMaxBandwidth + \" kbps\");\n                        return [4 /*yield*/, this.enforceBandwidthLimitationForSender(newMaxBandwidth)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DefaultAudioVideoController.prototype.pauseReceivingStream = function (streamId) {\n        if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n            this.meetingSessionContext.signalingClient.pause([streamId]);\n        }\n    };\n    DefaultAudioVideoController.prototype.resumeReceivingStream = function (streamId) {\n        if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n            this.meetingSessionContext.signalingClient.resume([streamId]);\n        }\n    };\n    DefaultAudioVideoController.prototype.getRemoteVideoSources = function () {\n        var videoStreamIndex = this.meetingSessionContext.videoStreamIndex;\n        if (!videoStreamIndex) {\n            this.logger.info('meeting has not started');\n            return [];\n        }\n        var selfAttendeeId = this.configuration.credentials.attendeeId;\n        return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);\n    };\n    DefaultAudioVideoController.prototype.encodingSimulcastLayersDidChange = function (simulcastLayers) {\n        this.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.encodingSimulcastLayersDidChange).map(function (f) {\n                return f.bind(observer)(simulcastLayers);\n            });\n        });\n    };\n    DefaultAudioVideoController.MIN_VOLUME_DECIBELS = -42;\n    DefaultAudioVideoController.MAX_VOLUME_DECIBELS = -14;\n    DefaultAudioVideoController.PING_PONG_INTERVAL_MS = 10000;\n    return DefaultAudioVideoController;\n}());\nexports.default = DefaultAudioVideoController;\n//# sourceMappingURL=DefaultAudioVideoController.js.map"]},"metadata":{},"sourceType":"script"}