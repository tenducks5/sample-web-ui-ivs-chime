{"ast":null,"code":"\"use strict\"; // Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Maybe_1 = require(\"../maybe/Maybe\");\n\nvar ScreenSharingMessageFlag_1 = require(\"../screensharingmessage/ScreenSharingMessageFlag\");\n\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\n\nvar ScreenSignalingSessionEventType_1 = require(\"./ScreenSignalingSessionEventType\");\n\nvar DefaultScreenSignalingSession =\n/** @class */\nfunction () {\n  function DefaultScreenSignalingSession(webSocket, messageSerialization, logger) {\n    var _this = this;\n\n    this.webSocket = webSocket;\n    this.messageSerialization = messageSerialization;\n    this.logger = logger;\n    this.listeners = new Map();\n    this.webSocket.addEventListener('message', function (event) {\n      _this.onMessageHandler(event);\n    });\n    this.webSocket.addEventListener('close', function (event) {\n      _this.dispatchEvent(event);\n    });\n  }\n\n  DefaultScreenSignalingSession.prototype.open = function (timeoutMs) {\n    return this.webSocket.open(timeoutMs);\n  };\n\n  DefaultScreenSignalingSession.prototype.close = function (timeoutMs) {\n    return this.webSocket.close(timeoutMs);\n  };\n\n  DefaultScreenSignalingSession.prototype.addEventListener = function (type, listener) {\n    var _this = this;\n\n    Maybe_1.default.of(this.listeners.get(type)).defaulting(new Set()).map(function (listeners) {\n      return listeners.add(listener);\n    }).map(function (listeners) {\n      return _this.listeners.set(type, listeners);\n    });\n  };\n\n  DefaultScreenSignalingSession.prototype.dispatchEvent = function (event) {\n    Maybe_1.default.of(this.listeners.get(event.type)).map(function (listeners) {\n      return listeners.forEach(function (listener) {\n        return listener(event);\n      });\n    });\n    return event.defaultPrevented;\n  };\n\n  DefaultScreenSignalingSession.prototype.removeEventListener = function (type, listener) {\n    Maybe_1.default.of(this.listeners.get(type)).map(function (f) {\n      return f.delete(listener);\n    });\n  };\n\n  DefaultScreenSignalingSession.prototype.onMessageHandler = function (event) {\n    var array = new Uint8Array(event.data);\n    var message = this.messageSerialization.deserialize(array);\n\n    switch (message.type) {\n      case ScreenSharingMessageType_1.default.HeartbeatRequestType:\n        this.logger.info('DefaultScreenSignalingSession received HeartbeatRequest');\n        var response = {\n          type: ScreenSharingMessageType_1.default.HeartbeatResponseType,\n          flags: [ScreenSharingMessageFlag_1.default.Local],\n          data: new Uint8Array([])\n        };\n        this.logger.info('Sending HeartbeatResponseType');\n        this.webSocket.send(this.messageSerialization.serialize(response));\n        this.dispatchEvent(new CustomEvent(ScreenSignalingSessionEventType_1.default.Heartbeat));\n        break;\n\n      case ScreenSharingMessageType_1.default.StreamStart:\n        this.logger.info(\"received StreamStart; \" + JSON.stringify(message.detail));\n        var streamStart = new CustomEvent(ScreenSignalingSessionEventType_1.default.StreamStart, {\n          detail: message.detail\n        });\n        this.dispatchEvent(streamStart);\n        break;\n\n      case ScreenSharingMessageType_1.default.StreamEnd:\n        this.logger.info(\"received StreamEnd; \" + JSON.stringify(message.detail));\n        var streamEnd = new CustomEvent(ScreenSignalingSessionEventType_1.default.StreamEnd, {\n          detail: message.detail\n        });\n        this.dispatchEvent(streamEnd);\n        break;\n\n      case ScreenSharingMessageType_1.default.PresenterSwitch:\n        this.logger.info(\"received PresenterSwitch; \" + JSON.stringify(message.detail));\n        var streamSwitch = new CustomEvent(ScreenSignalingSessionEventType_1.default.StreamSwitch, {\n          detail: message.detail\n        });\n        this.dispatchEvent(streamSwitch);\n        break;\n    }\n  };\n\n  DefaultScreenSignalingSession.SessionKey = '_aws_wt_session';\n  return DefaultScreenSignalingSession;\n}();\n\nexports.default = DefaultScreenSignalingSession;","map":{"version":3,"sources":["../../src/screensignalingsession/DefaultScreenSignalingSession.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Maybe_1 = require(\"../maybe/Maybe\");\nvar ScreenSharingMessageFlag_1 = require(\"../screensharingmessage/ScreenSharingMessageFlag\");\nvar ScreenSharingMessageType_1 = require(\"../screensharingmessage/ScreenSharingMessageType\");\nvar ScreenSignalingSessionEventType_1 = require(\"./ScreenSignalingSessionEventType\");\nvar DefaultScreenSignalingSession = /** @class */ (function () {\n    function DefaultScreenSignalingSession(webSocket, messageSerialization, logger) {\n        var _this = this;\n        this.webSocket = webSocket;\n        this.messageSerialization = messageSerialization;\n        this.logger = logger;\n        this.listeners = new Map();\n        this.webSocket.addEventListener('message', function (event) {\n            _this.onMessageHandler(event);\n        });\n        this.webSocket.addEventListener('close', function (event) {\n            _this.dispatchEvent(event);\n        });\n    }\n    DefaultScreenSignalingSession.prototype.open = function (timeoutMs) {\n        return this.webSocket.open(timeoutMs);\n    };\n    DefaultScreenSignalingSession.prototype.close = function (timeoutMs) {\n        return this.webSocket.close(timeoutMs);\n    };\n    DefaultScreenSignalingSession.prototype.addEventListener = function (type, listener) {\n        var _this = this;\n        Maybe_1.default.of(this.listeners.get(type))\n            .defaulting(new Set())\n            .map(function (listeners) { return listeners.add(listener); })\n            .map(function (listeners) { return _this.listeners.set(type, listeners); });\n    };\n    DefaultScreenSignalingSession.prototype.dispatchEvent = function (event) {\n        Maybe_1.default.of(this.listeners.get(event.type)).map(function (listeners) {\n            return listeners.forEach(function (listener) { return listener(event); });\n        });\n        return event.defaultPrevented;\n    };\n    DefaultScreenSignalingSession.prototype.removeEventListener = function (type, listener) {\n        Maybe_1.default.of(this.listeners.get(type)).map(function (f) { return f.delete(listener); });\n    };\n    DefaultScreenSignalingSession.prototype.onMessageHandler = function (event) {\n        var array = new Uint8Array(event.data);\n        var message = this.messageSerialization.deserialize(array);\n        switch (message.type) {\n            case ScreenSharingMessageType_1.default.HeartbeatRequestType:\n                this.logger.info('DefaultScreenSignalingSession received HeartbeatRequest');\n                var response = {\n                    type: ScreenSharingMessageType_1.default.HeartbeatResponseType,\n                    flags: [ScreenSharingMessageFlag_1.default.Local],\n                    data: new Uint8Array([]),\n                };\n                this.logger.info('Sending HeartbeatResponseType');\n                this.webSocket.send(this.messageSerialization.serialize(response));\n                this.dispatchEvent(new CustomEvent(ScreenSignalingSessionEventType_1.default.Heartbeat));\n                break;\n            case ScreenSharingMessageType_1.default.StreamStart:\n                this.logger.info(\"received StreamStart; \" + JSON.stringify(message.detail));\n                var streamStart = new CustomEvent(ScreenSignalingSessionEventType_1.default.StreamStart, {\n                    detail: message.detail,\n                });\n                this.dispatchEvent(streamStart);\n                break;\n            case ScreenSharingMessageType_1.default.StreamEnd:\n                this.logger.info(\"received StreamEnd; \" + JSON.stringify(message.detail));\n                var streamEnd = new CustomEvent(ScreenSignalingSessionEventType_1.default.StreamEnd, {\n                    detail: message.detail,\n                });\n                this.dispatchEvent(streamEnd);\n                break;\n            case ScreenSharingMessageType_1.default.PresenterSwitch:\n                this.logger.info(\"received PresenterSwitch; \" + JSON.stringify(message.detail));\n                var streamSwitch = new CustomEvent(ScreenSignalingSessionEventType_1.default.StreamSwitch, {\n                    detail: message.detail,\n                });\n                this.dispatchEvent(streamSwitch);\n                break;\n        }\n    };\n    DefaultScreenSignalingSession.SessionKey = '_aws_wt_session';\n    return DefaultScreenSignalingSession;\n}());\nexports.default = DefaultScreenSignalingSession;\n//# sourceMappingURL=DefaultScreenSignalingSession.js.map"]},"metadata":{},"sourceType":"script"}