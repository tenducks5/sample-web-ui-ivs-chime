{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nvar DefaultActiveSpeakerDetector =\n/** @class */\nfunction () {\n  function DefaultActiveSpeakerDetector(realtimeController, selfAttendeeId, hasBandwidthPriorityCallback, waitIntervalMs, updateIntervalMs) {\n    if (waitIntervalMs === void 0) {\n      waitIntervalMs = 1000;\n    }\n\n    if (updateIntervalMs === void 0) {\n      updateIntervalMs = 200;\n    }\n\n    this.realtimeController = realtimeController;\n    this.selfAttendeeId = selfAttendeeId;\n    this.hasBandwidthPriorityCallback = hasBandwidthPriorityCallback;\n    this.waitIntervalMs = waitIntervalMs;\n    this.updateIntervalMs = updateIntervalMs;\n    this.speakerScores = {};\n    this.speakerMuteState = {};\n    this.detectorCallbackToHandler = new Map();\n    this.detectorCallbackToScoresTimer = new Map();\n    this.detectorCallbackToActivityTimer = new Map();\n    this.hasBandwidthPriority = false;\n    this.mostRecentUpdateTimestamp = {};\n  }\n\n  DefaultActiveSpeakerDetector.prototype.needUpdate = function (attendeeId) {\n    if (!this.activeSpeakers) {\n      return true;\n    }\n\n    return this.speakerScores[attendeeId] === 0 && this.activeSpeakers.includes(attendeeId) || this.speakerScores[attendeeId] > 0 && !this.activeSpeakers.includes(attendeeId);\n  };\n\n  DefaultActiveSpeakerDetector.prototype.updateActiveSpeakers = function (policy, callback, attendeeId) {\n    if (!this.needUpdate(attendeeId)) {\n      return;\n    }\n\n    var sortedSpeakers = [];\n    var attendeeIds = Object.keys(this.speakerScores);\n\n    for (var i = 0; i < attendeeIds.length; i++) {\n      var attendeeId_1 = attendeeIds[i];\n      sortedSpeakers.push({\n        attendeeId: attendeeId_1,\n        activeScore: this.speakerScores[attendeeId_1]\n      });\n    }\n\n    var sortedAttendeeIds = sortedSpeakers.sort(function (s1, s2) {\n      return s2.activeScore - s1.activeScore;\n    }).filter(function (s) {\n      return s.activeScore > 0;\n    }).map(function (s) {\n      return s.attendeeId;\n    });\n    this.activeSpeakers = sortedAttendeeIds;\n    callback(sortedAttendeeIds);\n    var selfIsActive = sortedAttendeeIds.length > 0 && sortedAttendeeIds[0] === this.selfAttendeeId;\n    var hasBandwidthPriority = selfIsActive && policy.prioritizeVideoSendBandwidthForActiveSpeaker();\n    var hasBandwidthPriorityDidChange = this.hasBandwidthPriority !== hasBandwidthPriority;\n\n    if (hasBandwidthPriorityDidChange) {\n      this.hasBandwidthPriority = hasBandwidthPriority;\n      this.hasBandwidthPriorityCallback(hasBandwidthPriority);\n    }\n  };\n\n  DefaultActiveSpeakerDetector.prototype.updateScore = function (policy, callback, attendeeId, volume, muted) {\n    var activeScore = policy.calculateScore(attendeeId, volume, muted);\n\n    if (this.speakerScores[attendeeId] !== activeScore) {\n      this.speakerScores[attendeeId] = activeScore;\n      this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n      this.updateActiveSpeakers(policy, callback, attendeeId);\n    }\n  };\n\n  DefaultActiveSpeakerDetector.prototype.subscribe = function (policy, callback, scoresCallback, scoresCallbackIntervalMs) {\n    var _this = this;\n\n    var handler = function handler(attendeeId, present) {\n      if (!present) {\n        _this.speakerScores[attendeeId] = 0;\n        _this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n\n        _this.updateActiveSpeakers(policy, callback, attendeeId);\n\n        return;\n      }\n\n      _this.realtimeController.realtimeSubscribeToVolumeIndicator(attendeeId, function (attendeeId, volume, muted, _signalStrength) {\n        _this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n\n        if (muted !== null) {\n          _this.speakerMuteState[attendeeId] = muted;\n        }\n\n        _this.updateScore(policy, callback, attendeeId, volume, muted);\n      });\n    };\n\n    this.detectorCallbackToHandler.set(callback, handler);\n    var activityTimer = new IntervalScheduler_1.default(this.updateIntervalMs);\n    activityTimer.start(function () {\n      for (var attendeeId in _this.speakerScores) {\n        if (Date.now() - _this.mostRecentUpdateTimestamp[attendeeId] > _this.waitIntervalMs) {\n          _this.updateScore(policy, callback, attendeeId, 0, _this.speakerMuteState[attendeeId]);\n        }\n      }\n    });\n    this.detectorCallbackToActivityTimer.set(callback, activityTimer);\n\n    if (scoresCallback && scoresCallbackIntervalMs) {\n      var scoresTimer = new IntervalScheduler_1.default(scoresCallbackIntervalMs);\n      scoresTimer.start(function () {\n        scoresCallback(_this.speakerScores);\n      });\n      this.detectorCallbackToScoresTimer.set(callback, scoresTimer);\n    }\n\n    this.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);\n  };\n\n  DefaultActiveSpeakerDetector.prototype.unsubscribe = function (callback) {\n    var handler = this.detectorCallbackToHandler.get(callback);\n    this.detectorCallbackToHandler.delete(callback);\n    this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n    var activityTimer = this.detectorCallbackToActivityTimer.get(callback);\n\n    if (activityTimer) {\n      activityTimer.stop();\n      this.detectorCallbackToActivityTimer.delete(callback);\n    }\n\n    var scoresTimer = this.detectorCallbackToScoresTimer.get(callback);\n\n    if (scoresTimer) {\n      scoresTimer.stop();\n      this.detectorCallbackToHandler.delete(callback);\n    }\n  };\n\n  return DefaultActiveSpeakerDetector;\n}();\n\nexports.default = DefaultActiveSpeakerDetector;","map":{"version":3,"sources":["../../src/activespeakerdetector/DefaultActiveSpeakerDetector.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\nvar DefaultActiveSpeakerDetector = /** @class */ (function () {\n    function DefaultActiveSpeakerDetector(realtimeController, selfAttendeeId, hasBandwidthPriorityCallback, waitIntervalMs, updateIntervalMs) {\n        if (waitIntervalMs === void 0) { waitIntervalMs = 1000; }\n        if (updateIntervalMs === void 0) { updateIntervalMs = 200; }\n        this.realtimeController = realtimeController;\n        this.selfAttendeeId = selfAttendeeId;\n        this.hasBandwidthPriorityCallback = hasBandwidthPriorityCallback;\n        this.waitIntervalMs = waitIntervalMs;\n        this.updateIntervalMs = updateIntervalMs;\n        this.speakerScores = {};\n        this.speakerMuteState = {};\n        this.detectorCallbackToHandler = new Map();\n        this.detectorCallbackToScoresTimer = new Map();\n        this.detectorCallbackToActivityTimer = new Map();\n        this.hasBandwidthPriority = false;\n        this.mostRecentUpdateTimestamp = {};\n    }\n    DefaultActiveSpeakerDetector.prototype.needUpdate = function (attendeeId) {\n        if (!this.activeSpeakers) {\n            return true;\n        }\n        return ((this.speakerScores[attendeeId] === 0 && this.activeSpeakers.includes(attendeeId)) ||\n            (this.speakerScores[attendeeId] > 0 && !this.activeSpeakers.includes(attendeeId)));\n    };\n    DefaultActiveSpeakerDetector.prototype.updateActiveSpeakers = function (policy, callback, attendeeId) {\n        if (!this.needUpdate(attendeeId)) {\n            return;\n        }\n        var sortedSpeakers = [];\n        var attendeeIds = Object.keys(this.speakerScores);\n        for (var i = 0; i < attendeeIds.length; i++) {\n            var attendeeId_1 = attendeeIds[i];\n            sortedSpeakers.push({ attendeeId: attendeeId_1, activeScore: this.speakerScores[attendeeId_1] });\n        }\n        var sortedAttendeeIds = sortedSpeakers\n            .sort(function (s1, s2) { return s2.activeScore - s1.activeScore; })\n            .filter(function (s) {\n            return s.activeScore > 0;\n        })\n            .map(function (s) {\n            return s.attendeeId;\n        });\n        this.activeSpeakers = sortedAttendeeIds;\n        callback(sortedAttendeeIds);\n        var selfIsActive = sortedAttendeeIds.length > 0 && sortedAttendeeIds[0] === this.selfAttendeeId;\n        var hasBandwidthPriority = selfIsActive && policy.prioritizeVideoSendBandwidthForActiveSpeaker();\n        var hasBandwidthPriorityDidChange = this.hasBandwidthPriority !== hasBandwidthPriority;\n        if (hasBandwidthPriorityDidChange) {\n            this.hasBandwidthPriority = hasBandwidthPriority;\n            this.hasBandwidthPriorityCallback(hasBandwidthPriority);\n        }\n    };\n    DefaultActiveSpeakerDetector.prototype.updateScore = function (policy, callback, attendeeId, volume, muted) {\n        var activeScore = policy.calculateScore(attendeeId, volume, muted);\n        if (this.speakerScores[attendeeId] !== activeScore) {\n            this.speakerScores[attendeeId] = activeScore;\n            this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n            this.updateActiveSpeakers(policy, callback, attendeeId);\n        }\n    };\n    DefaultActiveSpeakerDetector.prototype.subscribe = function (policy, callback, scoresCallback, scoresCallbackIntervalMs) {\n        var _this = this;\n        var handler = function (attendeeId, present) {\n            if (!present) {\n                _this.speakerScores[attendeeId] = 0;\n                _this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n                _this.updateActiveSpeakers(policy, callback, attendeeId);\n                return;\n            }\n            _this.realtimeController.realtimeSubscribeToVolumeIndicator(attendeeId, function (attendeeId, volume, muted, _signalStrength) {\n                _this.mostRecentUpdateTimestamp[attendeeId] = Date.now();\n                if (muted !== null) {\n                    _this.speakerMuteState[attendeeId] = muted;\n                }\n                _this.updateScore(policy, callback, attendeeId, volume, muted);\n            });\n        };\n        this.detectorCallbackToHandler.set(callback, handler);\n        var activityTimer = new IntervalScheduler_1.default(this.updateIntervalMs);\n        activityTimer.start(function () {\n            for (var attendeeId in _this.speakerScores) {\n                if (Date.now() - _this.mostRecentUpdateTimestamp[attendeeId] > _this.waitIntervalMs) {\n                    _this.updateScore(policy, callback, attendeeId, 0, _this.speakerMuteState[attendeeId]);\n                }\n            }\n        });\n        this.detectorCallbackToActivityTimer.set(callback, activityTimer);\n        if (scoresCallback && scoresCallbackIntervalMs) {\n            var scoresTimer = new IntervalScheduler_1.default(scoresCallbackIntervalMs);\n            scoresTimer.start(function () {\n                scoresCallback(_this.speakerScores);\n            });\n            this.detectorCallbackToScoresTimer.set(callback, scoresTimer);\n        }\n        this.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);\n    };\n    DefaultActiveSpeakerDetector.prototype.unsubscribe = function (callback) {\n        var handler = this.detectorCallbackToHandler.get(callback);\n        this.detectorCallbackToHandler.delete(callback);\n        this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n        var activityTimer = this.detectorCallbackToActivityTimer.get(callback);\n        if (activityTimer) {\n            activityTimer.stop();\n            this.detectorCallbackToActivityTimer.delete(callback);\n        }\n        var scoresTimer = this.detectorCallbackToScoresTimer.get(callback);\n        if (scoresTimer) {\n            scoresTimer.stop();\n            this.detectorCallbackToHandler.delete(callback);\n        }\n    };\n    return DefaultActiveSpeakerDetector;\n}());\nexports.default = DefaultActiveSpeakerDetector;\n//# sourceMappingURL=DefaultActiveSpeakerDetector.js.map"]},"metadata":{},"sourceType":"script"}