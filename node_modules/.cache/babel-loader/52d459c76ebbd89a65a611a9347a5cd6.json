{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ScreenViewingPacketType_1 = require(\"../session/ScreenViewingPacketType\");\n\nvar DefaultScreenViewingMessageHandler =\n/** @class */\nfunction () {\n  function DefaultScreenViewingMessageHandler(client, deltaRenderer, deltaSource, viewer, logger) {\n    this.client = client;\n    this.deltaRenderer = deltaRenderer;\n    this.deltaSource = deltaSource;\n    this.viewer = viewer;\n    this.logger = logger;\n  }\n\n  DefaultScreenViewingMessageHandler.prototype.handleEchoRequest = function (dataView) {\n    this.logger.info('DefaultScreenViewingMessageHandler: Handling echo request message');\n    dataView.setUint8(0, ScreenViewingPacketType_1.default.ECHO_RESPONSE);\n\n    try {\n      this.client.send(new Uint8Array(dataView.buffer));\n    } catch (e) {\n      this.logger.warn('DefaultScreenViewingMessageHandler: Error sending echo response');\n      this.logger.warn(e);\n    }\n  };\n\n  DefaultScreenViewingMessageHandler.prototype.handleSetup = function (dataView) {\n    var width = dataView.getInt32(1);\n    var height = dataView.getInt32(5);\n    var macroBlock = dataView.getInt32(9);\n    this.logger.info(\"DefaultScreenViewingMessageHandler: Handling setup message, received width = \" + width + \", height = \" + height + \", and macro block = \" + macroBlock);\n    var imageDimensions = DefaultScreenViewingMessageHandler.calculateImageDimensions(width, height, macroBlock);\n    this.deltaRenderer.buildViewer(imageDimensions);\n  }; // TODO: Move into a component\n\n\n  DefaultScreenViewingMessageHandler.calculateImageDimensions = function (width, height, macroBlock) {\n    var widthRemainder = width % macroBlock;\n    var heightRemainder = height % macroBlock;\n    return {\n      imageWidthPixels: width,\n      imageHeightPixels: height,\n      macroBlock: macroBlock,\n      screenWidth: Math.floor(width / macroBlock) + (widthRemainder === 0 ? 0 : 1),\n      screenHeight: Math.floor(height / macroBlock) + (heightRemainder === 0 ? 0 : 1),\n      edgeWidth: widthRemainder === 0 ? macroBlock : widthRemainder,\n      edgeHeight: heightRemainder === 0 ? macroBlock : heightRemainder,\n      tileWidth: macroBlock,\n      tileHeight: macroBlock\n    };\n  };\n\n  DefaultScreenViewingMessageHandler.prototype.handleDelta = function (dataView) {\n    this.logger.debug(function () {\n      return 'DefaultScreenViewingMessageHandler: Handling delta';\n    });\n    var x = dataView.getUint8(1);\n    var y = dataView.getUint8(2);\n    this.deltaSource.pendingDx = x;\n    this.deltaSource.pendingDy = y;\n  };\n\n  DefaultScreenViewingMessageHandler.prototype.handleSync = function (_dataView) {\n    this.logger.debug(function () {\n      return 'DefaultScreenViewingMessageHandler: Handling sync';\n    });\n    this.deltaSource.flushSyncBuffer();\n    this.viewer.resizeAndSync();\n\n    if (this.deltaSource.notShared) {\n      this.deltaSource.notShared = false;\n    }\n  };\n\n  DefaultScreenViewingMessageHandler.prototype.handleNoScreen = function (_dataView) {\n    this.logger.info('DefaultScreenViewingMessageHandler: Handling no screen');\n    this.deltaSource.notShared = true;\n  };\n\n  DefaultScreenViewingMessageHandler.prototype.handleEndScreen = function (_dataView) {\n    this.logger.info('DefaultScreenViewingMessageHandler: Handling end screen');\n    this.viewer.stop();\n  }; // TODO: Move into a component\n\n\n  DefaultScreenViewingMessageHandler.prototype.handleDefault = function (dataView) {\n    this.logger.debug(function () {\n      return 'DefaultScreenViewingMessageHandler: Handling default';\n    });\n    var b0 = dataView.getUint8(0);\n    var b1 = dataView.getUint8(1);\n\n    if (!DefaultScreenViewingMessageHandler.shouldHandle(b0, b1)) {\n      return;\n    }\n\n    var dx = this.deltaSource.pendingDx;\n    var dy = this.deltaSource.pendingDy;\n    this.deltaRenderer.syncBuffer[dy][dx] = new Uint8Array(dataView.buffer);\n  };\n\n  DefaultScreenViewingMessageHandler.shouldHandle = function (b0, b1) {\n    return b0 === ScreenViewingPacketType_1.default.JPEG_HEADER_BYTE_0 && b1 === ScreenViewingPacketType_1.default.JPEG_HEADER_BYTE_1;\n  };\n\n  return DefaultScreenViewingMessageHandler;\n}();\n\nexports.default = DefaultScreenViewingMessageHandler;","map":{"version":3,"sources":["../../../src/screenviewing/messagehandler/DefaultScreenViewingMessageHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ScreenViewingPacketType_1 = require(\"../session/ScreenViewingPacketType\");\nvar DefaultScreenViewingMessageHandler = /** @class */ (function () {\n    function DefaultScreenViewingMessageHandler(client, deltaRenderer, deltaSource, viewer, logger) {\n        this.client = client;\n        this.deltaRenderer = deltaRenderer;\n        this.deltaSource = deltaSource;\n        this.viewer = viewer;\n        this.logger = logger;\n    }\n    DefaultScreenViewingMessageHandler.prototype.handleEchoRequest = function (dataView) {\n        this.logger.info('DefaultScreenViewingMessageHandler: Handling echo request message');\n        dataView.setUint8(0, ScreenViewingPacketType_1.default.ECHO_RESPONSE);\n        try {\n            this.client.send(new Uint8Array(dataView.buffer));\n        }\n        catch (e) {\n            this.logger.warn('DefaultScreenViewingMessageHandler: Error sending echo response');\n            this.logger.warn(e);\n        }\n    };\n    DefaultScreenViewingMessageHandler.prototype.handleSetup = function (dataView) {\n        var width = dataView.getInt32(1);\n        var height = dataView.getInt32(5);\n        var macroBlock = dataView.getInt32(9);\n        this.logger.info(\"DefaultScreenViewingMessageHandler: Handling setup message, received width = \" + width + \", height = \" + height + \", and macro block = \" + macroBlock);\n        var imageDimensions = DefaultScreenViewingMessageHandler.calculateImageDimensions(width, height, macroBlock);\n        this.deltaRenderer.buildViewer(imageDimensions);\n    };\n    // TODO: Move into a component\n    DefaultScreenViewingMessageHandler.calculateImageDimensions = function (width, height, macroBlock) {\n        var widthRemainder = width % macroBlock;\n        var heightRemainder = height % macroBlock;\n        return {\n            imageWidthPixels: width,\n            imageHeightPixels: height,\n            macroBlock: macroBlock,\n            screenWidth: Math.floor(width / macroBlock) + (widthRemainder === 0 ? 0 : 1),\n            screenHeight: Math.floor(height / macroBlock) + (heightRemainder === 0 ? 0 : 1),\n            edgeWidth: widthRemainder === 0 ? macroBlock : widthRemainder,\n            edgeHeight: heightRemainder === 0 ? macroBlock : heightRemainder,\n            tileWidth: macroBlock,\n            tileHeight: macroBlock,\n        };\n    };\n    DefaultScreenViewingMessageHandler.prototype.handleDelta = function (dataView) {\n        this.logger.debug(function () { return 'DefaultScreenViewingMessageHandler: Handling delta'; });\n        var x = dataView.getUint8(1);\n        var y = dataView.getUint8(2);\n        this.deltaSource.pendingDx = x;\n        this.deltaSource.pendingDy = y;\n    };\n    DefaultScreenViewingMessageHandler.prototype.handleSync = function (_dataView) {\n        this.logger.debug(function () { return 'DefaultScreenViewingMessageHandler: Handling sync'; });\n        this.deltaSource.flushSyncBuffer();\n        this.viewer.resizeAndSync();\n        if (this.deltaSource.notShared) {\n            this.deltaSource.notShared = false;\n        }\n    };\n    DefaultScreenViewingMessageHandler.prototype.handleNoScreen = function (_dataView) {\n        this.logger.info('DefaultScreenViewingMessageHandler: Handling no screen');\n        this.deltaSource.notShared = true;\n    };\n    DefaultScreenViewingMessageHandler.prototype.handleEndScreen = function (_dataView) {\n        this.logger.info('DefaultScreenViewingMessageHandler: Handling end screen');\n        this.viewer.stop();\n    };\n    // TODO: Move into a component\n    DefaultScreenViewingMessageHandler.prototype.handleDefault = function (dataView) {\n        this.logger.debug(function () { return 'DefaultScreenViewingMessageHandler: Handling default'; });\n        var b0 = dataView.getUint8(0);\n        var b1 = dataView.getUint8(1);\n        if (!DefaultScreenViewingMessageHandler.shouldHandle(b0, b1)) {\n            return;\n        }\n        var dx = this.deltaSource.pendingDx;\n        var dy = this.deltaSource.pendingDy;\n        this.deltaRenderer.syncBuffer[dy][dx] = new Uint8Array(dataView.buffer);\n    };\n    DefaultScreenViewingMessageHandler.shouldHandle = function (b0, b1) {\n        return (b0 === ScreenViewingPacketType_1.default.JPEG_HEADER_BYTE_0 &&\n            b1 === ScreenViewingPacketType_1.default.JPEG_HEADER_BYTE_1);\n    };\n    return DefaultScreenViewingMessageHandler;\n}());\nexports.default = DefaultScreenViewingMessageHandler;\n//# sourceMappingURL=DefaultScreenViewingMessageHandler.js.map"]},"metadata":{},"sourceType":"script"}