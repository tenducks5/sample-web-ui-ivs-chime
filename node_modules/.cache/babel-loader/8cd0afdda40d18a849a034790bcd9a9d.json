{"ast":null,"code":"\"use strict\"; // Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ParallelGroupTask]] runs a set of tasks in parallel. When canceled, it\n * stops any currently running tasks.\n */\n\n\nvar ParallelGroupTask =\n/** @class */\nfunction (_super) {\n  __extends(ParallelGroupTask, _super);\n\n  function ParallelGroupTask(logger, taskName, tasksToRunParallel) {\n    var e_1, _a;\n\n    var _this = _super.call(this, logger) || this;\n\n    _this.taskName = taskName;\n    _this.tasksToRunParallel = tasksToRunParallel;\n\n    try {\n      for (var tasksToRunParallel_1 = __values(tasksToRunParallel), tasksToRunParallel_1_1 = tasksToRunParallel_1.next(); !tasksToRunParallel_1_1.done; tasksToRunParallel_1_1 = tasksToRunParallel_1.next()) {\n        var task = tasksToRunParallel_1_1.value;\n        task.setParent(_this);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (tasksToRunParallel_1_1 && !tasksToRunParallel_1_1.done && (_a = tasksToRunParallel_1.return)) _a.call(tasksToRunParallel_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return _this;\n  }\n\n  ParallelGroupTask.prototype.cancel = function () {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(this.tasksToRunParallel), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var task = _c.value;\n        this.logger.info(\"canceling parallel group task \" + this.name() + \" subtask \" + task.name());\n        task.cancel();\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  ParallelGroupTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var taskResults, _a, _b, task, failures, i, err_1, failureMessage;\n\n      var e_3, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            taskResults = [];\n\n            try {\n              for (_a = __values(this.tasksToRunParallel), _b = _a.next(); !_b.done; _b = _a.next()) {\n                task = _b.value;\n                this.logger.info(\"parallel group task \" + this.name() + \" running subtask \" + task.name());\n                taskResults.push(task.run());\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n\n            failures = [];\n            i = 0;\n            _d.label = 1;\n\n          case 1:\n            if (!(i < taskResults.length)) return [3\n            /*break*/\n            , 7];\n            _d.label = 2;\n\n          case 2:\n            _d.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , taskResults[i]];\n\n          case 3:\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _d.sent();\n            failures.push(\"task \" + this.tasksToRunParallel[i].name() + \" failed: \" + err_1.message);\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            this.logger.info(\"parallel group task \" + this.name() + \" completed subtask \" + this.tasksToRunParallel[i].name());\n            _d.label = 6;\n\n          case 6:\n            i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            if (failures.length > 0) {\n              failureMessage = failures.join(', ');\n              this.logAndThrow(\"parallel group task \" + this.name() + \" failed for tasks: \" + failureMessage);\n            }\n\n            this.logger.info(\"parallel group task \" + this.name() + \" completed\");\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return ParallelGroupTask;\n}(BaseTask_1.default);\n\nexports.default = ParallelGroupTask;","map":{"version":3,"sources":["../../src/task/ParallelGroupTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ParallelGroupTask]] runs a set of tasks in parallel. When canceled, it\n * stops any currently running tasks.\n */\nvar ParallelGroupTask = /** @class */ (function (_super) {\n    __extends(ParallelGroupTask, _super);\n    function ParallelGroupTask(logger, taskName, tasksToRunParallel) {\n        var e_1, _a;\n        var _this = _super.call(this, logger) || this;\n        _this.taskName = taskName;\n        _this.tasksToRunParallel = tasksToRunParallel;\n        try {\n            for (var tasksToRunParallel_1 = __values(tasksToRunParallel), tasksToRunParallel_1_1 = tasksToRunParallel_1.next(); !tasksToRunParallel_1_1.done; tasksToRunParallel_1_1 = tasksToRunParallel_1.next()) {\n                var task = tasksToRunParallel_1_1.value;\n                task.setParent(_this);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (tasksToRunParallel_1_1 && !tasksToRunParallel_1_1.done && (_a = tasksToRunParallel_1.return)) _a.call(tasksToRunParallel_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return _this;\n    }\n    ParallelGroupTask.prototype.cancel = function () {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this.tasksToRunParallel), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var task = _c.value;\n                this.logger.info(\"canceling parallel group task \" + this.name() + \" subtask \" + task.name());\n                task.cancel();\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    ParallelGroupTask.prototype.run = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var taskResults, _a, _b, task, failures, i, err_1, failureMessage;\n            var e_3, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        taskResults = [];\n                        try {\n                            for (_a = __values(this.tasksToRunParallel), _b = _a.next(); !_b.done; _b = _a.next()) {\n                                task = _b.value;\n                                this.logger.info(\"parallel group task \" + this.name() + \" running subtask \" + task.name());\n                                taskResults.push(task.run());\n                            }\n                        }\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                        finally {\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_3) throw e_3.error; }\n                        }\n                        failures = [];\n                        i = 0;\n                        _d.label = 1;\n                    case 1:\n                        if (!(i < taskResults.length)) return [3 /*break*/, 7];\n                        _d.label = 2;\n                    case 2:\n                        _d.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, taskResults[i]];\n                    case 3:\n                        _d.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _d.sent();\n                        failures.push(\"task \" + this.tasksToRunParallel[i].name() + \" failed: \" + err_1.message);\n                        return [3 /*break*/, 5];\n                    case 5:\n                        this.logger.info(\"parallel group task \" + this.name() + \" completed subtask \" + this.tasksToRunParallel[i].name());\n                        _d.label = 6;\n                    case 6:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 7:\n                        if (failures.length > 0) {\n                            failureMessage = failures.join(', ');\n                            this.logAndThrow(\"parallel group task \" + this.name() + \" failed for tasks: \" + failureMessage);\n                        }\n                        this.logger.info(\"parallel group task \" + this.name() + \" completed\");\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ParallelGroupTask;\n}(BaseTask_1.default));\nexports.default = ParallelGroupTask;\n//# sourceMappingURL=ParallelGroupTask.js.map"]},"metadata":{},"sourceType":"script"}