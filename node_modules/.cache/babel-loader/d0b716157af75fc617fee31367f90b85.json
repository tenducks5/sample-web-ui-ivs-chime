{"ast":null,"code":"\"use strict\"; // Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Implements the [Full Jitter algorithm](\n * https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/)\n * and also allows for specifying a fixed wait added to the full jitter backoff\n * (which can be zero).\n */\n\nvar FullJitterBackoff =\n/** @class */\nfunction () {\n  function FullJitterBackoff(fixedWaitMs, shortBackoffMs, longBackoffMs) {\n    this.fixedWaitMs = fixedWaitMs;\n    this.shortBackoffMs = shortBackoffMs;\n    this.longBackoffMs = longBackoffMs;\n    this.currentRetry = 0;\n\n    if (this.fixedWaitMs < 0) {\n      this.fixedWaitMs = 0;\n    }\n\n    if (this.shortBackoffMs < 0) {\n      this.shortBackoffMs = 0;\n    }\n\n    if (this.longBackoffMs < 0) {\n      this.longBackoffMs = 0;\n    }\n\n    this.reset();\n  }\n\n  FullJitterBackoff.prototype.reset = function () {\n    this.currentRetry = 0;\n  };\n\n  FullJitterBackoff.prototype.nextBackoffAmountMs = function () {\n    var fullJitterMs = Math.random() * Math.min(this.longBackoffMs, this.shortBackoffMs * Math.pow(2.0, this.currentRetry)) + this.fixedWaitMs;\n    this.currentRetry += 1;\n    return fullJitterMs;\n  };\n\n  return FullJitterBackoff;\n}();\n\nexports.default = FullJitterBackoff;","map":{"version":3,"sources":["../../src/backoff/FullJitterBackoff.ts"],"names":[],"mappings":"cAAA;AACA;;;;;AAIA;;;;;AAKG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,iBAAA,CACU,WADV,EAEU,cAFV,EAGU,aAHV,EAG+B;AAFrB,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,aAAA,GAAA,aAAA;AALF,SAAA,YAAA,GAAuB,CAAvB;;AAON,QAAI,KAAK,WAAL,GAAmB,CAAvB,EAA0B;AACxB,WAAK,WAAL,GAAmB,CAAnB;AACD;;AACD,QAAI,KAAK,cAAL,GAAsB,CAA1B,EAA6B;AAC3B,WAAK,cAAL,GAAsB,CAAtB;AACD;;AACD,QAAI,KAAK,aAAL,GAAqB,CAAzB,EAA4B;AAC1B,WAAK,aAAL,GAAqB,CAArB;AACD;;AACD,SAAK,KAAL;AACD;;AAED,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,YAAL,GAAoB,CAApB;AACD,GAFD;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;AACE,QAAM,YAAY,GAChB,IAAI,CAAC,MAAL,KACE,IAAI,CAAC,GAAL,CAAS,KAAK,aAAd,EAA6B,KAAK,cAAL,GAAsB,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAK,YAAnB,CAAnD,CADF,GAEA,KAAK,WAHP;AAIA,SAAK,YAAL,IAAqB,CAArB;AACA,WAAO,YAAP;AACD,GAPD;;AAQF,SAAA,iBAAA;AAAC,CAhCD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Implements the [Full Jitter algorithm](\n * https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/)\n * and also allows for specifying a fixed wait added to the full jitter backoff\n * (which can be zero).\n */\nvar FullJitterBackoff = /** @class */ (function () {\n    function FullJitterBackoff(fixedWaitMs, shortBackoffMs, longBackoffMs) {\n        this.fixedWaitMs = fixedWaitMs;\n        this.shortBackoffMs = shortBackoffMs;\n        this.longBackoffMs = longBackoffMs;\n        this.currentRetry = 0;\n        if (this.fixedWaitMs < 0) {\n            this.fixedWaitMs = 0;\n        }\n        if (this.shortBackoffMs < 0) {\n            this.shortBackoffMs = 0;\n        }\n        if (this.longBackoffMs < 0) {\n            this.longBackoffMs = 0;\n        }\n        this.reset();\n    }\n    FullJitterBackoff.prototype.reset = function () {\n        this.currentRetry = 0;\n    };\n    FullJitterBackoff.prototype.nextBackoffAmountMs = function () {\n        var fullJitterMs = Math.random() *\n            Math.min(this.longBackoffMs, this.shortBackoffMs * Math.pow(2.0, this.currentRetry)) +\n            this.fixedWaitMs;\n        this.currentRetry += 1;\n        return fullJitterMs;\n    };\n    return FullJitterBackoff;\n}());\nexports.default = FullJitterBackoff;\n//# sourceMappingURL=FullJitterBackoff.js.map"]},"metadata":{},"sourceType":"script"}