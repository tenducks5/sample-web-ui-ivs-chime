{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar SessionStateControllerAction_1 = require(\"./SessionStateControllerAction\");\n\nvar SessionStateControllerDeferPriority_1 = require(\"./SessionStateControllerDeferPriority\");\n\nvar SessionStateControllerState_1 = require(\"./SessionStateControllerState\");\n\nvar SessionStateControllerTransitionResult_1 = require(\"./SessionStateControllerTransitionResult\");\n\nvar DefaultSessionStateController =\n/** @class */\nfunction () {\n  function DefaultSessionStateController(logger) {\n    this.logger = logger;\n    this.currentState = SessionStateControllerState_1.SessionStateControllerState.NotConnected;\n    this.deferredAction = null;\n    this.deferredWork = null;\n  }\n\n  DefaultSessionStateController.prototype.perform = function (action, work) {\n    var state = this.currentState;\n\n    if (state === SessionStateControllerState_1.SessionStateControllerState.NotConnected && action === SessionStateControllerAction_1.SessionStateControllerAction.Connect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishConnecting) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Disconnect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Reconnect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Update) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Updating, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishUpdating) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Disconnecting && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishDisconnecting) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.NotConnected, action);\n    } else if (this.canDefer(action)) {\n      this.logger.info(\"deferring transition from \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" with \" + SessionStateControllerAction_1.SessionStateControllerAction[action]);\n      this.deferAction(action, work);\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.DeferredTransition;\n    } else {\n      this.logger.warn(\"no transition found from \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" with \" + SessionStateControllerAction_1.SessionStateControllerAction[action]);\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.NoTransitionAvailable;\n    }\n\n    try {\n      work();\n    } catch (e) {\n      this.logger.error(\"error during state \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" with action \" + SessionStateControllerAction_1.SessionStateControllerAction[action] + \": \" + e);\n      this.logger.info(\"rolling back transition to \" + SessionStateControllerState_1.SessionStateControllerState[state]);\n      this.currentState = state;\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.TransitionFailed;\n    }\n\n    this.performDeferredAction();\n    return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned;\n  };\n\n  DefaultSessionStateController.prototype.state = function () {\n    return this.currentState;\n  };\n\n  DefaultSessionStateController.prototype.transition = function (newState, action) {\n    this.logger.info(\"transitioning from \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" to \" + SessionStateControllerState_1.SessionStateControllerState[newState] + \" with \" + SessionStateControllerAction_1.SessionStateControllerAction[action]);\n    this.currentState = newState;\n  };\n\n  DefaultSessionStateController.prototype.deferPriority = function (action) {\n    switch (action) {\n      case SessionStateControllerAction_1.SessionStateControllerAction.Disconnect:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.VeryHigh;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Fail:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.High;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Reconnect:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Medium;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Update:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Low;\n\n      default:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer;\n    }\n  };\n\n  DefaultSessionStateController.prototype.deferAction = function (action, work) {\n    if (this.deferredAction !== null && this.deferPriority(this.deferredAction) > this.deferPriority(action)) {\n      return;\n    }\n\n    this.deferredAction = action;\n    this.deferredWork = work;\n  };\n\n  DefaultSessionStateController.prototype.canDefer = function (action) {\n    return this.deferPriority(action) !== SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer && (this.currentState === SessionStateControllerState_1.SessionStateControllerState.Connecting || this.currentState === SessionStateControllerState_1.SessionStateControllerState.Updating);\n  };\n\n  DefaultSessionStateController.prototype.performDeferredAction = function () {\n    if (!this.deferredAction) {\n      return;\n    }\n\n    var deferredAction = this.deferredAction;\n    var deferredWork = this.deferredWork;\n    this.deferredAction = null;\n    this.deferredWork = null;\n    this.logger.info(\"performing deferred action \" + SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]);\n\n    if (this.perform(deferredAction, deferredWork) !== SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned) {\n      this.logger.info(\"unable to perform deferred action \" + SessionStateControllerAction_1.SessionStateControllerAction[deferredAction] + \" in state \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState]);\n    }\n  };\n\n  return DefaultSessionStateController;\n}();\n\nexports.default = DefaultSessionStateController;","map":{"version":3,"sources":["../../src/sessionstatecontroller/DefaultSessionStateController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SessionStateControllerAction_1 = require(\"./SessionStateControllerAction\");\nvar SessionStateControllerDeferPriority_1 = require(\"./SessionStateControllerDeferPriority\");\nvar SessionStateControllerState_1 = require(\"./SessionStateControllerState\");\nvar SessionStateControllerTransitionResult_1 = require(\"./SessionStateControllerTransitionResult\");\nvar DefaultSessionStateController = /** @class */ (function () {\n    function DefaultSessionStateController(logger) {\n        this.logger = logger;\n        this.currentState = SessionStateControllerState_1.SessionStateControllerState.NotConnected;\n        this.deferredAction = null;\n        this.deferredWork = null;\n    }\n    DefaultSessionStateController.prototype.perform = function (action, work) {\n        var state = this.currentState;\n        if (state === SessionStateControllerState_1.SessionStateControllerState.NotConnected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Connect) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishConnecting) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Disconnect) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Reconnect) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Update) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Updating, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishUpdating) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Disconnecting &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishDisconnecting) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.NotConnected, action);\n        }\n        else if (this.canDefer(action)) {\n            this.logger.info(\"deferring transition from \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" with \" + SessionStateControllerAction_1.SessionStateControllerAction[action]);\n            this.deferAction(action, work);\n            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.DeferredTransition;\n        }\n        else {\n            this.logger.warn(\"no transition found from \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" with \" + SessionStateControllerAction_1.SessionStateControllerAction[action]);\n            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.NoTransitionAvailable;\n        }\n        try {\n            work();\n        }\n        catch (e) {\n            this.logger.error(\"error during state \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" with action \" + SessionStateControllerAction_1.SessionStateControllerAction[action] + \": \" + e);\n            this.logger.info(\"rolling back transition to \" + SessionStateControllerState_1.SessionStateControllerState[state]);\n            this.currentState = state;\n            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.TransitionFailed;\n        }\n        this.performDeferredAction();\n        return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned;\n    };\n    DefaultSessionStateController.prototype.state = function () {\n        return this.currentState;\n    };\n    DefaultSessionStateController.prototype.transition = function (newState, action) {\n        this.logger.info(\"transitioning from \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState] + \" to \" + SessionStateControllerState_1.SessionStateControllerState[newState] + \" with \" + SessionStateControllerAction_1.SessionStateControllerAction[action]);\n        this.currentState = newState;\n    };\n    DefaultSessionStateController.prototype.deferPriority = function (action) {\n        switch (action) {\n            case SessionStateControllerAction_1.SessionStateControllerAction.Disconnect:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.VeryHigh;\n            case SessionStateControllerAction_1.SessionStateControllerAction.Fail:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.High;\n            case SessionStateControllerAction_1.SessionStateControllerAction.Reconnect:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Medium;\n            case SessionStateControllerAction_1.SessionStateControllerAction.Update:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Low;\n            default:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer;\n        }\n    };\n    DefaultSessionStateController.prototype.deferAction = function (action, work) {\n        if (this.deferredAction !== null &&\n            this.deferPriority(this.deferredAction) > this.deferPriority(action)) {\n            return;\n        }\n        this.deferredAction = action;\n        this.deferredWork = work;\n    };\n    DefaultSessionStateController.prototype.canDefer = function (action) {\n        return (this.deferPriority(action) !== SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer &&\n            (this.currentState === SessionStateControllerState_1.SessionStateControllerState.Connecting ||\n                this.currentState === SessionStateControllerState_1.SessionStateControllerState.Updating));\n    };\n    DefaultSessionStateController.prototype.performDeferredAction = function () {\n        if (!this.deferredAction) {\n            return;\n        }\n        var deferredAction = this.deferredAction;\n        var deferredWork = this.deferredWork;\n        this.deferredAction = null;\n        this.deferredWork = null;\n        this.logger.info(\"performing deferred action \" + SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]);\n        if (this.perform(deferredAction, deferredWork) !==\n            SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned) {\n            this.logger.info(\"unable to perform deferred action \" + SessionStateControllerAction_1.SessionStateControllerAction[deferredAction] + \" in state \" + SessionStateControllerState_1.SessionStateControllerState[this.currentState]);\n        }\n    };\n    return DefaultSessionStateController;\n}());\nexports.default = DefaultSessionStateController;\n//# sourceMappingURL=DefaultSessionStateController.js.map"]},"metadata":{},"sourceType":"script"}