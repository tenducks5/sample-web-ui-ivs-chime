{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DefaultDevicePixelRatioMonitor_1 = require(\"../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor\");\n\nvar DevicePixelRatioWindowSource_1 = require(\"../devicepixelratiosource/DevicePixelRatioWindowSource\");\n\nvar Maybe_1 = require(\"../maybe/Maybe\");\n\nvar DefaultVideoTileController =\n/** @class */\nfunction () {\n  function DefaultVideoTileController(tileFactory, audioVideoController, logger) {\n    this.tileFactory = tileFactory;\n    this.audioVideoController = audioVideoController;\n    this.logger = logger;\n    this.tileMap = new Map();\n    this.nextTileId = 1;\n    this.currentLocalTile = null;\n    this.currentPausedTilesByIds = new Set();\n    this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor_1.default(new DevicePixelRatioWindowSource_1.default(), logger);\n  }\n\n  DefaultVideoTileController.prototype.bindVideoElement = function (tileId, videoElement) {\n    var tile = this.getVideoTile(tileId);\n\n    if (tile === null) {\n      this.logger.warn(\"Ignoring video element binding for unknown tile id \" + tileId);\n      return;\n    }\n\n    tile.bindVideoElement(videoElement);\n  };\n\n  DefaultVideoTileController.prototype.unbindVideoElement = function (tileId) {\n    this.bindVideoElement(tileId, null);\n  };\n\n  DefaultVideoTileController.prototype.startLocalVideoTile = function () {\n    var tile = this.findOrCreateLocalVideoTile();\n    this.currentLocalTile.stateRef().localTileStarted = true;\n    this.audioVideoController.update();\n    return tile.id();\n  };\n\n  DefaultVideoTileController.prototype.stopLocalVideoTile = function () {\n    if (!this.currentLocalTile) {\n      return;\n    }\n\n    this.currentLocalTile.stateRef().localTileStarted = false;\n    this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n    this.audioVideoController.update();\n  };\n\n  DefaultVideoTileController.prototype.hasStartedLocalVideoTile = function () {\n    return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);\n  };\n\n  DefaultVideoTileController.prototype.removeLocalVideoTile = function () {\n    if (this.currentLocalTile) {\n      this.removeVideoTile(this.currentLocalTile.id());\n    }\n  };\n\n  DefaultVideoTileController.prototype.getLocalVideoTile = function () {\n    return this.currentLocalTile;\n  };\n\n  DefaultVideoTileController.prototype.pauseVideoTile = function (tileId) {\n    var tile = this.getVideoTile(tileId);\n\n    if (tile) {\n      if (!this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.add(tileId);\n      }\n\n      tile.pause();\n    }\n  };\n\n  DefaultVideoTileController.prototype.unpauseVideoTile = function (tileId) {\n    var tile = this.getVideoTile(tileId);\n\n    if (tile) {\n      if (this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.delete(tileId);\n      }\n\n      tile.unpause();\n    }\n  };\n\n  DefaultVideoTileController.prototype.getVideoTile = function (tileId) {\n    return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;\n  };\n\n  DefaultVideoTileController.prototype.getVideoTileArea = function (tile) {\n    var state = tile.state();\n    var tileHeight = 0;\n    var tileWidth = 0;\n\n    if (state.boundVideoElement) {\n      tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;\n      tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;\n    }\n\n    return tileHeight * tileWidth;\n  };\n\n  DefaultVideoTileController.prototype.getAllRemoteVideoTiles = function () {\n    var _this = this;\n\n    var result = new Array();\n    this.tileMap.forEach(function (tile, tileId) {\n      if (!_this.currentLocalTile || tileId !== _this.currentLocalTile.id()) {\n        result.push(tile);\n      }\n    });\n    return result;\n  };\n\n  DefaultVideoTileController.prototype.getAllVideoTiles = function () {\n    return Array.from(this.tileMap.values());\n  };\n\n  DefaultVideoTileController.prototype.addVideoTile = function (localTile) {\n    if (localTile === void 0) {\n      localTile = false;\n    }\n\n    var tileId = this.nextTileId;\n    this.nextTileId += 1;\n    var tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);\n    this.tileMap.set(tileId, tile);\n    return tile;\n  };\n\n  DefaultVideoTileController.prototype.removeVideoTile = function (tileId) {\n    if (!this.tileMap.has(tileId)) {\n      return;\n    }\n\n    var tile = this.tileMap.get(tileId);\n\n    if (this.currentLocalTile === tile) {\n      this.currentLocalTile = null;\n    }\n\n    tile.destroy();\n    this.tileMap.delete(tileId);\n    this.audioVideoController.forEachObserver(function (observer) {\n      Maybe_1.default.of(observer.videoTileWasRemoved).map(function (f) {\n        return f.bind(observer)(tileId);\n      });\n    });\n  };\n\n  DefaultVideoTileController.prototype.removeVideoTilesByAttendeeId = function (attendeeId) {\n    var e_1, _a;\n\n    var tilesRemoved = [];\n\n    try {\n      for (var _b = __values(this.getAllVideoTiles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var tile = _c.value;\n        var state = tile.state();\n\n        if (state.boundAttendeeId === attendeeId) {\n          this.removeVideoTile(state.tileId);\n          tilesRemoved.push(state.tileId);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return tilesRemoved;\n  };\n\n  DefaultVideoTileController.prototype.removeAllVideoTiles = function () {\n    var e_2, _a;\n\n    var tileIds = Array.from(this.tileMap.keys());\n\n    try {\n      for (var tileIds_1 = __values(tileIds), tileIds_1_1 = tileIds_1.next(); !tileIds_1_1.done; tileIds_1_1 = tileIds_1.next()) {\n        var tileId = tileIds_1_1.value;\n        this.removeVideoTile(tileId);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (tileIds_1_1 && !tileIds_1_1.done && (_a = tileIds_1.return)) _a.call(tileIds_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  DefaultVideoTileController.prototype.sendTileStateUpdate = function (tileState) {\n    this.audioVideoController.forEachObserver(function (observer) {\n      Maybe_1.default.of(observer.videoTileDidUpdate).map(function (f) {\n        return f.bind(observer)(tileState);\n      });\n    });\n  };\n\n  DefaultVideoTileController.prototype.haveVideoTilesWithStreams = function () {\n    var e_3, _a;\n\n    try {\n      for (var _b = __values(this.getAllVideoTiles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var tile = _c.value;\n\n        if (tile.state().boundVideoStream) {\n          return true;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return false;\n  };\n\n  DefaultVideoTileController.prototype.haveVideoTileForAttendeeId = function (attendeeId) {\n    var e_4, _a;\n\n    try {\n      for (var _b = __values(this.getAllVideoTiles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var tile = _c.value;\n        var state = tile.state();\n\n        if (state.boundAttendeeId === attendeeId) {\n          return true;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return false;\n  };\n\n  DefaultVideoTileController.prototype.captureVideoTile = function (tileId) {\n    var tile = this.getVideoTile(tileId);\n\n    if (!tile) {\n      return null;\n    }\n\n    return tile.capture();\n  };\n\n  DefaultVideoTileController.prototype.findOrCreateLocalVideoTile = function () {\n    if (this.currentLocalTile) {\n      return this.currentLocalTile;\n    }\n\n    this.currentLocalTile = this.addVideoTile(true);\n    this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n    return this.currentLocalTile;\n  };\n\n  return DefaultVideoTileController;\n}();\n\nexports.default = DefaultVideoTileController;","map":{"version":3,"sources":["../../src/videotilecontroller/DefaultVideoTileController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DefaultDevicePixelRatioMonitor_1 = require(\"../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor\");\nvar DevicePixelRatioWindowSource_1 = require(\"../devicepixelratiosource/DevicePixelRatioWindowSource\");\nvar Maybe_1 = require(\"../maybe/Maybe\");\nvar DefaultVideoTileController = /** @class */ (function () {\n    function DefaultVideoTileController(tileFactory, audioVideoController, logger) {\n        this.tileFactory = tileFactory;\n        this.audioVideoController = audioVideoController;\n        this.logger = logger;\n        this.tileMap = new Map();\n        this.nextTileId = 1;\n        this.currentLocalTile = null;\n        this.currentPausedTilesByIds = new Set();\n        this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor_1.default(new DevicePixelRatioWindowSource_1.default(), logger);\n    }\n    DefaultVideoTileController.prototype.bindVideoElement = function (tileId, videoElement) {\n        var tile = this.getVideoTile(tileId);\n        if (tile === null) {\n            this.logger.warn(\"Ignoring video element binding for unknown tile id \" + tileId);\n            return;\n        }\n        tile.bindVideoElement(videoElement);\n    };\n    DefaultVideoTileController.prototype.unbindVideoElement = function (tileId) {\n        this.bindVideoElement(tileId, null);\n    };\n    DefaultVideoTileController.prototype.startLocalVideoTile = function () {\n        var tile = this.findOrCreateLocalVideoTile();\n        this.currentLocalTile.stateRef().localTileStarted = true;\n        this.audioVideoController.update();\n        return tile.id();\n    };\n    DefaultVideoTileController.prototype.stopLocalVideoTile = function () {\n        if (!this.currentLocalTile) {\n            return;\n        }\n        this.currentLocalTile.stateRef().localTileStarted = false;\n        this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n        this.audioVideoController.update();\n    };\n    DefaultVideoTileController.prototype.hasStartedLocalVideoTile = function () {\n        return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);\n    };\n    DefaultVideoTileController.prototype.removeLocalVideoTile = function () {\n        if (this.currentLocalTile) {\n            this.removeVideoTile(this.currentLocalTile.id());\n        }\n    };\n    DefaultVideoTileController.prototype.getLocalVideoTile = function () {\n        return this.currentLocalTile;\n    };\n    DefaultVideoTileController.prototype.pauseVideoTile = function (tileId) {\n        var tile = this.getVideoTile(tileId);\n        if (tile) {\n            if (!this.currentPausedTilesByIds.has(tileId)) {\n                this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);\n                this.currentPausedTilesByIds.add(tileId);\n            }\n            tile.pause();\n        }\n    };\n    DefaultVideoTileController.prototype.unpauseVideoTile = function (tileId) {\n        var tile = this.getVideoTile(tileId);\n        if (tile) {\n            if (this.currentPausedTilesByIds.has(tileId)) {\n                this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);\n                this.currentPausedTilesByIds.delete(tileId);\n            }\n            tile.unpause();\n        }\n    };\n    DefaultVideoTileController.prototype.getVideoTile = function (tileId) {\n        return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;\n    };\n    DefaultVideoTileController.prototype.getVideoTileArea = function (tile) {\n        var state = tile.state();\n        var tileHeight = 0;\n        var tileWidth = 0;\n        if (state.boundVideoElement) {\n            tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;\n            tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;\n        }\n        return tileHeight * tileWidth;\n    };\n    DefaultVideoTileController.prototype.getAllRemoteVideoTiles = function () {\n        var _this = this;\n        var result = new Array();\n        this.tileMap.forEach(function (tile, tileId) {\n            if (!_this.currentLocalTile || tileId !== _this.currentLocalTile.id()) {\n                result.push(tile);\n            }\n        });\n        return result;\n    };\n    DefaultVideoTileController.prototype.getAllVideoTiles = function () {\n        return Array.from(this.tileMap.values());\n    };\n    DefaultVideoTileController.prototype.addVideoTile = function (localTile) {\n        if (localTile === void 0) { localTile = false; }\n        var tileId = this.nextTileId;\n        this.nextTileId += 1;\n        var tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);\n        this.tileMap.set(tileId, tile);\n        return tile;\n    };\n    DefaultVideoTileController.prototype.removeVideoTile = function (tileId) {\n        if (!this.tileMap.has(tileId)) {\n            return;\n        }\n        var tile = this.tileMap.get(tileId);\n        if (this.currentLocalTile === tile) {\n            this.currentLocalTile = null;\n        }\n        tile.destroy();\n        this.tileMap.delete(tileId);\n        this.audioVideoController.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.videoTileWasRemoved).map(function (f) { return f.bind(observer)(tileId); });\n        });\n    };\n    DefaultVideoTileController.prototype.removeVideoTilesByAttendeeId = function (attendeeId) {\n        var e_1, _a;\n        var tilesRemoved = [];\n        try {\n            for (var _b = __values(this.getAllVideoTiles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var tile = _c.value;\n                var state = tile.state();\n                if (state.boundAttendeeId === attendeeId) {\n                    this.removeVideoTile(state.tileId);\n                    tilesRemoved.push(state.tileId);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return tilesRemoved;\n    };\n    DefaultVideoTileController.prototype.removeAllVideoTiles = function () {\n        var e_2, _a;\n        var tileIds = Array.from(this.tileMap.keys());\n        try {\n            for (var tileIds_1 = __values(tileIds), tileIds_1_1 = tileIds_1.next(); !tileIds_1_1.done; tileIds_1_1 = tileIds_1.next()) {\n                var tileId = tileIds_1_1.value;\n                this.removeVideoTile(tileId);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (tileIds_1_1 && !tileIds_1_1.done && (_a = tileIds_1.return)) _a.call(tileIds_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    DefaultVideoTileController.prototype.sendTileStateUpdate = function (tileState) {\n        this.audioVideoController.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.videoTileDidUpdate).map(function (f) { return f.bind(observer)(tileState); });\n        });\n    };\n    DefaultVideoTileController.prototype.haveVideoTilesWithStreams = function () {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this.getAllVideoTiles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var tile = _c.value;\n                if (tile.state().boundVideoStream) {\n                    return true;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return false;\n    };\n    DefaultVideoTileController.prototype.haveVideoTileForAttendeeId = function (attendeeId) {\n        var e_4, _a;\n        try {\n            for (var _b = __values(this.getAllVideoTiles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var tile = _c.value;\n                var state = tile.state();\n                if (state.boundAttendeeId === attendeeId) {\n                    return true;\n                }\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return false;\n    };\n    DefaultVideoTileController.prototype.captureVideoTile = function (tileId) {\n        var tile = this.getVideoTile(tileId);\n        if (!tile) {\n            return null;\n        }\n        return tile.capture();\n    };\n    DefaultVideoTileController.prototype.findOrCreateLocalVideoTile = function () {\n        if (this.currentLocalTile) {\n            return this.currentLocalTile;\n        }\n        this.currentLocalTile = this.addVideoTile(true);\n        this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n        return this.currentLocalTile;\n    };\n    return DefaultVideoTileController;\n}());\nexports.default = DefaultVideoTileController;\n//# sourceMappingURL=DefaultVideoTileController.js.map"]},"metadata":{},"sourceType":"script"}