{"ast":null,"code":"import { ConsoleLogger, DefaultDeviceController, DefaultDOMWebSocketFactory, DefaultMeetingSession, DefaultModality, DefaultPromisedWebSocketFactory, FullJitterBackoff, LogLevel, MeetingSessionConfiguration, ReconnectingPromisedWebSocket } from 'amazon-chime-sdk-js';\nimport throttle from 'lodash/throttle';\nimport * as config from '../../config';\nexport default class ChimeSdkWrapper {\n  constructor() {\n    this.initializeSdkWrapper();\n  }\n\n  initializeSdkWrapper() {\n    this.meetingSession = null;\n    this.audioVideo = null;\n    this.title = null;\n    this.name = null;\n    this.region = null;\n    this.currentAudioInputDevice = null;\n    this.currentAudioOutputDevice = null;\n    this.currentVideoInputDevice = null;\n    this.audioInputDevices = [];\n    this.audioOutputDevices = [];\n    this.videoInputDevices = [];\n    this.devicesUpdatedCallbacks = [];\n    this.roster = {};\n    this.rosterUpdateCallbacks = [];\n    this.configuration = null;\n    this.messagingSocket = null;\n    this.messageUpdateCallbacks = [];\n  }\n\n  logError(error) {\n    console.error(error);\n  }\n\n  async createRoom(role, name, title, playbackURL, region) {\n    if (!name || !title || !role) {\n      console.error(`role=${role} name=${name} title=${title} must exist`);\n      return;\n    }\n\n    const payload = {\n      name,\n      title,\n      playbackURL,\n      role\n    };\n    const response = await fetch(`${config.CHIME_ROOM_API}/join`, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.error);\n    }\n\n    const {\n      JoinInfo\n    } = json;\n\n    if (!JoinInfo) {\n      throw new Error('CreateOrJoin.classRoomDoesNotExist');\n    }\n\n    this.configuration = new MeetingSessionConfiguration(JoinInfo.Meeting, JoinInfo.Attendee);\n    await this.initializeMeetingSession(this.configuration);\n    this.title = title;\n    this.name = name;\n    this.region = region;\n    return JoinInfo;\n  }\n\n  async reInitializeMeetingSession(JoinInfo, name) {\n    this.configuration = new MeetingSessionConfiguration(JoinInfo.Meeting, JoinInfo.Attendee);\n    await this.initializeMeetingSession(this.configuration);\n    this.title = JoinInfo.Title;\n    this.name = name; // this.region = region;\n  }\n\n  async initializeMeetingSession(configuration) {\n    const logger = new ConsoleLogger('SDK', LogLevel.ERROR);\n    const deviceController = new DefaultDeviceController(logger);\n    this.meetingSession = new DefaultMeetingSession(configuration, logger, deviceController);\n    this.audioVideo = this.meetingSession.audioVideo;\n    this.audioInputDevices = [];\n    (await this.audioVideo.listAudioInputDevices()).forEach(mediaDeviceInfo => {\n      this.audioInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    this.audioOutputDevices = [];\n    (await this.audioVideo.listAudioOutputDevices()).forEach(mediaDeviceInfo => {\n      this.audioOutputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    this.videoInputDevices = [];\n    (await this.audioVideo.listVideoInputDevices()).forEach(mediaDeviceInfo => {\n      this.videoInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    this.publishDevicesUpdated();\n    this.audioVideo.addDeviceChangeObserver(this);\n    this.audioVideo.realtimeSubscribeToAttendeeIdPresence((presentAttendeeId, present) => {\n      if (!present) {\n        delete this.roster[presentAttendeeId]; //this.publishRosterUpdate.cancel();\n\n        this.publishRosterUpdate()();\n        return;\n      }\n\n      this.audioVideo.realtimeSubscribeToVolumeIndicator(presentAttendeeId, async (attendeeId, volume, muted, signalStrength) => {\n        const baseAttendeeId = new DefaultModality(attendeeId).base();\n\n        if (baseAttendeeId !== attendeeId) {\n          // Don't include the content attendee in the roster.\n          //\n          // When you or other attendees share content (a screen capture, a video file,\n          // or any other MediaStream object), the content attendee (attendee-id#content) joins the session and\n          // shares content as if a regular attendee shares a video.\n          //\n          // For example, your attendee ID is \"my-id\". When you call meetingSession.audioVideo.startContentShare,\n          // the content attendee \"my-id#content\" will join the session and share your content.\n          return;\n        }\n\n        let shouldPublishImmediately = false;\n\n        if (!this.roster[attendeeId]) {\n          this.roster[attendeeId] = {\n            name: ''\n          };\n        }\n\n        if (volume !== null) {\n          this.roster[attendeeId].volume = Math.round(volume * 100);\n        }\n\n        if (muted !== null) {\n          this.roster[attendeeId].muted = muted;\n        }\n\n        if (signalStrength !== null) {\n          this.roster[attendeeId].signalStrength = Math.round(signalStrength * 100);\n        }\n\n        if (this.title && attendeeId && !this.roster[attendeeId].name) {\n          const response = await fetch(`${config.CHIME_ROOM_API}/attendee?title=${encodeURIComponent(this.title)}&attendeeId=${encodeURIComponent(attendeeId)}`);\n          const json = await response.json();\n\n          if (json.AttendeeInfo && this.roster[attendeeId]) {\n            this.roster[attendeeId].name = json.AttendeeInfo.Name || '';\n            shouldPublishImmediately = true;\n          }\n        }\n\n        if (shouldPublishImmediately) {//this.publishRosterUpdate.cancel();\n        }\n\n        this.publishRosterUpdate()();\n      });\n    });\n  }\n\n  async joinRoom(element) {\n    if (!element) {\n      this.logError(new Error(`element does not exist`));\n      return;\n    }\n\n    window.addEventListener('unhandledrejection', event => {\n      this.logError(event.reason);\n    });\n    const audioInputs = await this.audioVideo.listAudioInputDevices();\n\n    if (audioInputs && audioInputs.length > 0 && audioInputs[0].deviceId) {\n      this.currentAudioInputDevice = {\n        label: audioInputs[0].label,\n        value: audioInputs[0].deviceId\n      };\n      await this.audioVideo.chooseAudioInputDevice(audioInputs[0].deviceId);\n    }\n\n    const audioOutputs = await this.audioVideo.listAudioOutputDevices();\n\n    if (audioOutputs && audioOutputs.length > 0 && audioOutputs[0].deviceId) {\n      this.currentAudioOutputDevice = {\n        label: audioOutputs[0].label,\n        value: audioOutputs[0].deviceId\n      };\n      await this.audioVideo.chooseAudioOutputDevice(audioOutputs[0].deviceId);\n    }\n\n    const videoInputs = await this.audioVideo.listVideoInputDevices();\n\n    if (videoInputs && videoInputs.length > 0 && videoInputs[0].deviceId) {\n      this.currentVideoInputDevice = {\n        label: videoInputs[0].label,\n        value: videoInputs[0].deviceId\n      };\n      await this.audioVideo.chooseVideoInputDevice(null);\n    }\n\n    this.publishDevicesUpdated();\n    this.audioVideo.bindAudioElement(element);\n    this.audioVideo.start();\n  }\n\n  async joinRoomMessaging() {\n    if (!this.configuration) {\n      this.logError(new Error('configuration does not exist'));\n      return;\n    }\n\n    const messagingUrl = `${config.CHAT_WEBSOCKET}?MeetingId=${this.configuration.meetingId}&AttendeeId=${this.configuration.credentials.attendeeId}&JoinToken=${this.configuration.credentials.joinToken}`;\n    this.messagingSocket = new ReconnectingPromisedWebSocket(messagingUrl, [], 'arraybuffer', new DefaultPromisedWebSocketFactory(new DefaultDOMWebSocketFactory()), new FullJitterBackoff(1000, 0, 10000));\n    await this.messagingSocket.open(this.WEB_SOCKET_TIMEOUT_MS);\n    this.messagingSocket.addEventListener('message', event => {\n      try {\n        const data = JSON.parse(event.data);\n        const {\n          attendeeId\n        } = data.payload;\n        let name;\n\n        if (this.roster[attendeeId]) {\n          name = this.roster[attendeeId].name;\n        }\n\n        this.publishMessageUpdate({\n          type: data.type,\n          payload: data.payload,\n          timestampMs: Date.now(),\n          name\n        });\n      } catch (error) {\n        this.logError(error);\n      }\n    });\n  }\n\n  sendMessage(type, payload) {\n    if (!this.messagingSocket) {\n      return;\n    }\n\n    const message = {\n      message: 'sendmessage',\n      data: JSON.stringify({\n        type,\n        payload\n      })\n    };\n\n    try {\n      this.messagingSocket.send(JSON.stringify(message));\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async leaveRoom(end) {\n    try {\n      this.audioVideo.stop();\n    } catch (error) {\n      this.logError(error);\n    } // try {\n    //   await this.messagingSocket.close(this.WEB_SOCKET_TIMEOUT_MS);\n    // } catch (error) {\n    //   this.logError(error);\n    // }\n\n\n    try {\n      if (end && this.title) {\n        await fetch(`${config.CHIME_ROOM_API}/end?title=${encodeURIComponent(this.title)}`, {\n          method: 'POST'\n        });\n      }\n    } catch (error) {\n      this.logError(error);\n    }\n\n    this.initializeSdkWrapper();\n  } // Device\n\n\n  async chooseAudioInputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioInputDevice(device.value);\n      this.currentAudioInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseAudioOutputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioOutputDevice(device.value);\n      this.currentAudioOutputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseVideoInputDevice(device) {\n    try {\n      await this.audioVideo.chooseVideoInputDevice(device.value);\n      this.currentVideoInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  } // Observer methods\n\n\n  audioInputsChanged(freshAudioInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioInputDevices = [];\n    freshAudioInputDeviceList.forEach(mediaDeviceInfo => {\n      if (this.currentAudioInputDevice && mediaDeviceInfo.deviceId === this.currentAudioInputDevice.value) {\n        hasCurrentDevice = true;\n      }\n\n      this.audioInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n\n    if (!hasCurrentDevice) {\n      this.currentAudioInputDevice = this.audioInputDevices.length > 0 ? this.audioInputDevices[0] : null;\n    }\n\n    this.publishDevicesUpdated();\n  }\n\n  audioOutputsChanged(freshAudioOutputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioOutputDevices = [];\n    freshAudioOutputDeviceList.forEach(mediaDeviceInfo => {\n      if (this.currentAudioOutputDevice && mediaDeviceInfo.deviceId === this.currentAudioOutputDevice.value) {\n        hasCurrentDevice = true;\n      }\n\n      this.audioOutputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n\n    if (!hasCurrentDevice) {\n      this.currentAudioOutputDevice = this.audioOutputDevices.length > 0 ? this.audioOutputDevices[0] : null;\n    }\n\n    this.publishDevicesUpdated();\n  }\n\n  videoInputsChanged(freshVideoInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.videoInputDevices = [];\n    freshVideoInputDeviceList.forEach(mediaDeviceInfo => {\n      if (this.currentVideoInputDevice && mediaDeviceInfo.deviceId === this.currentVideoInputDevice.value) {\n        hasCurrentDevice = true;\n      }\n\n      this.videoInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n\n    if (!hasCurrentDevice) {\n      this.currentVideoInputDevice = this.videoInputDevices.length > 0 ? this.videoInputDevices[0] : null;\n    }\n\n    this.publishDevicesUpdated();\n  } // Subscribe and unsubscribe\n\n\n  subscribeToDevicesUpdated(callback) {\n    this.devicesUpdatedCallbacks.push(callback);\n  }\n\n  unsubscribeFromDevicesUpdated(callback) {\n    const index = this.devicesUpdatedCallbacks.indexOf(callback);\n\n    if (index !== -1) {\n      this.devicesUpdatedCallbacks.splice(index, 1);\n    }\n  }\n\n  publishDevicesUpdated() {\n    this.devicesUpdatedCallbacks.forEach(callback => {\n      callback({\n        currentAudioInputDevice: this.currentAudioInputDevice,\n        currentAudioOutputDevice: this.currentAudioOutputDevice,\n        currentVideoInputDevice: this.currentVideoInputDevice,\n        audioInputDevices: this.audioInputDevices,\n        audioOutputDevices: this.audioOutputDevices,\n        videoInputDevices: this.videoInputDevices\n      });\n    });\n  }\n\n  subscribeToRosterUpdate(callback) {\n    this.rosterUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromRosterUpdate(callback) {\n    const index = this.rosterUpdateCallbacks.indexOf(callback);\n\n    if (index !== -1) {\n      this.rosterUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishRosterUpdate() {\n    return throttle(() => {\n      for (let i = 0; i < this.rosterUpdateCallbacks.length; i += 1) {\n        const callback = this.rosterUpdateCallbacks[i];\n        callback(this.roster);\n      }\n    }, this.ROSTER_THROTTLE_MS);\n  }\n\n  subscribeToMessageUpdate(callback) {\n    this.messageUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromMessageUpdate(callback) {\n    const index = this.messageUpdateCallbacks.indexOf(callback);\n\n    if (index !== -1) {\n      this.messageUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishMessageUpdate(message) {\n    for (let i = 0; i < this.messageUpdateCallbacks.length; i += 1) {\n      const callback = this.messageUpdateCallbacks[i];\n      callback(message);\n    }\n  }\n\n}\nChimeSdkWrapper.WEB_SOCKET_TIMEOUT_MS = 10000;\nChimeSdkWrapper.ROSTER_THROTTLE_MS = 400;","map":{"version":3,"sources":["/Users/sykang/Documents/Git/amazon-ivs-chime-web-demo/web-ui/src/components/chime/ChimeSdkWrapper.js"],"names":["ConsoleLogger","DefaultDeviceController","DefaultDOMWebSocketFactory","DefaultMeetingSession","DefaultModality","DefaultPromisedWebSocketFactory","FullJitterBackoff","LogLevel","MeetingSessionConfiguration","ReconnectingPromisedWebSocket","throttle","config","ChimeSdkWrapper","constructor","initializeSdkWrapper","meetingSession","audioVideo","title","name","region","currentAudioInputDevice","currentAudioOutputDevice","currentVideoInputDevice","audioInputDevices","audioOutputDevices","videoInputDevices","devicesUpdatedCallbacks","roster","rosterUpdateCallbacks","configuration","messagingSocket","messageUpdateCallbacks","logError","error","console","createRoom","role","playbackURL","payload","response","fetch","CHIME_ROOM_API","method","body","JSON","stringify","json","Error","JoinInfo","Meeting","Attendee","initializeMeetingSession","reInitializeMeetingSession","Title","logger","ERROR","deviceController","listAudioInputDevices","forEach","mediaDeviceInfo","push","label","value","deviceId","listAudioOutputDevices","listVideoInputDevices","publishDevicesUpdated","addDeviceChangeObserver","realtimeSubscribeToAttendeeIdPresence","presentAttendeeId","present","publishRosterUpdate","realtimeSubscribeToVolumeIndicator","attendeeId","volume","muted","signalStrength","baseAttendeeId","base","shouldPublishImmediately","Math","round","encodeURIComponent","AttendeeInfo","Name","joinRoom","element","window","addEventListener","event","reason","audioInputs","length","chooseAudioInputDevice","audioOutputs","chooseAudioOutputDevice","videoInputs","chooseVideoInputDevice","bindAudioElement","start","joinRoomMessaging","messagingUrl","CHAT_WEBSOCKET","meetingId","credentials","joinToken","open","WEB_SOCKET_TIMEOUT_MS","data","parse","publishMessageUpdate","type","timestampMs","Date","now","sendMessage","message","send","leaveRoom","end","stop","device","audioInputsChanged","freshAudioInputDeviceList","hasCurrentDevice","audioOutputsChanged","freshAudioOutputDeviceList","videoInputsChanged","freshVideoInputDeviceList","subscribeToDevicesUpdated","callback","unsubscribeFromDevicesUpdated","index","indexOf","splice","subscribeToRosterUpdate","unsubscribeFromRosterUpdate","i","ROSTER_THROTTLE_MS","subscribeToMessageUpdate","unsubscribeFromMessageUpdate"],"mappings":"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","sourcesContent":["import {\n  ConsoleLogger,\n  DefaultDeviceController,\n  DefaultDOMWebSocketFactory,\n  DefaultMeetingSession,\n  DefaultModality,\n  DefaultPromisedWebSocketFactory,\n  FullJitterBackoff,\n  LogLevel,\n  MeetingSessionConfiguration,\n  ReconnectingPromisedWebSocket\n} from 'amazon-chime-sdk-js';\n\nimport throttle from 'lodash/throttle';\nimport * as config from '../../config';\n\n\nexport default class ChimeSdkWrapper {\n\n  static WEB_SOCKET_TIMEOUT_MS = 10000;\n  static ROSTER_THROTTLE_MS = 400;\n\n  constructor() {\n    this.initializeSdkWrapper();\n  }\n\n  initializeSdkWrapper() {\n    this.meetingSession = null;\n    this.audioVideo = null;\n    this.title = null;\n    this.name = null;\n    this.region = null;\n    this.currentAudioInputDevice = null;\n    this.currentAudioOutputDevice = null;\n    this.currentVideoInputDevice = null;\n    this.audioInputDevices = [];\n    this.audioOutputDevices = [];\n    this.videoInputDevices = [];\n    this.devicesUpdatedCallbacks = [];\n    this.roster = {};\n    this.rosterUpdateCallbacks = [];\n    this.configuration = null;\n    this.messagingSocket = null;\n    this.messageUpdateCallbacks = [];\n  }\n\n  logError(error) {\n    console.error(error);\n  }\n\n  async createRoom(role, name, title, playbackURL, region) {\n    if (!name || !title || !role) {\n      console.error(\n           `role=${role} name=${name} title=${title} must exist`\n      );\n      return;\n    }\n\n    const payload = {\n      name,\n      title,\n      playbackURL,\n      role\n    };\n\n    const response = await fetch(\n      `${config.CHIME_ROOM_API}/join`,\n      {\n        method: 'POST',\n        body: JSON.stringify(payload)\n      }\n    );\n    const json = await response.json();\n    if (json.error) {\n      throw new Error(\n        json.error\n      );\n    }\n\n    const { JoinInfo } = json;\n    if (!JoinInfo) {\n      throw new Error(\n        'CreateOrJoin.classRoomDoesNotExist'\n      );\n    }\n    this.configuration = new MeetingSessionConfiguration(\n      JoinInfo.Meeting,\n      JoinInfo.Attendee\n    );\n    await this.initializeMeetingSession(this.configuration);\n\n    this.title = title;\n    this.name = name;\n    this.region = region;\n\n    return JoinInfo;\n  }\n\n  async reInitializeMeetingSession(JoinInfo, name) {\n    this.configuration = new MeetingSessionConfiguration(\n      JoinInfo.Meeting,\n      JoinInfo.Attendee\n    );\n    await this.initializeMeetingSession(this.configuration);\n\n    this.title = JoinInfo.Title;\n    this.name = name;\n    // this.region = region;\n  }\n\n  async initializeMeetingSession(configuration) {\n    const logger = new ConsoleLogger('SDK', LogLevel.ERROR);\n    const deviceController = new DefaultDeviceController(logger);\n    this.meetingSession = new DefaultMeetingSession(\n      configuration,\n      logger,\n      deviceController\n    );\n    this.audioVideo = this.meetingSession.audioVideo;\n\n    this.audioInputDevices = [];\n    (await this.audioVideo.listAudioInputDevices()).forEach(\n      (mediaDeviceInfo) => {\n        this.audioInputDevices.push({\n          label: mediaDeviceInfo.label,\n          value: mediaDeviceInfo.deviceId\n        });\n      }\n    );\n    this.audioOutputDevices = [];\n    (await this.audioVideo.listAudioOutputDevices()).forEach(\n      (mediaDeviceInfo) => {\n        this.audioOutputDevices.push({\n          label: mediaDeviceInfo.label,\n          value: mediaDeviceInfo.deviceId\n        });\n      }\n    );\n    this.videoInputDevices = [];\n    (await this.audioVideo.listVideoInputDevices()).forEach(\n      (mediaDeviceInfo) => {\n        this.videoInputDevices.push({\n          label: mediaDeviceInfo.label,\n          value: mediaDeviceInfo.deviceId\n        });\n      }\n    );\n    this.publishDevicesUpdated();\n    this.audioVideo.addDeviceChangeObserver(this);\n\n    this.audioVideo.realtimeSubscribeToAttendeeIdPresence(\n      (presentAttendeeId, present) => {\n        if (!present) {\n          delete this.roster[presentAttendeeId];\n          //this.publishRosterUpdate.cancel();\n          this.publishRosterUpdate()();\n          return;\n        }\n\n        this.audioVideo.realtimeSubscribeToVolumeIndicator(\n          presentAttendeeId,\n          async (\n            attendeeId,\n            volume,\n            muted,\n            signalStrength\n          ) => {\n            const baseAttendeeId = new DefaultModality(attendeeId).base();\n            if (baseAttendeeId !== attendeeId) {\n              // Don't include the content attendee in the roster.\n              //\n              // When you or other attendees share content (a screen capture, a video file,\n              // or any other MediaStream object), the content attendee (attendee-id#content) joins the session and\n              // shares content as if a regular attendee shares a video.\n              //\n              // For example, your attendee ID is \"my-id\". When you call meetingSession.audioVideo.startContentShare,\n              // the content attendee \"my-id#content\" will join the session and share your content.\n              return;\n            }\n\n            let shouldPublishImmediately = false;\n\n            if (!this.roster[attendeeId]) {\n              this.roster[attendeeId] = { name: '' };\n            }\n            if (volume !== null) {\n              this.roster[attendeeId].volume = Math.round(volume * 100);\n            }\n            if (muted !== null) {\n              this.roster[attendeeId].muted = muted;\n            }\n            if (signalStrength !== null) {\n              this.roster[attendeeId].signalStrength = Math.round(\n                signalStrength * 100\n              );\n            }\n            if (this.title && attendeeId && !this.roster[attendeeId].name) {\n              const response = await fetch(\n                `${config.CHIME_ROOM_API}/attendee?title=${encodeURIComponent(\n                  this.title\n                )}&attendeeId=${encodeURIComponent(attendeeId)}`\n              );\n              const json = await response.json();\n              if (json.AttendeeInfo && this.roster[attendeeId]) {\n                this.roster[attendeeId].name = json.AttendeeInfo.Name || '';\n                shouldPublishImmediately = true;\n              }\n            }\n\n            if (shouldPublishImmediately) {\n              //this.publishRosterUpdate.cancel();\n            }\n            this.publishRosterUpdate()();\n          }\n        );\n      }\n    );\n  }\n\n  async joinRoom(element) {\n    if (!element) {\n      this.logError(new Error(`element does not exist`));\n      return;\n    }\n\n    window.addEventListener(\n      'unhandledrejection',\n      (event) => {\n        this.logError(event.reason);\n      }\n    );\n\n    const audioInputs = await this.audioVideo.listAudioInputDevices();\n    if (audioInputs && audioInputs.length > 0 && audioInputs[0].deviceId) {\n      this.currentAudioInputDevice = {\n        label: audioInputs[0].label,\n        value: audioInputs[0].deviceId\n      };\n      await this.audioVideo.chooseAudioInputDevice(audioInputs[0].deviceId);\n    }\n\n    const audioOutputs = await this.audioVideo.listAudioOutputDevices();\n    if (audioOutputs && audioOutputs.length > 0 && audioOutputs[0].deviceId) {\n      this.currentAudioOutputDevice = {\n        label: audioOutputs[0].label,\n        value: audioOutputs[0].deviceId\n      };\n      await this.audioVideo.chooseAudioOutputDevice(audioOutputs[0].deviceId);\n    }\n\n    const videoInputs = await this.audioVideo.listVideoInputDevices();\n    if (videoInputs && videoInputs.length > 0 && videoInputs[0].deviceId) {\n      this.currentVideoInputDevice = {\n        label: videoInputs[0].label,\n        value: videoInputs[0].deviceId\n      };\n      await this.audioVideo.chooseVideoInputDevice(null);\n    }\n\n    this.publishDevicesUpdated();\n\n    this.audioVideo.bindAudioElement(element);\n    this.audioVideo.start();\n  }\n\n  async joinRoomMessaging() {\n    if (!this.configuration) {\n      this.logError(new Error('configuration does not exist'));\n      return;\n    }\n\n    const messagingUrl = `${config.CHAT_WEBSOCKET}?MeetingId=${this.configuration.meetingId}&AttendeeId=${this.configuration.credentials.attendeeId}&JoinToken=${this.configuration.credentials.joinToken}`;\n    this.messagingSocket = new ReconnectingPromisedWebSocket(\n      messagingUrl,\n      [],\n      'arraybuffer',\n      new DefaultPromisedWebSocketFactory(new DefaultDOMWebSocketFactory()),\n      new FullJitterBackoff(1000, 0, 10000)\n    );\n\n    await this.messagingSocket.open(this.WEB_SOCKET_TIMEOUT_MS);\n\n    this.messagingSocket.addEventListener('message', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        const { attendeeId } = data.payload;\n\n        let name;\n        if (this.roster[attendeeId]) {\n          name = this.roster[attendeeId].name;\n        }\n\n        this.publishMessageUpdate({\n          type: data.type,\n          payload: data.payload,\n          timestampMs: Date.now(),\n          name\n        });\n      } catch (error) {\n        this.logError(error);\n      }\n    });\n  }\n\n  sendMessage(type, payload) {\n    if (!this.messagingSocket) {\n      return;\n    }\n    const message = {\n      message: 'sendmessage',\n      data: JSON.stringify({ type, payload })\n    };\n    try {\n      this.messagingSocket.send(JSON.stringify(message));\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async leaveRoom(end) {\n    try {\n      this.audioVideo.stop();\n    } catch (error) {\n      this.logError(error);\n    }\n\n    // try {\n    //   await this.messagingSocket.close(this.WEB_SOCKET_TIMEOUT_MS);\n    // } catch (error) {\n    //   this.logError(error);\n    // }\n\n    try {\n      if (end && this.title) {\n        await fetch(\n          `${config.CHIME_ROOM_API}/end?title=${encodeURIComponent(this.title)}`,\n          {\n            method: 'POST'\n          }\n        );\n      }\n    } catch (error) {\n      this.logError(error);\n    }\n\n    this.initializeSdkWrapper();\n  }\n\n  // Device\n\n  async chooseAudioInputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioInputDevice(device.value);\n      this.currentAudioInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseAudioOutputDevice(device) {\n    try {\n      await this.audioVideo.chooseAudioOutputDevice(device.value);\n      this.currentAudioOutputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  async chooseVideoInputDevice(device) {\n    try {\n      await this.audioVideo.chooseVideoInputDevice(device.value);\n      this.currentVideoInputDevice = device;\n    } catch (error) {\n      this.logError(error);\n    }\n  }\n\n  // Observer methods\n\n  audioInputsChanged(freshAudioInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioInputDevices = [];\n    freshAudioInputDeviceList.forEach((mediaDeviceInfo) => {\n      if (\n        this.currentAudioInputDevice &&\n        mediaDeviceInfo.deviceId === this.currentAudioInputDevice.value\n      ) {\n        hasCurrentDevice = true;\n      }\n      this.audioInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    if (!hasCurrentDevice) {\n      this.currentAudioInputDevice =\n        this.audioInputDevices.length > 0 ? this.audioInputDevices[0] : null;\n    }\n    this.publishDevicesUpdated();\n  }\n\n  audioOutputsChanged(freshAudioOutputDeviceList) {\n    let hasCurrentDevice = false;\n    this.audioOutputDevices = [];\n    freshAudioOutputDeviceList.forEach((mediaDeviceInfo) => {\n      if (\n        this.currentAudioOutputDevice &&\n        mediaDeviceInfo.deviceId === this.currentAudioOutputDevice.value\n      ) {\n        hasCurrentDevice = true;\n      }\n      this.audioOutputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    if (!hasCurrentDevice) {\n      this.currentAudioOutputDevice =\n        this.audioOutputDevices.length > 0 ? this.audioOutputDevices[0] : null;\n    }\n    this.publishDevicesUpdated();\n  }\n\n  videoInputsChanged(freshVideoInputDeviceList) {\n    let hasCurrentDevice = false;\n    this.videoInputDevices = [];\n    freshVideoInputDeviceList.forEach((mediaDeviceInfo) => {\n      if (\n        this.currentVideoInputDevice &&\n        mediaDeviceInfo.deviceId === this.currentVideoInputDevice.value\n      ) {\n        hasCurrentDevice = true;\n      }\n      this.videoInputDevices.push({\n        label: mediaDeviceInfo.label,\n        value: mediaDeviceInfo.deviceId\n      });\n    });\n    if (!hasCurrentDevice) {\n      this.currentVideoInputDevice =\n        this.videoInputDevices.length > 0 ? this.videoInputDevices[0] : null;\n    }\n    this.publishDevicesUpdated();\n  }\n\n  // Subscribe and unsubscribe\n\n  subscribeToDevicesUpdated(callback) {\n    this.devicesUpdatedCallbacks.push(callback);\n  }\n\n  unsubscribeFromDevicesUpdated(callback) {\n    const index = this.devicesUpdatedCallbacks.indexOf(callback);\n    if (index !== -1) {\n      this.devicesUpdatedCallbacks.splice(index, 1);\n    }\n  }\n\n  publishDevicesUpdated() {\n    this.devicesUpdatedCallbacks.forEach(\n      (callback) => {\n        callback({\n          currentAudioInputDevice: this.currentAudioInputDevice,\n          currentAudioOutputDevice: this.currentAudioOutputDevice,\n          currentVideoInputDevice: this.currentVideoInputDevice,\n          audioInputDevices: this.audioInputDevices,\n          audioOutputDevices: this.audioOutputDevices,\n          videoInputDevices: this.videoInputDevices\n        });\n      }\n    );\n  }\n\n  subscribeToRosterUpdate(callback) {\n    this.rosterUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromRosterUpdate(callback) {\n    const index = this.rosterUpdateCallbacks.indexOf(callback);\n    if (index !== -1) {\n      this.rosterUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishRosterUpdate() {\n    return throttle(() => {\n      for (let i = 0; i < this.rosterUpdateCallbacks.length; i += 1) {\n        const callback = this.rosterUpdateCallbacks[i];\n        callback(this.roster);\n      }\n    }, this.ROSTER_THROTTLE_MS);\n  }\n\n  subscribeToMessageUpdate(callback) {\n    this.messageUpdateCallbacks.push(callback);\n  }\n\n  unsubscribeFromMessageUpdate(callback) {\n    const index = this.messageUpdateCallbacks.indexOf(callback);\n    if (index !== -1) {\n      this.messageUpdateCallbacks.splice(index, 1);\n    }\n  }\n\n  publishMessageUpdate(message) {\n    for (let i = 0; i < this.messageUpdateCallbacks.length; i += 1) {\n      const callback = this.messageUpdateCallbacks[i];\n      callback(message);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}