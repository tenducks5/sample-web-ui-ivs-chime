{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LogLevel_1 = require(\"./LogLevel\");\n/**\n * ConsoleLogger writes logs with console\n *\n * ```typescript\n *   // working with the ConsoleLogger\n *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN\n *   logger.info('info');\n *   logger.debug('debug');\n *   logger.warn('warn');\n *   logger.error('error');\n *\n *   // setting logging levels\n *   const logger = new ConsoleLogger('demo', LogLevel.INFO)\n *   logger.debug(debugFunc()); // this will not show up\n *   logger.setLogLevel(LogLevel.DEBUG)\n *   logger.debug(debugFunc()); // this will show up\n *\n * ```\n */\n\n\nvar ConsoleLogger =\n/** @class */\nfunction () {\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = LogLevel_1.default.WARN;\n    }\n\n    this.name = name;\n    this.level = level;\n  }\n\n  ConsoleLogger.prototype.info = function (msg) {\n    this.log(LogLevel_1.default.INFO, msg);\n  };\n\n  ConsoleLogger.prototype.warn = function (msg) {\n    this.log(LogLevel_1.default.WARN, msg);\n  };\n\n  ConsoleLogger.prototype.error = function (msg) {\n    this.log(LogLevel_1.default.ERROR, msg);\n  };\n\n  ConsoleLogger.prototype.debug = function (debugFunction) {\n    if (LogLevel_1.default.DEBUG < this.level) {\n      return;\n    }\n\n    this.log(LogLevel_1.default.DEBUG, typeof debugFunction === 'string' ? debugFunction : debugFunction());\n  };\n\n  ConsoleLogger.prototype.setLogLevel = function (level) {\n    this.level = level;\n  };\n\n  ConsoleLogger.prototype.getLogLevel = function () {\n    return this.level;\n  };\n\n  ConsoleLogger.prototype.log = function (type, msg) {\n    if (type < this.level) {\n      return;\n    }\n\n    var timestamp = new Date().toISOString();\n    var logMessage = timestamp + \" [\" + LogLevel_1.default[type] + \"] \" + this.name + \" - \" + msg;\n\n    switch (type) {\n      case LogLevel_1.default.ERROR:\n        console.error(logMessage);\n        break;\n\n      case LogLevel_1.default.WARN:\n        console.warn(logMessage);\n        break;\n\n      case LogLevel_1.default.DEBUG:\n        console.debug(logMessage.replace(/\\\\r\\\\n/g, '\\n'));\n        break;\n\n      case LogLevel_1.default.INFO:\n        console.info(logMessage);\n        break;\n    }\n  };\n\n  return ConsoleLogger;\n}();\n\nexports.default = ConsoleLogger;","map":{"version":3,"sources":["../../src/logger/ConsoleLogger.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;;;;;;;;;;;;;;;;AAkBG;;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAIE,WAAA,aAAA,CAAY,IAAZ,EAA0B,KAA1B,EAA+C;AAArB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAQ,UAAA,CAAA,OAAA,CAAS,IAAjB;AAAqB;;AAC7C,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,GAAL,EAAgB;AACd,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,IAAlB,EAAwB,GAAxB;AACD,GAFD;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,GAAL,EAAgB;AACd,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,IAAlB,EAAwB,GAAxB;AACD,GAFD;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,GAAN,EAAiB;AACf,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,KAAlB,EAAyB,GAAzB;AACD,GAFD;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,aAAN,EAA4C;AAC1C,QAAI,UAAA,CAAA,OAAA,CAAS,KAAT,GAAiB,KAAK,KAA1B,EAAiC;AAC/B;AACD;;AACD,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,KAAlB,EAAyB,OAAO,aAAP,KAAyB,QAAzB,GAAoC,aAApC,GAAoD,aAAa,EAA1F;AACD,GALD;;AAOA,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAA2B;AACzB,SAAK,KAAL,GAAa,KAAb;AACD,GAFD;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAZ;AACD,GAFD;;AAIQ,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,GAAR,UAAY,IAAZ,EAA4B,GAA5B,EAAuC;AACrC,QAAI,IAAI,GAAG,KAAK,KAAhB,EAAuB;AACrB;AACD;;AAED,QAAM,SAAS,GAAG,IAAI,IAAJ,GAAW,WAAX,EAAlB;AACA,QAAM,UAAU,GAAM,SAAS,GAAA,IAAT,GAAc,UAAA,CAAA,OAAA,CAAS,IAAT,CAAd,GAA4B,IAA5B,GAAiC,KAAK,IAAtC,GAA0C,KAA1C,GAAgD,GAAtE;;AAEA,YAAQ,IAAR;AACE,WAAK,UAAA,CAAA,OAAA,CAAS,KAAd;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,UAAd;AACA;;AACF,WAAK,UAAA,CAAA,OAAA,CAAS,IAAd;AACE,QAAA,OAAO,CAAC,IAAR,CAAa,UAAb;AACA;;AACF,WAAK,UAAA,CAAA,OAAA,CAAS,KAAd;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,UAAU,CAAC,OAAX,CAAmB,SAAnB,EAA8B,IAA9B,CAAd;AACA;;AACF,WAAK,UAAA,CAAA,OAAA,CAAS,IAAd;AACE,QAAA,OAAO,CAAC,IAAR,CAAa,UAAb;AACA;AAZJ;AAcD,GAtBO;;AAuBV,SAAA,aAAA;AAAC,CA3DD,EAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LogLevel_1 = require(\"./LogLevel\");\n/**\n * ConsoleLogger writes logs with console\n *\n * ```typescript\n *   // working with the ConsoleLogger\n *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN\n *   logger.info('info');\n *   logger.debug('debug');\n *   logger.warn('warn');\n *   logger.error('error');\n *\n *   // setting logging levels\n *   const logger = new ConsoleLogger('demo', LogLevel.INFO)\n *   logger.debug(debugFunc()); // this will not show up\n *   logger.setLogLevel(LogLevel.DEBUG)\n *   logger.debug(debugFunc()); // this will show up\n *\n * ```\n */\nvar ConsoleLogger = /** @class */ (function () {\n    function ConsoleLogger(name, level) {\n        if (level === void 0) { level = LogLevel_1.default.WARN; }\n        this.name = name;\n        this.level = level;\n    }\n    ConsoleLogger.prototype.info = function (msg) {\n        this.log(LogLevel_1.default.INFO, msg);\n    };\n    ConsoleLogger.prototype.warn = function (msg) {\n        this.log(LogLevel_1.default.WARN, msg);\n    };\n    ConsoleLogger.prototype.error = function (msg) {\n        this.log(LogLevel_1.default.ERROR, msg);\n    };\n    ConsoleLogger.prototype.debug = function (debugFunction) {\n        if (LogLevel_1.default.DEBUG < this.level) {\n            return;\n        }\n        this.log(LogLevel_1.default.DEBUG, typeof debugFunction === 'string' ? debugFunction : debugFunction());\n    };\n    ConsoleLogger.prototype.setLogLevel = function (level) {\n        this.level = level;\n    };\n    ConsoleLogger.prototype.getLogLevel = function () {\n        return this.level;\n    };\n    ConsoleLogger.prototype.log = function (type, msg) {\n        if (type < this.level) {\n            return;\n        }\n        var timestamp = new Date().toISOString();\n        var logMessage = timestamp + \" [\" + LogLevel_1.default[type] + \"] \" + this.name + \" - \" + msg;\n        switch (type) {\n            case LogLevel_1.default.ERROR:\n                console.error(logMessage);\n                break;\n            case LogLevel_1.default.WARN:\n                console.warn(logMessage);\n                break;\n            case LogLevel_1.default.DEBUG:\n                console.debug(logMessage.replace(/\\\\r\\\\n/g, '\\n'));\n                break;\n            case LogLevel_1.default.INFO:\n                console.info(logMessage);\n                break;\n        }\n    };\n    return ConsoleLogger;\n}());\nexports.default = ConsoleLogger;\n//# sourceMappingURL=ConsoleLogger.js.map"]},"metadata":{},"sourceType":"script"}