{"ast":null,"code":"\"use strict\"; // Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\n\nvar ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\n\nvar ClientVideoStreamReceivingReport_1 = require(\"../clientmetricreport/ClientVideoStreamReceivingReport\");\n\nvar ReconnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/ReconnectionHealthPolicy\");\n\nvar UnusableAudioWarningConnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy\");\n\nvar Maybe_1 = require(\"../maybe/Maybe\");\n\nvar MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nvar MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nvar SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nvar AudioLogEvent_1 = require(\"../statscollector/AudioLogEvent\");\n\nvar VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\n\nvar BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.\n */\n\n\nvar MonitorTask =\n/** @class */\nfunction (_super) {\n  __extends(MonitorTask, _super);\n\n  function MonitorTask(context, connectionHealthPolicyConfiguration, initialConnectionHealthData) {\n    var _this = _super.call(this, context.logger) || this;\n\n    _this.context = context;\n    _this.initialConnectionHealthData = initialConnectionHealthData;\n    _this.taskName = 'MonitorTask';\n    _this.prevSignalStrength = 1;\n    _this.currentVideoDownlinkBandwidthEstimationKbps = 10000;\n    _this.currentAvailableStreamAvgBitrates = null;\n    _this.hasSignalingError = false;\n\n    _this.checkAndSendWeakSignalEvent = function (signalStrength) {\n      var isCurrentSignalBad = signalStrength < 1;\n      var isPrevSignalBad = _this.prevSignalStrength < 1;\n      var signalStrengthEventType = isCurrentSignalBad ? !isPrevSignalBad ? AudioLogEvent_1.default.RedmicStartLoss : null : isPrevSignalBad ? AudioLogEvent_1.default.RedmicEndLoss : null;\n\n      if (signalStrengthEventType) {\n        _this.context.statsCollector.logAudioEvent(signalStrengthEventType);\n      }\n\n      _this.prevSignalStrength = signalStrength;\n    };\n\n    _this.realtimeFatalErrorCallback = function (error) {\n      _this.logger.error(\"realtime error: \" + error + \": \" + error.stack);\n\n      _this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.RealtimeApiFailed), error);\n    };\n\n    _this.reconnectionHealthPolicy = new ReconnectionHealthPolicy_1.default(context.logger, __assign({}, connectionHealthPolicyConfiguration), _this.initialConnectionHealthData.clone());\n    _this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy_1.default(__assign({}, connectionHealthPolicyConfiguration), _this.initialConnectionHealthData.clone());\n    return _this;\n  }\n\n  MonitorTask.prototype.removeObserver = function () {\n    this.context.audioVideoController.removeObserver(this);\n    this.context.realtimeController.realtimeUnsubscribeToFatalError(this.realtimeFatalErrorCallback);\n    this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n    this.context.signalingClient.removeObserver(this);\n  };\n\n  MonitorTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.context.removableObservers.push(this);\n        this.context.audioVideoController.addObserver(this);\n        this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);\n        this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n        this.context.connectionMonitor.start();\n        this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);\n        this.context.signalingClient.registerObserver(this);\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  MonitorTask.prototype.videoTileDidUpdate = function (_tileState) {\n    this.context.maxVideoTileCount = Math.max(this.context.maxVideoTileCount, this.context.videoTileController.getAllVideoTiles().length);\n  };\n\n  MonitorTask.prototype.videoSendHealthDidChange = function (bitrateKbps, packetsPerSecond) {\n    if (this.context.videoInputAttachedTimestampMs === 0 || !this.context.videoTileController.hasStartedLocalVideoTile() || !this.context.lastKnownVideoAvailability.canStartLocalVideo) {\n      return;\n    }\n\n    var tracks = this.context.activeVideoInput !== null ? this.context.activeVideoInput.getTracks() : null;\n\n    if (!tracks || !tracks[0]) {\n      return;\n    }\n\n    var durationMs = Date.now() - this.context.videoInputAttachedTimestampMs;\n\n    if (packetsPerSecond > 0 || bitrateKbps > 0) {\n      this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingSuccess, this.context.videoDeviceInformation);\n      this.context.statsCollector.logLatency('video_start_sending', durationMs, this.context.videoDeviceInformation);\n      this.context.videoInputAttachedTimestampMs = 0;\n    } else if (durationMs > MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS) {\n      this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingFailed, this.context.videoDeviceInformation);\n      this.context.videoInputAttachedTimestampMs = 0;\n    }\n  };\n\n  MonitorTask.prototype.videoReceiveBandwidthDidChange = function (newBandwidthKbps, oldBandwidthKbps) {\n    this.logger.debug(function () {\n      return \"receiving bandwidth changed from prev=\" + oldBandwidthKbps + \" Kbps to curr=\" + newBandwidthKbps + \" Kbps\";\n    });\n    this.currentVideoDownlinkBandwidthEstimationKbps = newBandwidthKbps;\n  };\n\n  MonitorTask.prototype.checkResubscribe = function (clientMetricReport) {\n    var metricReport = clientMetricReport.getObservableMetrics();\n\n    if (!metricReport) {\n      return false;\n    }\n\n    var availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;\n    var nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;\n    var needResubscribe = false;\n    this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);\n    var resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();\n    needResubscribe = needResubscribe || resubscribeForDownlink;\n\n    if (resubscribeForDownlink) {\n      this.context.videosToReceive = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();\n      this.logger.info(\"trigger resubscribe for down=\" + resubscribeForDownlink + \"; videosToReceive=[\" + this.context.videosToReceive.array() + \"]\");\n    }\n\n    if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n      this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({\n        uplinkKbps: availableSendBandwidth / 1000,\n        nackCountPerSecond: nackCountPerSecond\n      });\n      var resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();\n      needResubscribe = needResubscribe || resubscribeForUplink;\n\n      if (resubscribeForUplink) {\n        this.logger.info(\"trigger resubscribe for up=\" + resubscribeForUplink + \"; videosToReceive=[\" + this.context.videosToReceive.array() + \"]\");\n        this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n        this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n      }\n    }\n\n    return needResubscribe;\n  };\n\n  MonitorTask.prototype.metricsDidReceive = function (clientMetricReport) {\n    var e_1, _a;\n\n    var defaultClientMetricReport = clientMetricReport;\n\n    if (!defaultClientMetricReport) {\n      return;\n    }\n\n    if (this.checkResubscribe(clientMetricReport)) {\n      this.context.audioVideoController.update();\n    }\n\n    if (!this.currentAvailableStreamAvgBitrates) {\n      return;\n    }\n\n    var streamMetricReport = defaultClientMetricReport.streamMetricReports;\n\n    if (!streamMetricReport) {\n      return;\n    }\n\n    var downlinkVideoStream = new Map();\n    var videoReceivingBitrateMap = new Map(); // TODO: move those logic to stats collector.\n\n    for (var ssrc in streamMetricReport) {\n      if (streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType_1.default.VIDEO && streamMetricReport[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {\n        downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);\n      }\n    }\n\n    var fireCallback = false;\n\n    try {\n      for (var _b = __values(this.currentAvailableStreamAvgBitrates.bitrates), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var bitrate = _c.value;\n\n        if (downlinkVideoStream.has(bitrate.sourceStreamId)) {\n          var report = downlinkVideoStream.get(bitrate.sourceStreamId);\n          var attendeeId = this.context.videoStreamIndex.attendeeIdForStreamId(bitrate.sourceStreamId);\n\n          if (!attendeeId) {\n            continue;\n          }\n\n          var newReport = new ClientVideoStreamReceivingReport_1.default();\n          var prevBytesReceived = report.previousMetrics['bytesReceived'];\n          var currBytesReceived = report.currentMetrics['bytesReceived'];\n\n          if (!prevBytesReceived || !currBytesReceived) {\n            continue;\n          }\n\n          var receivedBitrate = (currBytesReceived - prevBytesReceived) * 8 / 1000;\n          newReport.expectedAverageBitrateKbps = bitrate.avgBitrateBps / 1000;\n          newReport.receivedAverageBitrateKbps = receivedBitrate;\n          newReport.attendeeId = attendeeId;\n\n          if (receivedBitrate < bitrate.avgBitrateBps / 1000 * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR) {\n            fireCallback = true;\n          }\n\n          videoReceivingBitrateMap.set(attendeeId, newReport);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (fireCallback) {\n      this.logger.debug(function () {\n        return \"Downlink video streams are not receiving enough data\";\n      });\n      this.context.audioVideoController.forEachObserver(function (observer) {\n        Maybe_1.default.of(observer.videoNotReceivingEnoughData).map(function (f) {\n          return f.bind(observer)(Array.from(videoReceivingBitrateMap.values()));\n        });\n      });\n    }\n  };\n\n  MonitorTask.prototype.connectionHealthDidChange = function (connectionHealthData) {\n    var _a;\n\n    if (connectionHealthData.consecutiveMissedPongs === 0) {\n      if (this.context.reconnectController) {\n        this.context.reconnectController.setLastActiveTimestampMs(Date.now());\n      }\n    }\n\n    this.reconnectionHealthPolicy.update(connectionHealthData);\n    var reconnectionValue = this.reconnectionHealthPolicy.healthIfChanged();\n\n    if (reconnectionValue !== null) {\n      this.logger.info(\"reconnection health is now: \" + reconnectionValue);\n\n      if (reconnectionValue === 0) {\n        this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.ConnectionHealthReconnect), null);\n      }\n    }\n\n    this.unusableAudioWarningHealthPolicy.update(connectionHealthData);\n    var unusableAudioWarningValue = this.unusableAudioWarningHealthPolicy.healthIfChanged();\n\n    if (unusableAudioWarningValue !== null) {\n      this.logger.info(\"unusable audio warning is now: \" + unusableAudioWarningValue);\n\n      if (unusableAudioWarningValue === 0) {\n        this.context.poorConnectionCount += 1;\n        (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('receivingAudioDropped');\n\n        if (this.context.videoTileController.haveVideoTilesWithStreams()) {\n          this.context.audioVideoController.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.connectionDidSuggestStopVideo).map(function (f) {\n              return f.bind(observer)();\n            });\n          });\n        } else {\n          this.context.audioVideoController.forEachObserver(function (observer) {\n            Maybe_1.default.of(observer.connectionDidBecomePoor).map(function (f) {\n              return f.bind(observer)();\n            });\n          });\n        }\n      } else {\n        this.context.audioVideoController.forEachObserver(function (observer) {\n          Maybe_1.default.of(observer.connectionDidBecomeGood).map(function (f) {\n            return f.bind(observer)();\n          });\n        });\n      }\n    }\n  };\n\n  MonitorTask.prototype.handleBitrateFrame = function (bitrates) {\n    var e_2, _a;\n\n    var _this = this;\n\n    var videoSubscription = this.context.videoSubscriptions || [];\n    var requiredBandwidthKbps = 0;\n    this.currentAvailableStreamAvgBitrates = bitrates;\n    this.logger.debug(function () {\n      return \"simulcast: bitrates from server \" + JSON.stringify(bitrates);\n    });\n\n    try {\n      for (var _b = __values(bitrates.bitrates), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var bitrate = _c.value;\n\n        if (videoSubscription.indexOf(bitrate.sourceStreamId) !== -1) {\n          requiredBandwidthKbps += bitrate.avgBitrateBps;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    requiredBandwidthKbps /= 1000;\n\n    if (this.currentVideoDownlinkBandwidthEstimationKbps * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR < requiredBandwidthKbps) {\n      this.logger.info(\"Downlink bandwidth pressure is high: estimated bandwidth \" + this.currentVideoDownlinkBandwidthEstimationKbps + \"Kbps, required bandwidth \" + requiredBandwidthKbps + \"Kbps\");\n      this.context.audioVideoController.forEachObserver(function (observer) {\n        Maybe_1.default.of(observer.estimatedDownlinkBandwidthLessThanRequired).map(function (f) {\n          return f.bind(observer)(_this.currentVideoDownlinkBandwidthEstimationKbps, requiredBandwidthKbps);\n        });\n      });\n    }\n  };\n\n  MonitorTask.prototype.handleSignalingClientEvent = function (event) {\n    var _a; // Don't add two or more consecutive \"signalingDropped\" states.\n\n\n    if (event.type === SignalingClientEventType_1.default.WebSocketClosed && (event.closeCode === 4410 || event.closeCode >= 4500 && event.closeCode < 4600) || event.type === SignalingClientEventType_1.default.WebSocketError || event.type === SignalingClientEventType_1.default.WebSocketFailed) {\n      if (!this.hasSignalingError) {\n        (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('signalingDropped');\n        this.hasSignalingError = true;\n      }\n    } else if (event.type === SignalingClientEventType_1.default.WebSocketOpen) {\n      this.hasSignalingError = false;\n    }\n\n    if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame) {\n      if (!!event.message.bitrates) {\n        var bitrateFrame = event.message.bitrates;\n        this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);\n        this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);\n        this.handleBitrateFrame(event.message.bitrates);\n      }\n\n      var status_1 = MeetingSessionStatus_1.default.fromSignalFrame(event.message);\n\n      if (status_1.statusCode() !== MeetingSessionStatusCode_1.default.OK) {\n        this.context.audioVideoController.handleMeetingSessionStatus(status_1, null);\n      }\n    }\n  };\n\n  MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS = 30000;\n  MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR = 1.5;\n  MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR = 0.5;\n  return MonitorTask;\n}(BaseTask_1.default);\n\nexports.default = MonitorTask;","map":{"version":3,"sources":["../../src/task/MonitorTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\nvar ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\nvar ClientVideoStreamReceivingReport_1 = require(\"../clientmetricreport/ClientVideoStreamReceivingReport\");\nvar ReconnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/ReconnectionHealthPolicy\");\nvar UnusableAudioWarningConnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy\");\nvar Maybe_1 = require(\"../maybe/Maybe\");\nvar MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\nvar MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nvar SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\nvar AudioLogEvent_1 = require(\"../statscollector/AudioLogEvent\");\nvar VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\nvar BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.\n */\nvar MonitorTask = /** @class */ (function (_super) {\n    __extends(MonitorTask, _super);\n    function MonitorTask(context, connectionHealthPolicyConfiguration, initialConnectionHealthData) {\n        var _this = _super.call(this, context.logger) || this;\n        _this.context = context;\n        _this.initialConnectionHealthData = initialConnectionHealthData;\n        _this.taskName = 'MonitorTask';\n        _this.prevSignalStrength = 1;\n        _this.currentVideoDownlinkBandwidthEstimationKbps = 10000;\n        _this.currentAvailableStreamAvgBitrates = null;\n        _this.hasSignalingError = false;\n        _this.checkAndSendWeakSignalEvent = function (signalStrength) {\n            var isCurrentSignalBad = signalStrength < 1;\n            var isPrevSignalBad = _this.prevSignalStrength < 1;\n            var signalStrengthEventType = isCurrentSignalBad\n                ? !isPrevSignalBad\n                    ? AudioLogEvent_1.default.RedmicStartLoss\n                    : null\n                : isPrevSignalBad\n                    ? AudioLogEvent_1.default.RedmicEndLoss\n                    : null;\n            if (signalStrengthEventType) {\n                _this.context.statsCollector.logAudioEvent(signalStrengthEventType);\n            }\n            _this.prevSignalStrength = signalStrength;\n        };\n        _this.realtimeFatalErrorCallback = function (error) {\n            _this.logger.error(\"realtime error: \" + error + \": \" + error.stack);\n            _this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.RealtimeApiFailed), error);\n        };\n        _this.reconnectionHealthPolicy = new ReconnectionHealthPolicy_1.default(context.logger, __assign({}, connectionHealthPolicyConfiguration), _this.initialConnectionHealthData.clone());\n        _this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy_1.default(__assign({}, connectionHealthPolicyConfiguration), _this.initialConnectionHealthData.clone());\n        return _this;\n    }\n    MonitorTask.prototype.removeObserver = function () {\n        this.context.audioVideoController.removeObserver(this);\n        this.context.realtimeController.realtimeUnsubscribeToFatalError(this.realtimeFatalErrorCallback);\n        this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n        this.context.signalingClient.removeObserver(this);\n    };\n    MonitorTask.prototype.run = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.context.removableObservers.push(this);\n                this.context.audioVideoController.addObserver(this);\n                this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);\n                this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n                this.context.connectionMonitor.start();\n                this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);\n                this.context.signalingClient.registerObserver(this);\n                return [2 /*return*/];\n            });\n        });\n    };\n    MonitorTask.prototype.videoTileDidUpdate = function (_tileState) {\n        this.context.maxVideoTileCount = Math.max(this.context.maxVideoTileCount, this.context.videoTileController.getAllVideoTiles().length);\n    };\n    MonitorTask.prototype.videoSendHealthDidChange = function (bitrateKbps, packetsPerSecond) {\n        if (this.context.videoInputAttachedTimestampMs === 0 ||\n            !this.context.videoTileController.hasStartedLocalVideoTile() ||\n            !this.context.lastKnownVideoAvailability.canStartLocalVideo) {\n            return;\n        }\n        var tracks = this.context.activeVideoInput !== null ? this.context.activeVideoInput.getTracks() : null;\n        if (!tracks || !tracks[0]) {\n            return;\n        }\n        var durationMs = Date.now() - this.context.videoInputAttachedTimestampMs;\n        if (packetsPerSecond > 0 || bitrateKbps > 0) {\n            this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingSuccess, this.context.videoDeviceInformation);\n            this.context.statsCollector.logLatency('video_start_sending', durationMs, this.context.videoDeviceInformation);\n            this.context.videoInputAttachedTimestampMs = 0;\n        }\n        else if (durationMs > MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS) {\n            this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingFailed, this.context.videoDeviceInformation);\n            this.context.videoInputAttachedTimestampMs = 0;\n        }\n    };\n    MonitorTask.prototype.videoReceiveBandwidthDidChange = function (newBandwidthKbps, oldBandwidthKbps) {\n        this.logger.debug(function () {\n            return \"receiving bandwidth changed from prev=\" + oldBandwidthKbps + \" Kbps to curr=\" + newBandwidthKbps + \" Kbps\";\n        });\n        this.currentVideoDownlinkBandwidthEstimationKbps = newBandwidthKbps;\n    };\n    MonitorTask.prototype.checkResubscribe = function (clientMetricReport) {\n        var metricReport = clientMetricReport.getObservableMetrics();\n        if (!metricReport) {\n            return false;\n        }\n        var availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;\n        var nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;\n        var needResubscribe = false;\n        this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);\n        var resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();\n        needResubscribe = needResubscribe || resubscribeForDownlink;\n        if (resubscribeForDownlink) {\n            this.context.videosToReceive = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();\n            this.logger.info(\"trigger resubscribe for down=\" + resubscribeForDownlink + \"; videosToReceive=[\" + this.context.videosToReceive.array() + \"]\");\n        }\n        if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n            this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({\n                uplinkKbps: availableSendBandwidth / 1000,\n                nackCountPerSecond: nackCountPerSecond,\n            });\n            var resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();\n            needResubscribe = needResubscribe || resubscribeForUplink;\n            if (resubscribeForUplink) {\n                this.logger.info(\"trigger resubscribe for up=\" + resubscribeForUplink + \"; videosToReceive=[\" + this.context.videosToReceive.array() + \"]\");\n                this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n                this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n            }\n        }\n        return needResubscribe;\n    };\n    MonitorTask.prototype.metricsDidReceive = function (clientMetricReport) {\n        var e_1, _a;\n        var defaultClientMetricReport = clientMetricReport;\n        if (!defaultClientMetricReport) {\n            return;\n        }\n        if (this.checkResubscribe(clientMetricReport)) {\n            this.context.audioVideoController.update();\n        }\n        if (!this.currentAvailableStreamAvgBitrates) {\n            return;\n        }\n        var streamMetricReport = defaultClientMetricReport.streamMetricReports;\n        if (!streamMetricReport) {\n            return;\n        }\n        var downlinkVideoStream = new Map();\n        var videoReceivingBitrateMap = new Map();\n        // TODO: move those logic to stats collector.\n        for (var ssrc in streamMetricReport) {\n            if (streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType_1.default.VIDEO &&\n                streamMetricReport[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {\n                downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);\n            }\n        }\n        var fireCallback = false;\n        try {\n            for (var _b = __values(this.currentAvailableStreamAvgBitrates.bitrates), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var bitrate = _c.value;\n                if (downlinkVideoStream.has(bitrate.sourceStreamId)) {\n                    var report = downlinkVideoStream.get(bitrate.sourceStreamId);\n                    var attendeeId = this.context.videoStreamIndex.attendeeIdForStreamId(bitrate.sourceStreamId);\n                    if (!attendeeId) {\n                        continue;\n                    }\n                    var newReport = new ClientVideoStreamReceivingReport_1.default();\n                    var prevBytesReceived = report.previousMetrics['bytesReceived'];\n                    var currBytesReceived = report.currentMetrics['bytesReceived'];\n                    if (!prevBytesReceived || !currBytesReceived) {\n                        continue;\n                    }\n                    var receivedBitrate = ((currBytesReceived - prevBytesReceived) * 8) / 1000;\n                    newReport.expectedAverageBitrateKbps = bitrate.avgBitrateBps / 1000;\n                    newReport.receivedAverageBitrateKbps = receivedBitrate;\n                    newReport.attendeeId = attendeeId;\n                    if (receivedBitrate <\n                        (bitrate.avgBitrateBps / 1000) * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR) {\n                        fireCallback = true;\n                    }\n                    videoReceivingBitrateMap.set(attendeeId, newReport);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (fireCallback) {\n            this.logger.debug(function () {\n                return \"Downlink video streams are not receiving enough data\";\n            });\n            this.context.audioVideoController.forEachObserver(function (observer) {\n                Maybe_1.default.of(observer.videoNotReceivingEnoughData).map(function (f) {\n                    return f.bind(observer)(Array.from(videoReceivingBitrateMap.values()));\n                });\n            });\n        }\n    };\n    MonitorTask.prototype.connectionHealthDidChange = function (connectionHealthData) {\n        var _a;\n        if (connectionHealthData.consecutiveMissedPongs === 0) {\n            if (this.context.reconnectController) {\n                this.context.reconnectController.setLastActiveTimestampMs(Date.now());\n            }\n        }\n        this.reconnectionHealthPolicy.update(connectionHealthData);\n        var reconnectionValue = this.reconnectionHealthPolicy.healthIfChanged();\n        if (reconnectionValue !== null) {\n            this.logger.info(\"reconnection health is now: \" + reconnectionValue);\n            if (reconnectionValue === 0) {\n                this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.ConnectionHealthReconnect), null);\n            }\n        }\n        this.unusableAudioWarningHealthPolicy.update(connectionHealthData);\n        var unusableAudioWarningValue = this.unusableAudioWarningHealthPolicy.healthIfChanged();\n        if (unusableAudioWarningValue !== null) {\n            this.logger.info(\"unusable audio warning is now: \" + unusableAudioWarningValue);\n            if (unusableAudioWarningValue === 0) {\n                this.context.poorConnectionCount += 1;\n                (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('receivingAudioDropped');\n                if (this.context.videoTileController.haveVideoTilesWithStreams()) {\n                    this.context.audioVideoController.forEachObserver(function (observer) {\n                        Maybe_1.default.of(observer.connectionDidSuggestStopVideo).map(function (f) { return f.bind(observer)(); });\n                    });\n                }\n                else {\n                    this.context.audioVideoController.forEachObserver(function (observer) {\n                        Maybe_1.default.of(observer.connectionDidBecomePoor).map(function (f) { return f.bind(observer)(); });\n                    });\n                }\n            }\n            else {\n                this.context.audioVideoController.forEachObserver(function (observer) {\n                    Maybe_1.default.of(observer.connectionDidBecomeGood).map(function (f) { return f.bind(observer)(); });\n                });\n            }\n        }\n    };\n    MonitorTask.prototype.handleBitrateFrame = function (bitrates) {\n        var e_2, _a;\n        var _this = this;\n        var videoSubscription = this.context.videoSubscriptions || [];\n        var requiredBandwidthKbps = 0;\n        this.currentAvailableStreamAvgBitrates = bitrates;\n        this.logger.debug(function () {\n            return \"simulcast: bitrates from server \" + JSON.stringify(bitrates);\n        });\n        try {\n            for (var _b = __values(bitrates.bitrates), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var bitrate = _c.value;\n                if (videoSubscription.indexOf(bitrate.sourceStreamId) !== -1) {\n                    requiredBandwidthKbps += bitrate.avgBitrateBps;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        requiredBandwidthKbps /= 1000;\n        if (this.currentVideoDownlinkBandwidthEstimationKbps *\n            MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR <\n            requiredBandwidthKbps) {\n            this.logger.info(\"Downlink bandwidth pressure is high: estimated bandwidth \" + this.currentVideoDownlinkBandwidthEstimationKbps + \"Kbps, required bandwidth \" + requiredBandwidthKbps + \"Kbps\");\n            this.context.audioVideoController.forEachObserver(function (observer) {\n                Maybe_1.default.of(observer.estimatedDownlinkBandwidthLessThanRequired).map(function (f) {\n                    return f.bind(observer)(_this.currentVideoDownlinkBandwidthEstimationKbps, requiredBandwidthKbps);\n                });\n            });\n        }\n    };\n    MonitorTask.prototype.handleSignalingClientEvent = function (event) {\n        var _a;\n        // Don't add two or more consecutive \"signalingDropped\" states.\n        if ((event.type === SignalingClientEventType_1.default.WebSocketClosed &&\n            (event.closeCode === 4410 || (event.closeCode >= 4500 && event.closeCode < 4600))) ||\n            event.type === SignalingClientEventType_1.default.WebSocketError ||\n            event.type === SignalingClientEventType_1.default.WebSocketFailed) {\n            if (!this.hasSignalingError) {\n                (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('signalingDropped');\n                this.hasSignalingError = true;\n            }\n        }\n        else if (event.type === SignalingClientEventType_1.default.WebSocketOpen) {\n            this.hasSignalingError = false;\n        }\n        if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame) {\n            if (!!event.message.bitrates) {\n                var bitrateFrame = event.message.bitrates;\n                this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);\n                this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);\n                this.handleBitrateFrame(event.message.bitrates);\n            }\n            var status_1 = MeetingSessionStatus_1.default.fromSignalFrame(event.message);\n            if (status_1.statusCode() !== MeetingSessionStatusCode_1.default.OK) {\n                this.context.audioVideoController.handleMeetingSessionStatus(status_1, null);\n            }\n        }\n    };\n    MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS = 30000;\n    MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR = 1.5;\n    MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR = 0.5;\n    return MonitorTask;\n}(BaseTask_1.default));\nexports.default = MonitorTask;\n//# sourceMappingURL=MonitorTask.js.map"]},"metadata":{},"sourceType":"script"}